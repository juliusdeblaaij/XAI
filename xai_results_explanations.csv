explanations
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Jsonstringtoobject transformer used for gemfire json sink should accept a map should be renamed as well. org.springframework.integration.transformer.messagetransformationexception: nested exception is org.springframework.messaging.messagehandlingexception: nested exception is org.springframework.expression.spel.spelevaluationexception: el1004e:(pos 8): method call: method toobject(java.util.linkedhashmap) cannot be found on org.springframework.integration.x.gemfire.jsonstringtoobjecttransformer type org.springframework.integration.transformer.messagetransforminghandler.handlerequestmessage(messagetransforminghandler.java:74) ~[spring-integration-core-4.1.5.release.jar:na] org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:99) ~[spring-integration-core-4.1.5.release.jar:na] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ~[spring-integration-core-4.1.5.release.jar:na] (...) with 1.2 release when trying to persist a json payload using the gemfire-json-server sink.. it works great on 1.1.release and 1.2 build snapshot 2015-04-23.001857 the demo repository is open so i can definitely share it with your developers but wondered if we changed something recently on that sink that could cause an issue."""" and """"Improve type handling for jdbc sink the jdbc sink is currently limited to handling the entire payload as a string and converting a single json object to row data. we should improve that and support the following input types: - linkedcaseinsensitivemap (single row) - list<linkedcaseinsensitivemap> (multiple rows as a batch insert) - json string {""""id"""":74488""""name"""":""""foo""""""""year"""":""""2014""""} (single row) - json array [{""""id"""":74488""""name"""":""""foo""""""""year"""":""""2014""""}{""""id"""":74489""""name"""":""""bar""""""""year"""":""""2014""""}] (multiple rows as a batch insert) - none of the above use payload.tostring() the above matches what the new jdbc source puts out (depending on outputtype used)"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Document mqtt source and sink"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Investigate swagger to generate rest api documents"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Command to create a tap to store it's definition and optionally deploy with --autostart flag"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-d developer i'd like to add support to deploy yarn app into hdfs automatically so i can have the {{xd-admin}} orchestrate overall deployment by leveraging the manifest to deploy where and with what assets."""" is a not user story because it is most similar to: """"Rest api for dsl completion should allow extension the rest api for dsl completion currently returns a list<string>. this prevents future backwards compatible extension. should change to list<completion> where completion has e.g. a """"text"""" property."""" and similar to """"Remove xdcontainer and rename launcherapplication post-boot refactoring. xdcontainer lifecycle methods are not being used. refactor by merging relevant functionality into launcherapplication. rename launcherapplication to containerserverapplication (consistent with adminserverapplication)."""" and similar to """"Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains('group1') above example is random selection?"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update documentation section """"running in distributed mode"""" to show use of rabbitmq in addition to redis the documentation in the running in distributed mode chapter should discuss that the distributed runtime can use essentially any middleware to communicate between nodes. this functionality is provided by the core channelregistry abstraction. a new intro paragraph shoul convey that it isn't a 'redis' only or 'rabbitmq' only system. there should be """"installing rabbitmq"""" and """"starting rabbitmq"""" sections to match those for redis. """"starting spring xd in distributed mode"""" should cover how to configure the system to select to use redis or rabbit."""" is a not user story because it is most similar to: """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Automate execution of gradle pushgenerateddocs should be part of the daily build. one """"easy"""" way to do it would be to use the """"hardcoded"""" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though"""" and similar to """"Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Provide a conventional way to extend xd container configuration provide an easy way for users to add beans (e.g. gemfire cache configuration) or modify default xd configuration such as serializers and message converters. a simple approach is to add a well known resource selector such as classpath*:meta-inf/spring/xd/extensions or include this path in an extensible @configuration base class. in addition we should adopt conventional names for beans that are meant to be extended e.g. use an xd. prefix."""" is a not user story because it is most similar to: """"Vary consumers size (ecb-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Vary consumers size (db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Fix mapreduce job submission on cloudera cdh5 submitting jobs that submit yarn mr tasks on cloudera 5.3.0 - job fails when submitting the yarn app java.lang.noclassdeffounderror: com/google/common/io/limitinputstream - this is from guava and that class was removed starting with v. 15.0 - i can get around this by including guava-14.0.1.jar in lib/cdh5 (not sure if this breaks something else)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Running job with time delay (non cron) launches 2 instances before job is supposed to fire"""" is a user story, and is worth 3 story points because it is most similar to: As a module author i would like to apply rxjava processor module with spring cloud stream. and similar to """"As a developer i'd like to add load receiving _sink_ module so that i can measure received throughput"""" and similar to """"As a s-c-d developer i'd like to move the external library to its own project so we have a clear separation of functionalities in s-c-d repo."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove external config properties for modules there are some modules that use external config properties (kafka producer/consumer hadoop properties etc.). we need to avoid using such properties and have them configured inside module so that module and its properties are self contained."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the ability to configure acls so that i can restrict access to resources accessed via admin ui. *examples:* * who can create streams? * who can destroy the streams? * who can view the streams? ??(defaults to all)?? and similar to """"As a developer i'd like to move 'input/output type conversion' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" and similar to """"As a user i'd like to use boot-based {{modulerunner}} for use in container-managed environments so i can run xd without _xd-containers_. scope: * complete the remaining deployment properties work"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Change banner of shell to say only 'xd'"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade asciidoctor-gradle-plugin to 0.7.0 looks like we need to spend a cycle on asciidoc - as we still have the author-tag-issue - i thought we can simply upgrade the asciidoctor-gradle-plugin to 0.7.0 (currently 0.4.1) but that breaks the docs being generated."""" is a not user story because it is most similar to: """"The hdfs sink should support writing pojos to hdfs using avro serialization writing pojos using cdk data (avro) we should support both partitioned and un-partitioned. this story addresses only un-partitioned. document limitations in terms of which java types are supported and not supported by the avro serialization"""" and similar to """"Review dsl updated story points to 14 since 5 of us just participated in a 2 hour call and we still need to discuss """"topology"""" support after some dev spikes later this week"""" and similar to """"Fix guava dependency for hadoop20 and phd1 spring xd currently ships with guava 12.0 while hadoop 2.0.5 and pivotal hd 1.0 depends on 11.0.2 - this could lead to classpath problems if we include both."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Rest endpoint/command interface for runtime module deployment properties we need a way to access the deployment properties for the deployed modules. for example: 'runtime module foo.sink.bar-2'"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" and similar to """"As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Document redis pool properties in servers.yml add spring.redis.pool.* properties to server.yml commented out to show default values. e.g. maxidle: 8 minidle: 0 maxactive: 8 maxwait: -1"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a user i need a """"production-ready' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x"""" and similar to """"As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix package tangle between o.s.xd.dirt.event and o.s.xd.dirt.container https://sonar.springsource.org/drilldown/measures/7173?metric=package_cycles&rids%5b%5d=7717"""" is a not user story because it is most similar to: """"Xd.module.sequence property missing two separate reports of problems with this property: http://stackoverflow.com/questions/34439296/spring-xd-stream-deployment-failure http://stackoverflow.com/questions/34514393/issue-in-spring-xd-cluster-when-deploying-my-module"""" and similar to """"Add spring-xd-hadoop distro specific sub-projects we need to modify build adding two sub-projects for spring-xd-hadoop: one for hadoop 1.1.2 and one for phd1 (pivotal hd) to pull in transitive dependencies for correct hadoop distro"""" and similar to """"Ui + shell: remove any usage of rest endpoints using the """".json"""" notation accessing rest endpoint using the """".json"""" file extension causes maintenance issues for the authorization rules and is not necessary. remove any usage for the admin ui and the shell. at the same time the """".json"""" endpoint shall be deprecated or removed ultimately."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to deploy a stream in the same container so all modules are colocated within the container. perhaps also consider building leader election within modules in order to automatically failover the application (stream) from one container to another."""" is a not user story because it is most similar to: """"Simple ootb job for testing similar to {{time | log}} we should ship a simple batch job that appends a timestamp to a file. this will make it much easier to validate job functionality especially in automated tests."""" and similar to """"Request to create a repo for spring xd performance testing it would be nice if we have a git repo for spring xd performance testing. this would enable us to have a common repository (rather than inside spring-xd as a subproject) for all performance related code specific to any module message middleware etc."""" and similar to """"Jdbc acceptance tests must jdbc props vs. configprops setting. in this case we will use environment variables to set the jdbc sink settings. thus we will just remove code."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Broken """"deployment"""" link in docs please see """"deployment"""" link on http://docs.spring.io/autorepo/docs/spring-xd/1.1.0.release/reference/html/#_module_deployment page. !broken-link-deployment.png! the link is broken and redirects to http://docs.spring.io/autorepo/docs/spring-xd/1.1.0.release/reference/html/deployment which is a 404."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd user i want to have the ability to customize the encoders and decoders used by the kafka source sink and bus so that i can customize data formats and choose the most appropriate strategy and similar to """"As a developer i'd like to configure hadoop_user_name environment variable to implement and run-as-user for kerberos secured clusters. this would need some additional work in shdp."""" and similar to """"As a s-c-d developer i'd like to experiment how do we resolve and then add module dependent jar's to boot loader so i have an approach to handle external libraries required by ootb modules."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Close parent contexts when shutting down"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create tcp source module based off si tcp inbound adapter. this will allow for event forwarding that can select among the existing si serialized/deserializer options."""" is a not user story because it is most similar to: """"Investigate deployed module context close upon container shutdown upon the container shutdown the deployed modules' contexts get closed before the corresponding `stream/jobmodulewatcher` does the undeployment of the stream/job modules."""" and similar to """"Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains('group1') above example is random selection?"""" and similar to """"Add rest resource sink would be nice to have a sink for rest resources. might be configurable with an endpoint uri. basic auth details would be a nice to have too. would perform a post to the endpoint passing the payload."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Enhancements to gemfire cq source the gemfire cq source needs some enhancements: * enable locator configuration * consider decoupling from json. currently designed to work with gemfire-json-server to avoid dependence on specific domain objects on the client and server side. so produces json strings from pdxinstance(s) stored in the cache."""" is a not user story because it is most similar to: """"Move $xd_home/modules/processor/scripts out of the way since the refactoring of the module registry that does not """"look inside"""" a module it can't know that the scripts directory is not a module. everything that is a direct child of source processor sink job should be a module archive. everything else supporting that should be moved out e.g. in modules/common"""" and similar to """"No way to set 'makeunique' false when creating job in ui the resulting definition starts with --makeunique=true even if the makeunique checkbox is unchecked. i can check and uncheck the box and the --make unique parameter isn't included. since the default for this parameter is true the end result is the same. there doesn't seem to be a way to set --makeunique=false."""" and similar to """"The use of labelled modules and taps needs more explanation https://github.com/spring-projects/spring-xd/wiki/taps mentions this but the explanation needs more elaboration and example e.g. mystream -> """"http | flibble: transform --expression=payload.touppercase() | file"""" """"tap:stream:mystream.flibble > transform --expression=payload.replaceall('a''.') | log"""")"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have the flexibility to specify config options for ip and hostname so that i can list the correct configuration for xd admin and xd container servers in the admin-ui and shell."""" is a not user story because it is most similar to: """"Spring xd to configure the stream drag and graphic spring xd can drag way to configure flow in the form of figure? similar to configure a workflow graphical interface looking forward to reply"""" and similar to """"Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains('group1') above example is random selection?"""" and similar to """"Make rabbitmessagebus rabbitmq config properties optional when the bus is used outside of the xd container (e.g. spring-bus) the inheritance from spring boot configuration is broken (no application.yml or servers.yml on the cp). make the bus properties optional (add """":"""")"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Throughput optimized tcp based adapters based on reactor tcp project"""" is a not user story because it is most similar to: """"Port load-generator & throughput modules to scs-modules migrate load-generator and throughput to scs."""" and similar to """"User wants ability to test sinks handled by 1245"""" and similar to """"Update batch job docs to cover triggers as a source"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to port {{tcp}} module from xd to s-c-s repo so i can use it as {{source}} module to build streaming pipeline."""" is a user story, and is worth 2 story points because it is most similar to: As a spring xd developer i'd like to port {{script}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline. and similar to """"As a spring xd developer i'd like to port {{splitter}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" and similar to """"As a spring xd developer i'd like to port {{transform}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Fix random configuration in securedshelltests since the securedshelltests initialize singlenode app in a static way the random configuration needs to be setup statically as well."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Provide moduleoptionsmetadata using simple approach following merge of xd-953 provide module options using the """"simple"""" approach where applicable"""" is a not user story because it is most similar to: """"Shell - 'makeunique' job parameter is true by default currently the shell assumes that the 'makeunique'job parameter is by default *false*. that is not true. as a consequence the parameter has currently no impact/does not work."""" and similar to """"Fail sonar ci build if there are any package tangles violated. similar to what would show up on structure101 reports."""" and similar to """"Set fixed npm version for grunt gradle plugin ensure build works in windows environments"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"With security - unable to upload module once security is enabled one cannot upload modules using the shell any longer."""" is a not user story because it is most similar to: """"Jobs list rest endpoint should include deployed/undeployed status currently the jobs definition list rest endpoint doesn't include deployed/undeployed status on a given job."""" and similar to """"Documentation for """"gemfirecq | file"""" processing put on the guide as a section in an 'input-stream' wiki page."""" and similar to """"Documentation for field value taps put on the guide as a section in an 'input-stream' wiki page."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove footer from admin ui please see the discussion here: https://github.com/spring-projects/spring-xd/pull/1052#issuecomment-48761686"""" is a user story, and is worth 1 story points because it is most similar to: As a module developer i would like the jsonstringtotupleconverter in the spring cloud streams project to maintain the types provided in the json string and not convert everything to a string representation. and similar to """"As a temporary work around to fix xd-1935 make producible media type to 'application/json' for job executions get request endpoints."""" and similar to """"As a user i'd like to have a landing page with higher-order links for sources processors sinks and jobs so i can jump to right section from one place."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Rabbit pub/sub consumers should support concurrency pubsub consumers can support concurrency since the threads are competing consumers on the queue."""" is a user story, and is worth 5 story points because it is most similar to: As a xd user i'd like to orchestrate composed jobs so i can bring multiple jobs into single workflow and operationalize. and similar to """"As a developer i'd like to upgrade to kafka's si ga release so that i can sync -up with the latest bits. the scope is to backport kafka xd changes to si kafka and then upgrade to the ga release."""" and similar to """"As a user i'd like to parameterize merge options so i can incrementally consume the delta with the help of megastore."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Xd should run offline trying to run xd offline results in an error in redis.xml because the cloudfoundry schema file is missing. we need to add the cf-runtime jar to the classpath to resolve this."""" is a user story, and is worth 8 story points because it is most similar to: As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd. and similar to """"As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_."""" and similar to """"As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Spike: destroy composed job as an xd developer i'd like to explore options to remove composed job so i can clean-up unused resources and memory footprints."""" is a not user story because it is most similar to: """"Mixins need to use property placeholders instead of hard coded values where possible many attributes in mixins use hard coded values instead of using property placeholders. jdbcconnectionmixin jdbcconnectionpoolmixin mqttconnectionmixin..."""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" and similar to """"Ui: user should be able to see step execution info in a table below job detail on clicking the job detail page we should display all the step executions associated with the specific job execution in a table view."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a common exception framework for xd need to capture exceptions from the various projects that make up xd and wrap them in xd specific exceptions. an example of this is when leaving out the channels in the module definitions we see nosuchbeanexceptions and illegalargumentexceptions thrown based on which module and what channel is missing."""" is a not user story because it is most similar to: """"Split integration.x in dedicated xd projects where appropriate similar to what is done for e.g. hadoop reactor and http some of the classes in the .x package (namely gemfire splunk twitter) should go in dedicated (albeit small) projects. this would enable further modularization (see xd-915)"""" and similar to """"Xd distributed tests are broken there are test failures running xd distributed tests. it looks like all the test failures are related to npe on deploymentproperties format: java.lang.nullpointerexception org.springframework.xd.rest.domain.support.deploymentpropertiesformat.formatdeploymentproperties(deploymentpropertiesformat.java:72) org.springframework.xd.rest.client.impl.jobtemplate.deploy(jobtemplate.java:71) org.springframework.xd.distributed.test.jobstatetests.testjobstatetransition(jobstatetests.java:83)"""" and similar to """"Verify platform compatibility versions with the xd dependencies we need to make sure there is no conflicting/missing dependency with build.gradle using spring io platform dependencies. https://jira.spring.io/browse/xd-1929 is one such scenario where jolokia dependency went missing."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Jdbc property settings need to be made externally configurable we need to have a properties section (documented as well) so that users can setup their jdbc connections for the various components."""" is a not user story because it is most similar to: """"Ui: user should be able to filter the list of executions on the execution tab on clicking the “executions” tab user should see the list of all batch job executions. there should be options to filter job executions by few criteria such as by “job name” “execution time” etc."""" and similar to """"Cleanup hsqldb data directory used by tests after each test completion currently the """"data"""" directory created by the hsqldb process during the tests run is not cleaned up and may cause issues. we should delete the """"data"""" directory after each test completion."""" and similar to """"Add support to upload custom modules as an s-c-d user i'd like to upload custom modules using shell/rest-api so i can contribute modules and create streaming/batch pipelines."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Http source module should copy content-type header to si messageheaders.content_type"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Hdfsjdbc acceptance test"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"User wants ability to test sources examples: 1. be able to start the rabbitmq source just by pointing to modules/source/rabbit.xml pass in some property file for parameters to be replaced and outgoing message is placed in a in-memory queue backed channel for use with assertions to verify functionality. 2. test for as many source types as is 'reasonable' e.g. mqtt/tcp testing might be harder than say rabbitmq. 3. test that sending json results in media-type header is set to json 4. test that sending pojo """" pojo 5. test that sending tuple """" tuple 6. test that sending raw bytes """" raw bytes"""" is a not user story because it is most similar to: """"Make transport serialization configurable the refactoring done for m6 prevents overriding """"codec"""" bean configured for messagebus. since mb is now in sharedservercontext that context can only be altered by a custom orderedcontextinitializer for example. there is currently no mechanism provided by the bootstrapcontext for dynamically loading a user's orderedcontextinitializer."""" and similar to """"Create xd shell integration test parser since most of the xd.shell.itests will do more then one thing (deploy a stream start it add a tap add a job stop etc) we decided to decouple writing testcases with running it. test cases will be written in spring-shell scriptlets. scriptlets are json files with command and expectedresult as tokens. here's an example: {code} { """"testscript"""": [ {""""command"""" : """"stream create --definition """"http | file"""" --name http2file"""" """"result"""" : """"created new stream 'http2file'""""} {""""command"""" : """"stream list"""" """"result"""" : """"...""""} ] } {code} a parser will parse scriptlets executes it and asserts on expected results."""" and similar to """"Make deploy=false as the default when creating a new job the automatic deployment of the job makes it harder to understand the lifecycle of the job and also does not allow for the opportunity to define any additional deployment metadata for how that job runs e.g is it partitioned etc."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Admin leader election issue when using different management port when the admin is started with the different management port (default is the same as that of admin http port) then the leadership is requested when the management context is setup. the leadership election should happen only using the admin server application context. with this the following exception is thrown when deployment requests are handled: 2015-03-24 21:48:26340 1.2.0.snap error deploymentsupervisor-0 queue.distributedqueue - exception processing queue item: queue-0000000004 org.springframework.xd.dirt.server.admin.deployment.deploymentexception: teststream org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeployresource(abstractinstancepersistingdeployer.java:164) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeploy(abstractinstancepersistingdeployer.java:83) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeployall(abstractinstancepersistingdeployer.java:109) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.deleteall(abstractinstancepersistingdeployer.java:117) org.springframework.xd.dirt.server.admin.deployment.zk.deploymentmessageconsumer.processdeploymentmessage(deploymentmessageconsumer.java:115) org.springframework.xd.dirt.server.admin.deployment.zk.deploymentmessageconsumer.consumemessage(deploymentmessageconsumer.java:73) org.springframework.xd.dirt.server.admin.deployment.zk.deploymentmessageconsumer.consumemessage(deploymentmessageconsumer.java:43) org.apache.curator.framework.recipes.queue.distributedqueue.processmessagebytes(distributedqueue.java:678) org.apache.curator.framework.recipes.queue.distributedqueue.processnormally(distributedqueue.java:712) org.apache.curator.framework.recipes.queue.distributedqueue.access$300(distributedqueue.java:65) org.apache.curator.framework.recipes.queue.distributedqueue$5.run(distributedqueue.java:629) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:745) caused by: java.lang.illegalargumentexception: module deployment request path cache shouldn't be null. org.springframework.util.assert.notnull(assert.java:112) org.springframework.xd.dirt.server.admin.deployment.zk.zkdeploymenthandler.undeploy(zkdeploymenthandler.java:81) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeployresource(abstractinstancepersistingdeployer.java:161) ... 17 more"""" and """"Ensure that when batch jobs are created they are created with the job bean definition id equal to the ‘stream name’ unlike in spring-batch-admin in springxd all the jobs the /modules/jobs directory is not ‘visible’ to query when the server starts. jobs only become visible to xd’s ‘jobs list’ command once they have been ‘created’. creating a job in xd is an opportunity to specify additional values to any property placeholders in the job bean definition. this isn’t part of spring-batch-admin. we will not worry about the creation of job definition in this story. assume that they have been created already and that the get for /jobs works as it does now for spring xd. we should however make sure that there is always a replacement of the job name in the job bean definition to match the ‘--name’ specified in the command line. that is “job create --name myjob --description “thisfunkyjob�? will use ‘myjob to replace <job id=""""${xd.stream.name}"""" in the file thisfunkyjob.xml *implementation suggestions* this should hopefully just be a matter of changing job definition files to follow the naming pattern. <job id=""""${xd.stream.name}"""" … /> *how to verify it works* 1. create a junit integration style test that has ‘job create --name myjob --defintion “testjob�?’ and then deploy the job. the name ‘myjob’ should appear in the job execution table"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add polling twitter source i've created a source module for polling a twitter timeline using the spring integration twitter inbound adapter. i've placed my api keys in the modules.yml file and verified that they are picked up by the twitterstream and twitterseach modules that come with springxd. however they are not picked up by my custom module. i viewed the source for both the stream and and the search and i feel my project is near identical in configuration. am i missing something or are these properties somehow special for just the two twitter sources that come with springxd? i'd like to get this working and commit it to the project."""" is a not user story because it is most similar to: """"Riemann - measure based alerts we would like to experiment with “riemann” a clojure library to aggregate events from servers and applications through stream processing. features: * tracking latency distribution * email for exceptions * memory and cpu statistics this will help understand the behavior of critical components to eventually orchestrate workflows to proactively monitor and notify important contacts/groups as needed. webiste -> http://riemann.io/ github -> https://github.com/aphyr/riemann"""" and similar to """"Duplicate messages on tap if i fiddle with the testtappingwithlabels method i can reproduce the same issue: httpsource source = newhttpsource() filesink sink = newfilesink().binary(true) filesink tapsink1 = newfilesink().binary(true) stream().create(""""myhttp"""" """"%s | flibble: transform --expression=payload.touppercase() | flibble2: transform --expression=payload.touppercase() | %s"""" source sink) stream().create(""""mytap4"""" """"tap:stream:myhttp.flibble > transform --expression=payload.replaceall('a''.') | %s"""" tapsink1) source.ensureready().postdata(""""dracarys!"""") assertthat(sink eventually(hascontentsthat(equalto(""""dracarys!"""")))) assertthat(tapsink1 eventually(hascontentsthat(equalto(""""dr.c.rys!"""")))) java.lang.assertionerror: expected: """"dr.c.rys!"""" trying at most 10 times but: failed after 10*100=1000ms: """"dr.c.rys!dr.c.rys!"""""""" and similar to """"Stream definition completion rest layer + shell adapter provide the infrastructure for http get /completions?start='http | file --d"""" that would return a list of possible completions (in this case returning the file option names that start with """"d"""") this story is about (and only about): - having that rest controller delegating to some """"completionsengine"""" - implementing the spring shell converter that talks to that it's an empty shell useless (but easy to do) without the actual """"completionsengine"""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Cannot destroy tap if tapped stream is already destroyed xd:>tap destroy mytap 16:44:41850 warn spring shell client.resttemplate:524 - delete request for """"http://localhost:8080/taps/mytap"""" resulted in 400 (bad request) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: xd116e:(pos 4): unrecognized stream reference 'foo' tap foo.http | log tap is then still listed when i do a """"tap list"""""""" is a not user story because it is most similar to: """"Create aggregator module that uses an embedded database stored in the local filesystem similar to xd-1100. si has the jdbc based message store. <int-jdbc:message-store id=""""messagestore"""" data-source=""""datasource"""" table-prefix=""""my_int_""""/> the configuration of this aggregator would be configured so that it uses an embedded database hsqldb or h2 depending if there is any real perf benefit to one or the other and store the data on the local file system."""" and similar to """"Add documentation for a 'stdin' source module in order to support ingestion from stdin the suggested approach is to do the following. xd:>stream create --definition """"tcp --decoder=lf | log"""" --name foo $ cat my.log | netcat localhost 1234 so while this is really a tcp based ingestion case once can use pipe or redirect of stdin/err in order to achieve the same goal. it should appear as a source module in the docs on par with other source modules in its own section."""" and similar to """"Create documentation section for the shell create a new section in the docs regaring shell usage in particular how to represent single and double quotes. include some discussion of basic commands to manipulate streams jobs and list modules. how to pass in a file that can be executed when the shell starts up. also point to spring-shell ref docs for extensibility in terms of adding custom commands."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to refer to documentation so that i can build the custom module based on recommended standards and patterns."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Rabbitmq source is not ingested the data into jdbc sink i am using spring xd to ingest the data into pivotal hd.my source is log files which is coming from logstash through rabbitmq. i could able to ingest the log files in hdfs (by using rabbitmq source and hdfs sink) however when i try to ingest the data directly into hawq by using jdbc sinkit's not working. shall we directly load rabbitmq source into any databases like hawq? stream create --name pivotalqueue --definition """"rabbit --host=<my host name> | jdbc --columns='colum list'"""" ---not working i configured jdbc in jdbc.properties. there was no issue with jdbc configuration(because i tested this with simple tail source it's working and load the data into hawq. stream create --name pivotalqueue --definition """"tail --name=/tmp/xd/output/test.out | jdbc --columns='columns list'"""" )"""" and """"Create a scriptprocessor module that allows the execution of a groovy (potentially jrubyjython) based si service activator this will enable arbitrary processing logic to be used in a processing step. see http://blog.springsource.org/2011/12/08/spring-integration-scripting-support-part-1/ <int:service-activator ...> <script:script lang=""""groovy"""" location=""""file:scripts/groovy/myscript.groovy""""> </int:service-activator> would be the essence of the module. probably 'lang' gets detected from the file extension."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove usage of integrationevaluationcontextaware this deprecated in si 4.2. use {{this.evaluationcontext = expressionutils.createstandardevaluationcontext(getbeanfactory())}} in {{afterpropertiesset()}} instead. not that this can safely be done in 1.2.x - the preferred mechanism is available in si 4.1.x too."""" is a user story, and is worth 1 story points because it is most similar to: As a module developer i would like the jsonstringtotupleconverter in the spring cloud streams project to maintain the types provided in the json string and not convert everything to a string representation. and similar to """"As a temporary work around to fix xd-1935 make producible media type to 'application/json' for job executions get request endpoints."""" and similar to """"As a user i'd like to have a landing page with higher-order links for sources processors sinks and jobs so i can jump to right section from one place."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove the s3 xd jar cache originally it was placed in the code to prevent overtasking our servers with downloads when people want to install xd. and to allow for faster downloads. however xd jars are already placed on s3 so this feature is no longer needed."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to host/read python script (file) from hdfs so i can use the shell processor in xd (on cf) to delegate data science functionality to py runtime and receive the feedback back in xd. and similar to """"As a developer i'd like to have a central place to manage external properties for applications across all the environments so i can provide server and client-side support for externalized configuration for xd-admin and xd-container servers."""" and similar to """"As a follow up to xd-2877 experiment with the removal of the list of modules from basedefinition and reparse as needed. branch is here: https://github.com/pperalta/spring-xd/tree/deploy-refactor-2"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to create separate repo for yarn spi so i don't have to bundle all spi variants under one admin project."""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to clean up message bus resources associated with the stream so that when the stream is destroyed so does the coupled queues/topics. and similar to """"As a developer i'd like to document the kryo optimization guidelines so the end-users can refer to it while tuning to improve performance."""" and similar to """"As a xd developer i'd like to upgrade to si 4.2 spring 4.2.1 and amqp 1.5 dependencies so i can take advantage of the latest improvements."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Classpath issue with homebrew version on macosx 10.9.1 i've installed spring xd for the first time today on my mac using the homebrew distribution. i tried to create the following stream : {{xd> stream create --definition """"http --port=6666 | log"""" --name httptest}} this produced the following error : org.springframework.integration.messagehandlingexception: error occurred in message handler [moduledeployer] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:79) org.springframework.integration.config.serviceactivatorfactorybean$1.handlerequestmessage(serviceactivatorfactorybean.java:83) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:142) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:183) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:153) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:92) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:228) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:212) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:177) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:171) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:149) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:183) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:153) org.springframework.xd.dirt.stream.deploymentmessagesender.senddeploymentrequests(deploymentmessagesender.java:57) org.springframework.xd.dirt.stream.abstractdeployer.senddeploymentrequests(abstractdeployer.java:163) org.springframework.xd.dirt.stream.abstractdeployer.basicdeploy(abstractdeployer.java:204) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.deploy(abstractinstancepersistingdeployer.java:78) org.springframework.xd.dirt.rest.xdcontroller.save(xdcontroller.java:229) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.web.method.support.invocablehandlermethod.invoke(invocablehandlermethod.java:214) org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:132) org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:104) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:748) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:689) org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:83) org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:945) org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:876) org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:931) org.springframework.web.servlet.frameworkservlet.dopost(frameworkservlet.java:833) javax.servlet.http.httpservlet.service(httpservlet.java:647) org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:807) javax.servlet.http.httpservlet.service(httpservlet.java:728) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:305) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.boot.actuate.trace.webrequesttracefilter.dofilter(webrequesttracefilter.java:114) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.boot.actuate.autoconfigure.endpointwebmvcautoconfiguration$1.dofilterinternal(endpointwebmvcautoconfiguration.java:126) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.web.filter.hiddenhttpmethodfilter.dofilterinternal(hiddenhttpmethodfilter.java:77) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.web.filter.httpputformcontentfilter.dofilterinternal(httpputformcontentfilter.java:88) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.boot.actuate.autoconfigure.metricfilterautoconfiguration$metricsfilter.dofilter(metricfilterautoconfiguration.java:97) org.springframework.boot.actuate.autoconfigure.metricfilterautoconfiguration$metricsfilter.dofilter(metricfilterautoconfiguration.java:82) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:222) org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:123) org.apache.catalina.authenticator.authenticatorbase.invoke(authenticatorbase.java:472) org.apache.catalina.valves.remoteipvalve.invoke(remoteipvalve.java:680) org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:171) org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:99) org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:118) org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:407) org.apache.coyote.http11.abstracthttp11processor.process(abstracthttp11processor.java:1004) org.apache.coyote.abstractprotocol$abstractconnectionhandler.process(abstractprotocol.java:589) org.apache.tomcat.util.net.nioendpoint$socketprocessor.run(nioendpoint.java:1680) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) caused by: org.springframework.beans.factory.cannotloadbeanclassexception: cannot find class [org.springframework.integration.x.http.nettyhttpinboundchanneladapter] for bean with name 'org.springframework.integration.x.http.nettyhttpinboundchanneladapter#0' defined in url [file:/users/philippe/springsource/spring-xd-1.0.0.m1/xd/modules/source/http.xml] nested exception is java.lang.classnotfoundexception: org.springframework.integration.x.http.nettyhttpinboundchanneladapter org.springframework.beans.factory.support.abstractbeanfactory.resolvebeanclass(abstractbeanfactory.java:1327) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.predictbeantype(abstractautowirecapablebeanfactory.java:594) org.springframework.beans.factory.support.abstractbeanfactory.isfactorybean(abstractbeanfactory.java:1396) org.springframework.beans.factory.support.abstractbeanfactory.isfactorybean(abstractbeanfactory.java:959) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:680) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.springapplication.refresh(springapplication.java:609) org.springframework.boot.springapplication.run(springapplication.java:321) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:181) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:264) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:254) org.springframework.xd.dirt.module.moduledeployer.handledeploy(moduledeployer.java:249) org.springframework.xd.dirt.module.moduledeployer.handlesinglemodulemessage(moduledeployer.java:227) org.springframework.xd.dirt.module.moduledeployer.handlemessageinternal(moduledeployer.java:154) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) ... 79 more caused by: java.lang.classnotfoundexception: org.springframework.integration.x.http.nettyhttpinboundchanneladapter org.springframework.boot.context.embedded.tomcat.tomcatembeddedwebappclassloader.loadclass(tomcatembeddedwebappclassloader.java:68) org.apache.catalina.loader.webappclassloader.loadclass(webappclassloader.java:1559) org.springframework.util.classutils.forname(classutils.java:238) org.springframework.beans.factory.support.abstractbeandefinition.resolvebeanclass(abstractbeandefinition.java:392) org.springframework.beans.factory.support.abstractbeanfactory.doresolvebeanclass(abstractbeanfactory.java:1348) org.springframework.beans.factory.support.abstractbeanfactory.resolvebeanclass(abstractbeanfactory.java:1319) ... 95 more i managed to create the exact same stream successfully after installing the release manually from the zip file and setting up xd_home and my path as documented so i guess it's a problem specific to the homebrew installation."""" and """"Add functionality to provision ec2 instance and mount ebs * the application should ** create a spring application context. ** should take a command line parameter --config that will point to a property file with key/value pairs specified below. by default the file xd-ec2.properties will be looked for on the classpath ** associate ebs shared volume for each machine instance * packaging ** use gradle application plugin to generate a ‘bin’ directory with a script to start the application. seehttp://www.gradle.org/docs/current/userguide/application_plugin.html ** the config file xd-ec2.properties should be in a directory (ideally a 'config' directory parallel to 'bin' and will be loaded by the application by default - loading via the cp is probably the easiest way. ** create a pojo to easily reference these properties vs. using a raw java properties object. how to verify it works * integration testing ** create junit based tests. jclouds itself has extensive testing can look at those for structure. ** verify what you created has been installed. ** verify ports are open instance information ** ebs of 50gb base for each instance. * report successful and failed instances. key-value pairs in configuration file properties may include: * cluster-name= a name describing the cluster you are creating * aws-access-keys= the access key assigned to you by admin * aws-secret-key= the secret key assigned to you by admin * private-key-file= the private key file assigned to you by admin. used for ssh-ing into * multi-node=true/false if true then installer will run the number of nodes as enumerated in the number-nodes property value. if false the installer will start a single node server * number-nodes=the number of nodes(containers) to deploy for this cluster. value is an integer > 0 * machine-size=the size of machines to be assigned for admin and nodes. small medium large * redis-port=6379 * rabbit-port=5279 * xd-dist-url=the url to download the xd to install. for example: http://blahblahblah.zip * ami = the ami image to use for your cluster. for example: ami-dfadsfdadf"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to have a simplified ux around parameters for gpdb so i don't have to escape each parameter. the scope is also to test the sqoop job with sqlserver and gpdb to identify the ux differences."""" is a not user story because it is most similar to: """"Remove xdcontainer and rename launcherapplication post-boot refactoring. xdcontainer lifecycle methods are not being used. refactor by merging relevant functionality into launcherapplication. rename launcherapplication to containerserverapplication (consistent with adminserverapplication)."""" and similar to """"Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains('group1') above example is random selection?"""" and similar to """"The new scsm twitterstream module should produce same json as old xd source the new scsm twitterstream module uses a different format than xd 1.x source module. it should match what twitter uses so existing processors etc. will continue to work."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Change http command to post data by putting 'http' as the main command option the current http command is of the form http://localhost:8080:>post httpsource --target http://localhost:9090 --data 10 it isn't intuitive to think 'post' rather the command can be http post --target http://localhost:9090 --data 10 which will allow us to have support for other http verbs and cleanly separate the namespace from 'hadoop' etc. the restshell from which this came was only concerned with http actions so the leading command classification probably seemed superfluous."""" is a not user story because it is most similar to: """"Jdbc sink is broken - looks like some config options got booted the jdbc sink is broken. simple """"time | jdbc"""" results in: org.springframework.jdbc.badsqlgrammarexception: preparedstatementcallback bad sql grammar [insert into test (payload) values(?)] nested exception is java.sql.sqlsyntaxerrorexception: user lacks privilege or object not found: test looks like some config options got clobbered during bootification."""" and similar to """"Xd shell should be configurable for accessing secure cluster there doesn't seem to be a way to configure the xd shell for accessing a kerberos secured cluster. tried this: >hadoop config props set --property hadoop.security.authorization=true >hadoop config props set --property hadoop.http.authentication.type=kerberos still getting: >hadoop fs ls /xd hadoop configuration changed re-initializing shell... ls: simple authentication is not enabled. available:[token kerberos]"""" and similar to """"Improve build file distribution tasks the current flow of gradle tasks is confusing. suggest the following changes to simplify the flow. 1. move the current task logic in zipxd to distzip 2. have distzip depend on dist 3. update the 'how to build docs' on the wiki 4. make sure that the distzip task only shows up once in the list of gradle target."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Consider usage of jackson afterburner see https://github.com/fasterxml/jackson-module-afterburner"""" is a not user story because it is most similar to: """"Remove spring-xd-codec from spring xd source tree and build replace with spring-cloud-streams (or spring-cloud-streams-codec) dependency"""" and similar to """"Shell - 'makeunique' job parameter is true by default currently the shell assumes that the 'makeunique'job parameter is by default *false*. that is not true. as a consequence the parameter has currently no impact/does not work."""" and similar to """"Add junit @rule so tests fail fast with clear messaging if redis not available"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Support for uuid suffix for hdfs file names in acceptance tests"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Trigger - add support for date-based one-time execution currently jobs can be either executed using cron expression or immediately at once. we should also support the one-time scheduling of jobs in the future. would this possibly require us to implement schedule-persistence? that could severely impact story-points."""" is a not user story because it is most similar to: """"Automate execution of gradle pushgenerateddocs should be part of the daily build. one """"easy"""" way to do it would be to use the """"hardcoded"""" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though"""" and similar to """"Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to bench test cases around {{tuplebuilder}} so i can identify the bottlenecks and tune for performance optimizations."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Make trigger options explicitly exclusive see problem reported at http://stackoverflow.com/questions/27368351/spring-xd-module-sourcetrigger-does-not-work-as-expected"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_. and similar to """"As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally."""" and similar to """"As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Investigate missing boot's actuator endpoints in xd currently few of the boot's actuator endpoints go missing in the endpointhandler mapping. they are: beansendpoint dumpendpoint traceendpoint healthendpoint infoendpoint. also the endpointhandler mapping doesn't even happen in case of launcherapplication. i think this is because the launcherapplication context starts with port '0' and the tomcatembeddedservletcontainer sets the local port for it later. with port '0' the endpointhandler mapping is disabled during the endpointhandler mapping bean creation."""" is a not user story because it is most similar to: """"Documentation for reactor-ip source has conflicting information according to the documentation at: http://docs.spring.io/spring-xd/docs/current/reference/html/#reactor-ip one of the options available for this source is {{transport}}. it's listed as having no default but the sample definition doesn't provide it yet appears to default to {{tcp}}. the two should match up. it might also be useful if the possible values for {{transport}} were listed (i assume {{tcp}} and {{udp}})"""" and similar to """"The ability to route within streams a flow or a processor component may require routing semantics. currently the stream assumes a single input and output for each module. a flow may support multiple outputs - switch routing that is - recipient list is not currently supported (another subtask?). we need to support semantics like: a |[output.foo:coutput.bar:ddefault:e]"""" and similar to """"Make the parser aware of message conversion configuration enhance the stream parser to take message conversion into account in order to validate or automatically configure converters. for example: {noformat:nopanel=true} source --outputtype=my.foo | sink --inputtype=some.other.bar is likely invalid since xd doesn't know how to convert foo->bar. {noformat}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Improve job launch functionality with distributed nodes when sending a launch request the message is not targeted to the container node that hosts the deployed job. with rabbitmq the message is not ack'd so it will get picked up eventually by the container that hosts the deployed job. this should change to a targeted message. ----- original description from thomas below tried deploying some batch jobs and they all seem to fail when running admin and one container using redis as transport xd:>job create mongojob --definition """"hdfsmongodb --resources=/data/*.log --names=col1col2col3 --idfield=col1 --collectionname=test"""" fails with this: {quote} 18:19:01612 warn redisinboundadapter-redis:queue-inbound-channel-adapter6 boot.springapplication:635 - error handling failed (error creating bean with name 'integrationrequestmappinghandlermapping': initialization of bean failed nested exception is java.lang.illegalstateexception: org.springframework.context.annotation.annotationconfigapplicationcontext@25e7506f has not been refreshed yet) 18:19:01614 error redisinboundadapter-redis:queue-inbound-channel-adapter6 handler.logginghandler:145 - org.springframework.messaging.messagehandlingexception: error occurred in message handler [moduledeployer] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:84) org.springframework.integration.config.serviceactivatorfactorybean$1.handlerequestmessage(serviceactivatorfactorybean.java:83) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:170) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:128) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:92) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:98) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.popmessageandsend(redisqueuemessagedrivenendpoint.java:211) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.access$300(redisqueuemessagedrivenendpoint.java:50) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint$listenertask.run(redisqueuemessagedrivenendpoint.java:290) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) java.lang.thread.run(thread.java:724) caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name 'readresourcesstep': cannot create inner bean '(inner bean)' of type [org.springframework.batch.core.listener.steplistenerfactorybean] while setting bean property 'listeners' with key [0] nested exception is org.springframework.beans.factory.beancreationexception: error creating bean with name '(inner bean)#4': factorybean threw exception on object creation nested exception is java.lang.illegalargumentexception: interface org.springframework.batch.core.steplistener is not visible from class loader org.springframework.beans.factory.support.beandefinitionvalueresolver.resolveinnerbean(beandefinitionvalueresolver.java:282) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:126) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvemanagedlist(beandefinitionvalueresolver.java:351) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:154) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.applypropertyvalues(abstractautowirecapablebeanfactory.java:1456) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.populatebean(abstractautowirecapablebeanfactory.java:1197) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:537) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:475) org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:304) org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:228) org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:300) org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:195) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:681) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.springapplication.refresh(springapplication.java:616) org.springframework.boot.springapplication.run(springapplication.java:306) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:225) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:270) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:260) org.springframework.xd.dirt.module.moduledeployer.handledeploy(moduledeployer.java:201) org.springframework.xd.dirt.module.moduledeployer.handlemessageinternal(moduledeployer.java:172) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ... 18 more caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name '(inner bean)#4': factorybean threw exception on object creation nested exception is java.lang.illegalargumentexception: interface org.springframework.batch.core.steplistener is not visible from class loader org.springframework.beans.factory.support.factorybeanregistrysupport.dogetobjectfromfactorybean(factorybeanregistrysupport.java:151) org.springframework.beans.factory.support.factorybeanregistrysupport.getobjectfromfactorybean(factorybeanregistrysupport.java:110) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolveinnerbean(beandefinitionvalueresolver.java:272) ... 41 more caused by: java.lang.illegalargumentexception: interface org.springframework.batch.core.steplistener is not visible from class loader java.lang.reflect.proxy.getproxyclass0(proxy.java:487) java.lang.reflect.proxy.newproxyinstance(proxy.java:722) org.springframework.aop.framework.jdkdynamicaopproxy.getproxy(jdkdynamicaopproxy.java:121) org.springframework.aop.framework.jdkdynamicaopproxy.getproxy(jdkdynamicaopproxy.java:111) org.springframework.aop.framework.proxyfactory.getproxy(proxyfactory.java:98) org.springframework.batch.core.listener.abstractlistenerfactorybean.getobject(abstractlistenerfactorybean.java:163) org.springframework.beans.factory.support.factorybeanregistrysupport.dogetobjectfromfactorybean(factorybeanregistrysupport.java:144) ... 43 more {quote} i'll post more errors as i collect them"""" and """"Xd does not reconnect to jobstore if connection is lost leaving jobs in inconsistent state. xd deployment description xd cluster (1 container) environment ec2 type of test shell command line test failed on hdfs (only test that was run) build used built may 7 10:29 pst [overall issue] xd admin and container lost connectivity to the the jobstore (mysql on rds) and did not reconnect. exception displayed in log. caused by: com.mysql.jdbc.exceptions.jdbc4.communicationsexception: the last packet successfully received from the server was 54321927 milliseconds ago. the last packet sent successfully to the server was 54321928 milliseconds ago. is longer than the server configured value of 'wait_timeout'. you should consider either expiring and/or testing connection validity before use in your application increasing the server configured values for client timeouts or using the connector/j connection property 'autoreconnect=true' to avoid this problem. sun.reflect.nativeconstructoraccessorimpl.newinstance0(native method) sun.reflect.nativeconstructoraccessorimpl.newinstance(nativeconstructoraccessorimpl.java:57) sun.reflect.delegatingconstructoraccessorimpl.newinstance(delegatingconstructoraccessorimpl.java:45) java.lang.reflect.constructor.newinstance(constructor.java:526) com.mysql.jdbc.util.handlenewinstance(util.java:411) com.mysql.jdbc.sqlerror.createcommunicationsexception(sqlerror.java:1117) com.mysql.jdbc.mysqlio.send(mysqlio.java:3871) com.mysql.jdbc.mysqlio.sendcommand(mysqlio.java:2484) com.mysql.jdbc.mysqlio.sqlquerydirect(mysqlio.java:2664) com.mysql.jdbc.connectionimpl.execsql(connectionimpl.java:2788) com.mysql.jdbc.connectionimpl.execsql(connectionimpl.java:2738) com.mysql.jdbc.statementimpl.executequery(statementimpl.java:1617) org.springframework.jdbc.core.jdbctemplate$1querystatementcallback.doinstatement(jdbctemplate.java:452) org.springframework.jdbc.core.jdbctemplate.execute(jdbctemplate.java:402) ... 57 more [side effects] [unable to create new job with same name] user executed a job list and then removed the jobs in the list. when the user tried to create new jobs using the same names the application reported: """"command failed org.springframework.xd.rest.client.impl.springxdexception: statementcallback sql [select job_name from job_registry_names] no operations allowed after connection closed. nested exception is com.mysql.jdbc.exceptions.jdbc4.mysqlnontransientconnectionexception: no operations allowed after connection closed."""" the only way to resolve it completely was to: 1) shutdown the admin and the containers. 2) clear the jobs from the batch job tables by hand 3) restart xd admin and containers."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd user i'd like to use diego based receptor implementation of xd admin spi (based on modulelauncher) so i can run data pipeline use-cases running on cf lattice/diego."""" is a user story, and is worth 8 story points because it is most similar to: As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd. and similar to """"As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_."""" and similar to """"As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to create a example to demonstrate jdbc to hdfs data movement."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a ‘throughput-sampler’ module for benchmarking a module that could be used in a stream definition such as reactor --bind tcp://0.0.0.0:3000/length?codec=bytes | do-stuff | throughput-sampler where throughput-sampler could start measurements once a key 'start' is found in a message and stop when the key 'stop' is found in a message listing the number of msgs/sec etc."""" is a not user story because it is most similar to: """"Add property maxmessagesperpoll to all polled sources polled message sources return only one message per poll by default. when polling say a file directory with many files files will be emitted once per {{fixeddelay}}. as a user i need to configure a limit for the number of messages that will be emitted per poll."""" and similar to """"Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice"""" and similar to """"Show stream / tap relationship in admin ui it would be nice if the admin ui would sort the streams in such a way that the taps that are created for a particular stream are somehow placed under the tapped stream... {code} stream a ... +-tap a.foo ... +-tap a.bar ... {code} same goes for the list command in the xd-shell"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Spark streaming integration with kafka message does not respect offsetstoretopic config option the property """"xd.messagebus.kafka.offsetstoretopic"""" was added to kafka message bus which is not updated to spark streaming message bus properties that will be transferred to spark cluster for streaming module deployment. we also need a better approach to re-use the message bus properties so that we don't have to update the properties in connection property names."""" is a not user story because it is most similar to: """"Refactor tests with filesink|filesource to use eventually() matcher some tests (esp. moduleclasspathtests.testmodulewithclasspathafterserverstarted) seem to fail because of a race condition. add a hamcrest matcher that knows how to read the content of a filesink|source and refactor those to read like e.g. assertthat(filesink eventually(hascontent(""""foo)))"""" and similar to """"Support for composed streams some recent changes caused this to be turned off. basically the change was to police whether a stream is well formed at create time rather than deploy time. by deferring that check we can create composed streams that are not deployable by themselves but that are when used as building blocks in proper streams."""" and similar to """"Incorrect message bus is used at runtime for some reason the message bus is bound to incorrect transport (different from what is set as xd_transport) at runtime. this is from the container log: 2015-04-21 13:42:12331 1.2.0.snap info main util.xdconfiglogginginitializer - transport: rabbit ... 2015-04-21 13:42:35144 1.2.0.snap info redismessagelistenercontainer-4 sink.a2 - test"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create rest api for stopping all job executions adopted functionality from spring batch admin should include springmvc test framework style tests. delete /batch/jobs/executions/ - stop all job executions"""" is a user story, and is worth 2 story points because it is most similar to: As a user i'd like to have the flexibility to configure db creds so that i can use a db of choice for batch job repository (metadata persistence). the scope of this task is to have the configuration specifics documented in the wiki. and similar to """"As a s-c-d developer i'd like to add support for dependency resolution so when two or more modules use different version of jars (ex: direct binding of two modules that include different versions of spring data) i have the capability to resolve and include the right bits at runtime."""" and similar to """"As a s-c-d developer i'd like to make the deployer work asynchronously so i can use the shell to return quickly and also queue deploy operations within yarn as tasks."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Intermittent tcpmodulestests.testtcpsink test failure {noformat} org.junit.comparisonfailure: org.junit.comparisonfailure: expected:<[hi there! ]> but was:<[]> org.junit.comparisonfailure: expected:<[hi there! ]> but was:<[]> org.junit.assert.assertequals(assert.java:115) org.junit.assert.assertequals(assert.java:144) org.springframework.xd.shell.command.tcpmodulestests.testtcpsink(tcpmodulestests.java:63) sun.reflect.nativemethodaccessorimpl.invoke0(native method) (60 more lines...) {noformat} https://build.spring.io/browse/xd-jdk8-job1-1162/test"""" and """"The ability to route within streams a flow or a processor component may require routing semantics. currently the stream assumes a single input and output for each module. a flow may support multiple outputs - switch routing that is - recipient list is not currently supported (another subtask?). we need to support semantics like: a |[output.foo:coutput.bar:ddefault:e]"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"File sink filename should default to having a '.out' suffix."""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Document mongodb source"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Support for @configuration based module definitions"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Spark streaming plugin shouldn't need tap listener cache since spark streaming doesn't use zk to keep track taps being created we don't need the tap listener cache setup at the container startup."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a s-c-d developer i'd like to add support for having different binder types for module's channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively."""" and similar to """"As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a spring xd user i'd like to make spi implementation profile aware so i can run {{java -jar admin}} or {{cf push}} admin or {{ltc create admin}} and the corresponding implementation gets wired-in automatically."""" is a not user story because it is most similar to: """"Pluralization of admin nodes leadership selector group path (/xd/admin) currently the admin nodes that participate in the leadership election are grouped under /xd/admin. since there are multiple lock nodes that correspond to all the admin servers that participate in leadership election we can pluralize this node name to /xd/admins."""" and similar to """"Shell: http post - allow posting of local file contents e.g. allow for posting of json data stored in local files. * allow users to specify the *content-type*. * ensure that unicode data (utf) posts correctly."""" and similar to """"Move [back] button to top right the [back] button is at lower left of the page which requires scrolling all the way to the bottom - could we move it to top right? would make clicking back and forth for job executions much easier."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Acceptance tests updated to be able to test xd yarn deployment in order to run acceptance tests in their current state there had to be * changes to the code ** set the location of the data node for the hdfs tests. (because the data nodes were no located with the master.) ** disable the copying of batch basic because we did not know the container location. * had to configure tests by hand so that we could identify the: ** admin port (with new features we should be able to write code to find it. should be able to set it but we had a problem. possible yarn bug) ** jmx port ( we could set it for the master but not the container this was a yarn deploybug ) ** where the build was deployed on the container node so we could copy the batch-basic test."""" is a not user story because it is most similar to: """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" and similar to """"Jmx shouldn't register taps or streams if the creation fails there's a lifecycle problem when a tap creation fails (e.g. because the dsl syntax is wrong). subsequent attempts to create the tap will fail with an error: [{""""links"""":[]""""logref"""":""""messagehandlingexception""""""""message"""":""""org.springframework.context.applicationcontextexception: failed to start bean 'org.springframework.integration.monitor.integrationmbeanexporter#0#92e27d20-4c48-4131-866c-91b6cb642ca2' nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=nullchannel sends=0 receives=0]] with key 'xd.tap1:type=messagechannelname=nullchannelindex=1module=log' nested exception is javax.management.instancealreadyexistsexception: xd.tap1:type=messagechannelname=nullchannelindex=1module=log""""}] disabling jmx solves the issue. reproduce create a bad stream definition name 'bad' try to recreate with the same name but correct stream definitions. the system will report that the stream already exists."""" and similar to """"Allow mixins of moduleoptionsmetadata a lot of modules have similar options. moreover job modules often have options that belong to at least two domains (eg jdbc + hdfs). i think that by using flattenedcompositemoduleoptionsmetadata we could come up with a way to combine several options pojos into one. something like: public class jdbchdfsoptionsmetadata { @optionsmixin private jdbcoptionsmetadata jdbc @optionsmixin private hdfsoptionsmetadata hdfs } this would expose eg """"driverclass"""" as well as """"rolloversize"""" as top level options. values could be actually injected into the fields so that eg custom validation could occur (default validation for the mixin class would occur by default)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Set bean name in consumerendpointfactorybean {{localmessagebus}} and {{compositemodule}}."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i would like the ability to undeploy or suspend a module without losing the deployment properties. currently when temporarily suspending a module an undeploy and redeploy is executed. during the redeploy the deployment properties need to be added again. instead it would be nice if the properties are persisted so they automatically included with the deployment."""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to have concurrency and compression support for kafka so that i can increase performance throughput and/or increase responsiveness *things to consider:* * make global configuration options be """"defaults"""" and allow per-deployment overrides * add options for ** concurrency ** compression support and similar to """"As a developer i'd like to remove _id_ and _timestamp_ attributes from the {{tuple}} class so i can improve performance characteristics by not having them go through _serde_ instead we could leverage message headers to collect such information."""" and similar to """"As a user i'd like to have the option to extend compression support so that i can override the defaults and customize as needed. follow-up from this pr: https://github.com/spring-projects/spring-xd/pull/1346"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Make batch job restarts work using single node see also xd-1320."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Enabling security breaks job launching from admin ui after enabling security (see xd-3214) and granting user {{role_view role_create role_admin}} privileges it's not possible to launch jobs from admin ui. for {{bdl-sqoop-combo-lukasz-mongo-dev}} job 403 error is returned when admin ui attempts to access following url after """"launch job"""" button is pressed: {code} http://ilabphd12.isus.emc.com:9393/jobs/executions?jobparameters=%7b%7d&jobname=bdl-sqoop-combo-lukasz-mongo-dev {code} please see attached screenshot."""" is a not user story because it is most similar to: """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"When there are no wiretap listeners don't publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be """"serialized + transported + deserialized"""" to other members even if there is no one listening. this """"serialized + transported + deserialized"""" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted."""" and similar to """"Create design document for implementation strategy to support message conversion in channelregistry the conversion should be based on content-type headers similar to the way spring's httpmessageconverters work (with mime types). also the map of available converters should be extensible while including the most common defaults (for json xml etc). we most likely want to add a few of our own content types also (e.g. for tuples). most likely this logic and the configuration methods for extending the converter map belong in abstractchannelregistry since it should be common across all implementations (i.e. the logic should be the same regardless of the transport used after-serialization/before-deserialization)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Filedeletionlistener resolves resources once in the {{filejdbc}} job there is the option to delete the imported files. this functionality is created using a listener called the {{filedeletionstepexecutionlistener}}. when you run the job the first time with the {{--deletefiles=true}} everything works as expected. the second time you run the job the files are not deleted. i believe the issue here is that since the {{filedeletionstepexecutionlistener}} is a singleton the resources are resolved only once (the first time the job runs) and so it works the first time but if the job is run again later and new files match the expression they are not picked up. i believe the fix is to make the {{filedeletionstepexecutionlistener}} used in this job step scoped."""" is a not user story because it is most similar to: """"Graphlab - enhance machine learning and computations we would like to experiment with “graphlab” a graph based high performance distributed computation framework written in c++. features: * hdfs integration * maching learning toolkits website -> http://graphlab.org/projects/index.html github -> https://github.com/graphlab-code/graphlab _note: could be part of unified offering of phd_"""" and similar to """"Html doco has font issues for [source] it seems the html rendering of documentation is using a variable width font for some of the code (esp. [sourcesh] apparently) rendering. weird thing though is that when mouse hovering over some of them they went back to fixed width. see screenshot. http://static.springsource.org/spring-xd/docs/current-snapshot/reference/html/#_start_the_runtime_and_the_xd_shell"""" and similar to """"Investigate missing stepexecutions in jobrepository.getlastjobexecution() when the job is run with its jobparameters by simplejoblauncher its lastjobexecution's stepexecutions are checked for unknown status to throw jobrestartexception. it looks like the stepexecutions for the lastjobexecution are never set and the collection 'stepexecutions' is not fetched from job repository. hence not sure if the following condition in simplejoblauncher's run(final job job final jobparameters jobparameters) would ever get executed: for (stepexecution execution : lastexecution.getstepexecutions()) { if (execution.getstatus() == batchstatus.unknown) { //throw throw new jobrestartexception(""""step ["""" + execution.getstepname() + """"] is of status unknown"""") }//end if }//end for"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Composing modules ignores output/input type specified in definition when composing two or more modules together if any output or input type is specified between modules it is ignored. i created a stream with definition: {code} mysourcemodule --outputtype=application/json | myprocessormodule {code} that worked fine as expected. when i composed this definition as a composed module i got errors stating that the processors message handler had no handler method for the object the source module emitted. the process was only configured to accept json as string. i simply had to create a second handler method but if i didnt own the module this could be an issue."""" is a not user story because it is most similar to: """"Add information that is updated in real-time for use in container matching information related to an xd-container process and/or machine that is not static such as 'group' e.g. free memory number of deployed streams should be available for use as variables in the evaluation context of the criteria spel expression in the admin's container matcher. a good candidate for the source of this information are system mbeans. see http://docs.oracle.com/javase/7/docs/api/java/lang/management/package-summary.html"""" and similar to """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"When there are no wiretap listeners don't publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be """"serialized + transported + deserialized"""" to other members even if there is no one listening. this """"serialized + transported + deserialized"""" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade to spring 4.0.2.release"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove usage of <context:property-placeholder location=.../> in module defitions this doesn't follow the conventions we have with other modules and it also means it isn't easy to override via environment variables etc. this is in hdfs and some others."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime. and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" and similar to """"As a developer i'd like to have a central place to manage external properties for applications across all the environments so i can provide server and client-side support for externalized configuration for xd-admin and xd-container servers."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Npe in containerredeploymenttests running the distributed tests ({{-drun_distributed_tests=true}}) against d109a3a and got the following: {noformat} java.lang.nullpointerexception org.springframework.xd.dirt.module.store.zookeepermodulemetadatarepository.updatedeploymentstatus(zookeepermodulemetadatarepository.java:209) org.springframework.xd.dirt.module.store.zookeepermodulemetadatarepository.findallbycontainerid(zookeepermodulemetadatarepository.java:313) org.springframework.xd.dirt.container.store.zookeepercontainerrepository.findallruntimecontainers(zookeepercontainerrepository.java:339) org.springframework.xd.dirt.rest.containerscontroller.list(containerscontroller.java:97) sun.reflect.generatedmethodaccessor100.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:483) org.springframework.web.method.support.invocablehandlermethod.invoke(invocablehandlermethod.java:215) org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:132) org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:104) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:749) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:689) org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:83) org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:938) org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:870) org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:961) org.springframework.web.servlet.frameworkservlet.doget(frameworkservlet.java:852) javax.servlet.http.httpservlet.service(httpservlet.java:620) org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:837) javax.servlet.http.httpservlet.service(httpservlet.java:727) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java: {noformat}"""" and """"Enforce consistent naming across cli options and command/template/operations method names e.g. see comment on pr #390: https://github.com/spring-projects/spring-xd/pull/390/files#r7563787 in that case it's """"delete"""" in one place and """"destroy"""" in another. there are other cases as well."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Module delete command should only provide completions with composed modules there is no point in providing completion with something that will fail when the user tries it. the information about a module being a composed is now available at the rest layer so should be used"""" is a not user story because it is most similar to: """"Update sources section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#http"""" and similar to """"Create pojo based filesink module metadata this is so that we can have an enum that can show the possible values and autocomplete. using just the xml the user has a greater chance to enter an invalid mode."""" and similar to """"Avoid use of module name twice in location when using a custom modules see https://github.com/springsource/spring-xd/pull/240#discussion_r6045724"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Accessing xd-admin urls in the browser return xml and not json here is an example: the following request for streams: http://ec2-23-20-25-30.compute-1.amazonaws.com:9393/streams returns: this xml file does not appear to have any style information associated with it. the document tree is shown below. <errors xmlns:atom=""""http://www.w3.org/2005/atom""""> <error logref=""""httpmessagenotwritableexception""""> <message> could not marshal [pagedresource { content: [links: [<http://ec2-23-20-25-30.compute-1.amazonaws.com:9393/streams/ticktock>rel=""""self""""]] metadata: metadata { number: 0 total pages: 1 total elements: 1 size: 20 } links: [] }]: null nested exception is javax.xml.bind.marshalexception - with linked exception: [com.sun.istack.saxexception2: unable to marshal type """"org.springframework.xd.rest.client.domain.streamdefinitionresource"""" as an element because it is not known to this context.] </message> </error> </errors>"""" is a not user story because it is most similar to: """"Bind producer before consumer {quote} here is the full exception: org.springframework.messaging.messagedeliveryexception: dispatcher has no subscribers for channel 'resourceconfiguredmodule [name=filter type=processor group=request-rate index=0 @58b0f318]:use-expressiondefaultadminsinglenodehsqldbserver:9393.output'. nested exception is org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers and here is that stream: topic:httpstartstop > filter --expression=payload.gethttpstartstop().getpeertype().name().equals('client') | requestrateaggregator | appmetricssplitter | router --expression='topic:app-request-rate-'+#jsonpath(payload'$.appid') [2:59 pm] gary russell: @markfisher @ilayaperumalgopinathan @patrickperalta this looks like another (not fixed by the previous fix) timing problem with taps when using singlenode. the tap is started before the tap stream is deployed. but it's not clear to me how the filter module could be deployed/bound as a consumer before the requestrateaggregator [3:08 pm] gary russell: i see the problem: abstractmessagebusbinderplugin.bindconsumerandproducers() binds the consumer before the producer - this is the wrong order for a passive component such as the filter. /cc @davidturanski {quote}"""" and similar to """"Installer needs to launch a single node xd instance * create a deployer class has methods ** runninginstance deploysinglenode *** takes into account machine size as specified in properties file ** void destroyallinstances() *** or whatever jclouds returns from the destroy call ** ctor gets passed in the root boostrapping credentials. * install script steps ** setup xd_home variable ** make sure privileges are set to ubuntu not root. ** start up redis and rabbit using ports as specified in xd-ec2.properties ** use port watch to make sure they started ** start singlenode after configuration. ** display hostname of singlenode server ** report successful and failed startup ** hit root of xd-admin to see if there is a response on 9393 * integration testing ** verify that config files have been setup ** verify xd has been started ** verify xd can process a basic http post"""" and similar to """"Filejdbc job throws exception during acceptance tests currently the testfilejdbcjobmultipleinvocations fails on line 156 stating data is different in table that what is expected. currently this is failing on the single admin/container deployment using redis as a transport. also seeing the following exception in the attached log: {noformat} 2.0.0.snap error xdbus.job:ec2job3.0.requests-1 step.abstractstep - encountered an error executing step step1 in job ec2job3 org.springframework.batch.item.itemstreamexception: failed to initialize the reader ... caused by: java.lang.illegalstateexception: input resource must exist (reader is in 'strict' mode): url [file:/tmp/xd/output/filejdbctest/filejdbctest1.out] {noformat} the file is should be present and data present for the test. at least according to the checker on ec2 and local deployments."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create a shell command processor and sink create processor and sink modules that can execute a shell command using stdin and stdout to stream data."""" is a user story, and is worth 8 story points because it is most similar to: As a pm i'd like to have the smart grid demo (from s1-2014) ported into spring xd samples repo. and similar to """"As a developer i'd like to build _spark_ batch job sample so that we can demonstrate some of the distributed data computation capabilities."""" and similar to """"As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Rename create to 'save' in resourcedeployer to be consistent with spring data repository method names."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"File source - provide option to pass on file object this story may need to be broken into several stories particularly for batch scenarios one may not want to run a """"file-to-string-transformer"""" on the payload file in the file source but rather handle/pass the file reference itself (local san etc.) - e.g. in case somebody drops a 2gb or in scenarios where one wants to push those large files into hdfs and run hadoop jobs on the data. this is important for batch jobs as they need to access the file itself for the reader. we need to *keep in mind the various transports we support*. not sure how kryo handles file serialization. i would think we only need the file meta data to be persisted not the file-data itself (make that configurable??)."""" and """"Nonodeexception after bouncing admin server steps to reproduce: h6. 1. clear out zk {code} [zk: localhost:2181(connected) 0] rmr /xd {code} h6. 2. start admin h6. 3. deploy stream {code} xd:>stream create --name tt --definition """"time|log"""" --deploy {code} admin log: {code} 16:38:10537 info deployer server.streamdeploymentlistener - deploying stream stream{name='tt'} 16:38:10545 warn deployer server.streamdeploymentlistener - no containers available for deployment of module 'log' for stream 'tt' 16:38:10547 warn deployer server.streamdeploymentlistener - no containers available for deployment of module 'time' for stream 'tt' 16:38:10547 info deployer server.streamdeploymentlistener - deployment status for stream 'tt': deploymentstatus{state=failed} 16:38:10550 info deployer server.streamdeploymentlistener - stream stream{name='tt'} deployment attempt complete {code} h6. 4. shut down and restart admin. the following is logged: {code} org.apache.zookeeper.keeperexception$nonodeexception: keepererrorcode = nonode for /xd/deployments/streams/tt/modules org.apache.zookeeper.keeperexception.create(keeperexception.java:111) org.apache.zookeeper.keeperexception.create(keeperexception.java:51) org.apache.zookeeper.zookeeper.getchildren(zookeeper.java:1590) org.apache.curator.framework.imps.getchildrenbuilderimpl$3.call(getchildrenbuilderimpl.java:214) org.apache.curator.framework.imps.getchildrenbuilderimpl$3.call(getchildrenbuilderimpl.java:203) org.apache.curator.retryloop.callwithretry(retryloop.java:107) org.apache.curator.framework.imps.getchildrenbuilderimpl.pathinforeground(getchildrenbuilderimpl.java:199) org.apache.curator.framework.imps.getchildrenbuilderimpl.forpath(getchildrenbuilderimpl.java:191) org.apache.curator.framework.imps.getchildrenbuilderimpl.forpath(getchildrenbuilderimpl.java:38) org.springframework.xd.dirt.server.streamdeploymentlistener.recalculatestreamstates(streamdeploymentlistener.java:207) org.springframework.xd.dirt.server.deploymentsupervisor$leaderlistener.takeleadership(deploymentsupervisor.java:352) org.apache.curator.framework.recipes.leader.leaderselector$wrappedlistener.takeleadership(leaderselector.java:536) org.apache.curator.framework.recipes.leader.leaderselector.dowork(leaderselector.java:398) org.apache.curator.framework.recipes.leader.leaderselector.doworkloop(leaderselector.java:443) org.apache.curator.framework.recipes.leader.leaderselector.access$100(leaderselector.java:63) org.apache.curator.framework.recipes.leader.leaderselector$2.call(leaderselector.java:244) org.apache.curator.framework.recipes.leader.leaderselector$2.call(leaderselector.java:238) java.util.concurrent.futuretask.run(futuretask.java:266) java.util.concurrent.executors$runnableadapter.call(executors.java:511) java.util.concurrent.futuretask.run(futuretask.java:266) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java.lang.thread.run(thread.java:744) {code}"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add real modulerunner application the current modulerunner is test app used for validation. this should be replaced by a real app."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences. and similar to """"As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to refer to documentation in wiki so that i can setup and configure spark as a batch job as recommended."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Kafka tests shouldn't assume offset 0 in `org.springframework.xd.dirt.stream.kafkasinglenodestreamdeploymentintegrationtests#verifyondemandqueues` when testing the queue partitions for content the read is assumed to start at offset 0. this is incorrect because the topics may exist already especially in a ci environment"""" is a not user story because it is most similar to: """"The use of labelled modules and taps needs more explanation https://github.com/spring-projects/spring-xd/wiki/taps mentions this but the explanation needs more elaboration and example e.g. mystream -> """"http | flibble: transform --expression=payload.touppercase() | file"""" """"tap:stream:mystream.flibble > transform --expression=payload.replaceall('a''.') | log"""")"""" and similar to """"Add aliases concept to module options and use in composed modules following merge of https://github.com/spring-projects/spring-xd/pull/601 allow a module option to be known by several names and elect a short name in composed module options when there is no ambiguity"""" and similar to """"Replace usage of 'raw' curl with shell command to post http data in documentation e.g. http://localhost:8080:>post httpsource --target http://localhost:9090 --data 10 i believe this will also help to avoid ugly syntax to escaping quotes for json as in the gemfire example."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Http does not report failure to bind to port stumbled upon this while having hadoop daemons running but simple way to repoduce: {noformat} nc -lp 9000 stream create foo --definition """"http | log"""" --deploy ==> all seems ok http post --data hello ==> error 500 rightfully so {noformat}"""" is a not user story because it is most similar to: """"Update twittersearchtest to handle the latest release of twittersearch the changes to twittersearch means that it will send multiple messages during the duration of the test. to support these changes: 1) remove assertreceived. since the number of messages is indeterminate 2) change file sink that captures the results to append mode. because each message will overwrite the previous messages result."""" and similar to """"Investigate intermittent failure of redisstreamdefinitionrepositorytests the test for findall often fails for me when running inside gradle. (could not reproduce inside eclipse) i already tried fixing it by using a different redis key space but to no avail. one explanation would be if gradle runs tests concurrently but my understanding is that it does not."""" and similar to """"Resolve classloading issues for custom hadoop based batch jobs there are several issues making it hard to impossible to create batch jobs that use pig hive hbase or other technologies supported by spring for apache hadoop project. we need to make the corresponding dependencies available on the hadoop classpath."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Ui: implement job deploy/undeploy from the job definitions page from xd-1023 the job status(deployed/undeployed) is available from jobinstance repository and a job can be deployed/undeployed correctly. implement job deploy/undeploy for a given job from jobdefinitions page and indicate status of the job definition (deployed/undeployed)."""" is a not user story because it is most similar to: """"Make deploy=false as the default when creating a new job the automatic deployment of the job makes it harder to understand the lifecycle of the job and also does not allow for the opportunity to define any additional deployment metadata for how that job runs e.g is it partitioned etc."""" and similar to """"Add accepted type logic to module a module can declare one ore more payload types it will accept. this will inform the runtime re. automatic payload conversion. this can be done in the module xml configuration and processed by streamplugin"""" and similar to """"Remove unavailable jobs if a job is deployed an the singlenode job is canceled the job name cannot neither be reused nor destroyed. see screenshots."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update sink's hdfs section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#hdfs"""" is a not user story because it is most similar to: """"Create multi-container single host testing framework use external jvm launch support provided by the oracle tools framework (https://java.net/projects/oracletools)."""" and similar to """"Update sink's gemfire section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#gemfire"""" and similar to """"Make rabbitmessagebus rabbitmq config properties optional when the bus is used outside of the xd container (e.g. spring-bus) the inheritance from spring boot configuration is broken (no application.yml or servers.yml on the cp). make the bus properties optional (add """":"""")"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add create() and deploy() methods to streamdeployer see https://docs.google.com/a/gopivotal.com/drawings/d/1kcnbvsprbjgc10itf9cskwst8wgcjgg3wgzfkqlcazu/edit refactor current defaultstreamdeployer"""" is a not user story because it is most similar to: """"Adapt springone 2012 ui code from keynote demo of election results to use xd existing code: https://github.com/ghillert/springone2012"""" and similar to """"Add server runtime info to banner standalone admin currently has no shiny banner as container has. more importantly it does not say which port it's listening on the transport used etc."""" and similar to """"Design and budget perf env for xd on rackspace provide design for how we are going to run xd and kafka on rackspace. this includes the base design for the kafka perf tests environment. this will be used to provide a budget for the cloud resources for the performance environment."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Jline 1 is brought up (and shows in ide) through zk/curator we don't want jline1 anymore. this shows in ide only (either run shell integration tests or run the shell as gunnar mentioned)"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add list command for aggregatecounter"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Introduce cache to zookeepercontainerrepository add cache implementation for zookeepercontainerrepository"""" is a not user story because it is most similar to: """"Gemfire sink to update a gemfire cache. update a gemfire region."""" and similar to """"Add kafka-based implementation for abstractdistributedtransportsinglenodestreamdeploymentintegrationtests"""" and similar to """"Add authentication support to the mongo sink"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add counter module"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create integration test script for jms & mqtt create a script to sanity check jms and mqtt"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" and similar to """"As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Force and validate information on ootb modules in line with the checks we do for options documentation. currently made more complicated than it should because of rogue folders (such as scripts/ and analytics-pmml/ in the registry)"""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to """"As a s-c-d developer i'd like to add support for having different binder types for module's channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Spike: determine options for configuring shared module dependencies h2. narrative as a developer i'd like to be able to configure common dependencies for the entire environment. an example could be that i use mysql for my databases. i want to be able to configure the mysql driver once and have all modules use it. h2. back story spring batch uses a database to store job state (the job repository). this is a shared resource across all jobs (both custom developed and ootb). in order to support ootb jobs we'll need to have a way for users to provide the db driver to each module. ideally this would be possible without requiring that each of our ootb modules be repackaged."""" is a not user story because it is most similar to: """"Partition jobs (jdbchdfs) are running in sequence the jdbchdfs jobs that are partitioned are running in sequence rather than in parallel. our expectation with partition jobs is that they run in parallel. job configuration is: jdbchdfs --driverclassname='oracle.jdbc.oracledriver' --url='jdbc:oracle:thin:@=**********' --username='=**********' --password=********** --validationquery='select current_timestamp from dual' --tablename='hz_organization_profiles' --columns='organization_profile_id ... version_number' --partitions=10 --partitioncolumn='organization_profile_id' --directory='/ingest/source/oracle11i/ar/hz_organization_profiles' --filename=hz_organization_profiles --fileextension=csv --delimiter=| --commitinterval=10000 --rollover=262144000 --dateformat=yyyy-mmm-dd --partitionresultstimeout=1800000 --testonborrow=false"""" and similar to """"Allow easy integration with other types of message transports - remove enums for transport layers if a third party messaging solution wants to be the transport layer in springxd they must currently fork the springxd code base and change the enums. example: commondistributedoptions.controltransport currently limits to the following options (rabbit redis). so if a third party like messaging system like zeromq wanted to plug-in they would have to add to the enum. here is another example where gemfire was used as the messaging system: https://github.com/charliemblack/spring-xd/blob/master/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/commondistributedoptions.java#l38 all messaging enums should be removed for an extensible model."""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add to acceptance test ec2 ci build plan a stage that stops any existing ci ec2 deployments add a stage to the plan that will stop any instances that the ci process may have started before and relaunch a 2 node install based on rabbit. https://build.springsource.org/browse/xd-atec2 was created as an empty shell. the running of across different transports will be handled in a separate story along with adding a stage to run a 'hello world' acceptance test."""" is a not user story because it is most similar to: """"Duplicate messages on tap if i fiddle with the testtappingwithlabels method i can reproduce the same issue: httpsource source = newhttpsource() filesink sink = newfilesink().binary(true) filesink tapsink1 = newfilesink().binary(true) stream().create(""""myhttp"""" """"%s | flibble: transform --expression=payload.touppercase() | flibble2: transform --expression=payload.touppercase() | %s"""" source sink) stream().create(""""mytap4"""" """"tap:stream:myhttp.flibble > transform --expression=payload.replaceall('a''.') | %s"""" tapsink1) source.ensureready().postdata(""""dracarys!"""") assertthat(sink eventually(hascontentsthat(equalto(""""dracarys!"""")))) assertthat(tapsink1 eventually(hascontentsthat(equalto(""""dr.c.rys!"""")))) java.lang.assertionerror: expected: """"dr.c.rys!"""" trying at most 10 times but: failed after 10*100=1000ms: """"dr.c.rys!dr.c.rys!"""""""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Riemann - measure based alerts we would like to experiment with “riemann” a clojure library to aggregate events from servers and applications through stream processing. features: * tracking latency distribution * email for exceptions * memory and cpu statistics this will help understand the behavior of critical components to eventually orchestrate workflows to proactively monitor and notify important contacts/groups as needed. webiste -> http://riemann.io/ github -> https://github.com/aphyr/riemann"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update dependencies to latest spring io platform versions https://github.com/spring-projects/gradle-plugins/tree/master/spring-io-plugin is the starting point to introduce the appropriate plugin to check for the correct dependencies."""" is a not user story because it is most similar to: """"Remove """"legacy"""" application code following spring bootification see the discussion in https://github.com/spring-projects/spring-xd/pull/370 there are now various superseded classes and tests which we no longer need."""" and similar to """"Admin ui: deployment status tooltip should close when the controller scope is lost please refer to: https://github.com/spring-projects/spring-xd/issues/1119"""" and similar to """"Profile support for modules to allow for groups of beans to be defined or not in the container that runs a module. when deploying a stream (e.g. via the rest api) it should be possible to also provide profile names. then those would apply to any modules within that particular stream deployment."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade to 1.2.0 rc1 sik release"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Use alternativejdkidgenerator instead of 3rd party library spring 4.0 provides a uuid generator (used by default in si) that should be used instead of the com.eaoi.uuid library in the xd-tuple library"""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to use the latest releases of {{hdp}}/{{phd}} distros so i can leverage the latest features to create pipelines involving {{hdfs}}. and similar to """"As a user i'd like to have the option to configure default access control for endpoints so that i can grant access by _admin_ or _viewer_ roles."""" and similar to """"As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i want to have to run kafka tests on an external broker so that i reduce the footprint of the build process."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove support for the leading : on items that have a declared namespace when using jobs taps we no longer need to have the leading :. i.e. :tap:foo. we should only support tap:foo."""" is a user story, and is worth 8 story points because it is most similar to: As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint. and similar to """"As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time."""" and similar to """"As a user i'd like to have a separate _yml_ file to list the deployment manifest properties so that i don't have to include as part of the stream definition."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Interacting with xd on yarn 1. how we talk to the xd instance(s) on yarn 2. there is a rest interface which location can be exposed either via resource manager or appmaster 3. technically appmaster could also expose interface which could eihter be proxy for xd rest or dedicated interface implementation(i.e. thrift or spring int)"""" is a not user story because it is most similar to: """"Use mocks in shell tests instead of using real `moduledeployer` try using mocks so that the module deployer downloading the maven co-ordinates from repo can be avoided (for module deployment case). since module deployer and controllers are tested individually it would be good to focus on shell functionality only for the shell tests."""" and similar to """"Hsql always started even when using other database i set the config/xd-config.yml properties to use mysql including this profiles: active: defaultmysql when xd admin starts i still see hsql server started and localhost:9393/env shows: """"profiles"""": [ """"adminserver"""" """"hsqldb"""" """"default"""" ]"""" and similar to """"Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Support pagination in list() command for taps see xd-477"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" is a not user story because it is most similar to: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" and similar to """"Update creating a sink module section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.x-snapshot/reference/html/#_test_the_deployed_module_3"""" and similar to """"Update sources twitter search section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#twittersearch"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Configure jackson objectmappers to allow single quotes allow json payloads from external sources e.g. http post to contain single quoted field names and values. this is required where xd uses jackson to convert payloads from json to object or tuples."""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a performance tester i'd like to investigate why there's high cpu startup time for both admin and container servers. perhaps profiling would assist isolating the bottlenecks. *scope:* * identify the bottlenecks * document reasons * list pros/cons"""" and similar to """"As a s-c-d developer i'd like to provide optional key-value pairs as deployment properties so i could leverage them at the runtime to instruct how the modules will be deployed. _the scope of this story is to specifically support {{count}} to represent {{n}} instances of modules that share the same environment variables._"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create rich gauge module spring config for rich gauge plus message handler to coerce a numeric or string payload to a double."""" is a not user story because it is most similar to: """"Add ability to copy job from http site to containers download zipped job modules from a http site and deploy them to modules on the admin & containers before container is started."""" and similar to """"Modify startup script of xdadmin/xdcontainer to allow specifying hadoop distro to use we need to modify startup script to use hadoop 1.1.2 as default or phd1 when specified with --hadoopdistro=phd1"""" and similar to """"Fix test failures and hangs on various local builds the scope is to use this as a bucket for any local test failures. let's have them accounted in this story and fix as applicable."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create sample module in spring-xd-modules for a reactor stream processor a sample perhaps taken from pivotal labs use-case in denver that would calculate some time window averages for a many individual senor values ."""" is a not user story because it is most similar to: """"Create rest api for getting information on a given step execution functionality adopted from spring batch admin should include springmvc test framework style tests get /batch/jobs/executions/{executionid}/steps/{stepid} - get information on a given step execution"""" and similar to """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Create test script that reproduces failure in writing to hdfs when undeploying and redeploying a stream see https://github.com/spring-projects/spring-xd/pull/415#issuecomment-29024329 this test should be created so that it reproduces the failure and then turned off so that when we switch to the new hdfs writing code"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create shell integration test for named chanels expected usage (atm) would be // sink channel called foo http | transform --expression=payload.touppercase() > :foo // source channel called foo :foo > count | file"""" is a user story, and is worth 1 story points because it is most similar to: As a user i'd like to use _partitionresultstimeout_ attribute for jobs that inherit singlestep-partitioning strategy but it is not exposed as a metadata attribute in the wiki. *note:* the property should be available for all the jobs that import 3 ootb jobs have it imported (ref. attachment) and similar to """"As a user i'd like to be able to understand the root cause of an error on the {{http}} shell command. when an exception occurs on an {{http}} shell command the user gets {{""""failed to access http endpoint %s"""" target}} no information from the exception is conveyed to the user (nor is it logged by the admin)."""" and similar to """"As a user i logged in with role_create and i get an error while trying job creation from admin_ui. i can create job from the shell successfully. trying the same workflow with role_admin results with the same error as well. i don't see anything in the admin/container logs about the error itself."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Correct hadoop classpath versions for the distros when using hdp13 the xdconfiglogginginitializer throws this info: 12:02:06064 info main util.xdconfiglogginginitializer:77 - hadoop distro: hdp13 12:02:06068 warn main util.xdconfiglogginginitializer:84 - hadoop version detected from classpath: 1.2.0 but you provided '--hadoopdistro hdp13'. did you mean '--hadoopdistro hdp20'? 12:02:06069 warn main util.xdconfiglogginginitializer:84 - hadoop version detected from classpath: 1.2.0 but you provided '--hadoopdistro hdp13'. did you mean '--hadoopdistro hadoop12'? since hdp13 uses hadoop 1.2.0 we need to fix that in the versions map containeroptions.gethadoopdistroversions()"""" is a not user story because it is most similar to: """"Encapsulate list of moduledeploymentrequests within a parsed stream result object currently the parser returns a list<moduledeploymentrequest> and the deployer works with that list directly. we need a higher level parser result (e.g. deployablestream - or probably a better name after some thought) that can encapsulate that list while also enabling metadata to be added. that metadata may be helpful for composite module information as well as the module dependencies of a given stream (including any composed modules within that stream)."""" and similar to """"Add remote partitioning to filejdbc job h2. narrative as a developer i need to be able to process the importing of files in parallel via the filejdbc batch job. h2. acceptance criteria # be able to provide a list of files to the job and have them be read in parallel based on the number of slaves deployed. # use {{multiresourcepartitioner}} to create on partition per incoming file."""" and similar to """"Add remote partitioning to hdfsjdbc job h2. narrative as a developer i need to be able to process the importing of files in parallel via the hdfsjdbc batch job. h2. acceptance criteria # be able to provide a list of files to the job and have them be read in parallel based on the number of slaves deployed. # use {{multiresourcepartitioner}} to create on partition per incoming file."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove uuid from tuple class or replace with more efficient implementation the java uuid class is known not to be the fasted implementation available. see https://github.com/stephenc/eaio-uuid and http://mvnrepository.com/artifact/com.eaio.uuid/uuid for high perf impls."""" is a not user story because it is most similar to: """"Redis based repositories should use a namingstrategy class to calculate the name of the key to use for persistence rediscounterrepository and redisgaugerepository have duplicated code that needs to be factored out into a one place. one such duplication is the determination of the key name to use for persistence. this should be abstracted out into a strategy helper class."""" and similar to """"Xd adminmain & containermain should check xd.home property from scripts currently the system property xd.home is set as jvm_opts (via spring_xd_admin_opts) into xd-admin & xd-container scripts. inside the containermain & adminmain we need to check if this system property is set and use it. it seems like this check is missing now."""" and similar to """"Spike: store dsl definition in zk as an xd developer i'd like to explore options to save composed job definition in zk metadata so i can use the repository to recreate jobs to recover from failure scenarios."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Re-add spark job acceptance test with spark standalone cluster the spark app test on spark standalone cluster is currently commented out: https://github.com/spring-projects/spring-xd/blob/9307f1fba347adf59c8b489ae7fe0aa9bfd9b6a6/spring-xd-integration-test/src/test/java/org/springframework/xd/integration/test/sparkapptests.java#l74 we need to add it back once the cluster is setup on acceptance test environment."""" is a not user story because it is most similar to: """"Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice"""" and similar to """"Postgresql server.yml options ignored {{p-spring-xd}} defines values for the following parameters in {{servers.yml}}. these values are not being retrieved and hence have to be manually added to each stream definition. * {{url}} * {{username}} * {{password}} * {{driverclassname}} * {{validationquery}} (cf xd-2675 xd-2741)"""" and similar to """"Local control channels enabled in singlenodeapplication when alternate transport is selected. this causes intermittent test failures when testing streams with other transports since moduledeployer receives duplicate requests from multiple threads. fix is to check for local transport before invoking setupcontrolchannels()"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Use 2 tabs for hidden options in shell"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to migrate the wiki to project repo so that it can be tagged with the code and versioned etc."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Display a gauge"""" is a not user story because it is most similar to: """"Writing to hdfs - 1.x"""" and similar to """"Twitterstream is broken"""" and similar to """"Channel registry"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update analytics gauge section to use shell commands instead of curl"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: The shell processor module cannot be stopped while blocked in receive() both lifecycle and send/receive methods are synchronized so if the shell command processor is blocked reading from the script's input - e.g. when no proper terminator is sent by the script the stop() method can't acquire the object lock and proceed stopping the instance and therefore the module."""" is a user story, and is worth 3 story points because it is most similar to: As a performance tester i'd like to rerun baseline benchmarks with batching enabled on rabbit so that i can compare the results with previous performance snapshots. note: - batchingenabled = true - batchingsize = 100 (default) we could also vary default size to compute and record at granular level. and similar to """"As a user i'd like to have a redis based _aggregation_ over field-value counters so that i can continuously write the aggregation in redis as we ingest more data. *scope:* * port specs from [previous implementation|https://github.com/spring-projects/spring-xd/wiki/old---aggregate-field-value-counters]. * identify gaps * update reference documentation"""" and similar to """"As a user i'd like to have a gradle build option so that i can support module projects that will declare the spring xd dependencies as provided configure the boot plugin for 'module' layout and other boilerplate build configuration. this is dependent on boot's module layout scoping issue: https://github.com/spring-projects/spring-boot/issues/2187"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to move 1.2.x branch to ec2 infrastructure so i can reliably run ci test suites."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove container entry in redis when the application context event to shutdown the container is fired"""" is a not user story because it is most similar to: """"Add integration tests for sqoop job we need to add some integration tests for the sqoop job introduced in xd-2430"""" and similar to """"Do not initialize spring batch schema on each test run if the spring batch database has already been initialized do not re-initialize for each test run."""" and similar to """"Generate asciidoc doc from module options generate asciidoc fragments for each module's options this way it is always up to date."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create a loadgenerator source module create a load-generator source module that will generate messages and dispatch messages to a xd stream."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a s-c-d developer i'd like to create {{moduleregistry}} implementation so i can use this infrastructure to lookup module coordinates by name."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Containers should listen for module deployment requests and their deletions the admin leader will write each module deployment request to a child node of /xd/deployments for a selected container (see xd-1399). that container-specific (persistent) child node needs to be created by the container at the same time as it creates its ephemeral node under /xd/containers. the container should then deploy the module. if that same node is subsequently deleted the container should undeploy the module."""" and """"Validate time field processing with aggregatecounter aggregatecounter needs a test case along the lines of of org.springframework.xd.analytics.metrics.integration.fieldvaluecounterhandlertests that will demonstrate the base functionality of the module as well as use of the timefield and dateformat options."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a build manager i'd like to schedule ci builds for windows so that i can verify xd runtime features/functionality. the scope is to isolate the remaining test failures perhaps experiment with new ami images until we have a solid infrastructure to fix the failing tests."""" is a not user story because it is most similar to: """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Filesourcetest needs to apply label to source and sink * currently acceptance filesource acceptance tests are failing ** this is because the sink that tests the result for the file source test is a filesink. both use the """"file"""" token. thus causing a failure * simplefilesource and simplefilesink needs to support a label method. * update testfilesource to use the labels."""" and similar to """"Update to spring-data-hadoop 2.2.0.m1 we should update to use spring-data-hadoop 2.2.0.m1in order to use the fixes available for the hdfs writing there (syncable writes timeout). a few things to keep in mind: - this updates cloudera cdh to 5.3.3 - kite version is now 1.0 - need to test the hdfs-dataset sink"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Handle singlenodeserver's stop() method cleanly singlenode server needs to stop cleanly with stopping both the admin server & container server. also all the tests that require singlenode main server needs to handle the server shutdown appropriately."""" is a not user story because it is most similar to: """"Change jacoco to 0.7 for jdk 8 builds https://build.spring.io/browse/xd-jdk8-5 apply plugin: 'jacoco' jacoco { toolversion = """"0.7.0.201403182114"""" }"""" and similar to """"Job execution list should mention jobs that have been deleted create a job execute it a couple of times destroy it and then invoke job execution list. the job name column should mention that a job is defunct (even though a job with the same name could have been re-created in the interim)"""" and similar to """"Hdfstextfilewriter incompatible with maprfs use of fsshell in abstracthdfswriter.initializecounterifnecessary() causes maprfs to throw an unimplemented operation exception. replacing the fsshell code with filesystem.liststatus allows it to be used with maprfs."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create integration tests for batch notifications"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Redis sink should default to using spring.redis configuration in servers.yml the configuration for the redis sink must be provided for explicitly instead of falling back to values defined in servers.yml. the default behavior configuration should be address in a manner consistent with the default behavior of module config for rabbit source/sink jdbc sink...."""" is a not user story because it is most similar to: """"Add @xmlrootelement to all rest resources some rest resources lack an @xmlrootelement annotation. this causes a jaxb marshalling error when trying to access the api with an accept header of xml (which is the default in most browsers) this is a preliminary to xd-1800 (which is much more involved) only to fix ugly exception"""" and similar to """"Fix images alignment in reference pdf doc the reference pdf doc has some of the images not aligned well within the document. for the latest doc from snapshot build please refer here: http://repo.spring.io/libs-snapshot-local/org/springframework/xd/spring-xd/1.0.0.build-snapshot/"""" and similar to """"Verify we meet all requirements to publish to maven central https://docs.sonatype.org/display/repository/central+sync+requirements has a list of requirements. this also means that https://jira.spring.io/browse/xd-1509 is critical to fix."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Push ${xd.stream.name} into pojo defaults see xd-1283. we've been waiting for 1283 to change constructs like {noformat} attr=""""${name:${xd.stream.name}}"""" to just {noformat} attr=""""${name}"""" {noformat} turns out we can simply push down the ${xd.stream.name} bit in the default value (most likely initialization of a field in a pojo metadata class) and it will work just fine. we can also consider: - providing a fake value for those placeholders to use when doing """"module info"""" (ie user will see """"<name of the stream>"""" instead of """"${xd.stream.name}"""""""" is a user story, and is worth 5 story points because it is most similar to: As a user i'd like to have direct shell commands to scale up/down a given module instance so i can avoid spi specific cli commands that needs run outside of data flow. and similar to """"As a s-c-d developer i'd like to create a new project to contain all the rules associated {{@redisrule}} contract so it is isolated from core functionalities and reusable by test coverage as needed. consider moving this coverage to si """"commons"""" or equivalent."""" and similar to """"As a developer i'd like to define pluggable runtime spi so i have the option to choose the implementation based on deployment targets such as cf on-prem mesos etc."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Admin & launcher startup fails when xd_jmx_enabled is set to true when exporting of mbeans are enabled via xd_jmx_enabled (also jmxenabled as in application.yml) the admin and lancher server application fail to start. since the admin applications has the same 'integrationmbeanexporter' bean name for integrationmbeanexporter as that its parentconfiguration there is a naming conflicts and the exception thrown as: (same is the case for launcher and its parent configuration) exception in thread """"main"""" org.springframework.beans.factory.beancreationexception: error creating bean with name 'mbeanexporter' defined in class org.springframework.context.annotation.mbeanexportconfiguration: invocation of init method failed nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [org.springframework.integration.monitor.integrationmbeanexporter@1de40d3e] with key 'integrationmbeanexporter' nested exception is javax.management.instancealreadyexistsexception: org.springframework.integration.monitor:name=integrationmbeanexportertype=integrationmbeanexporter org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.initializebean(abstractautowirecapablebeanfactory.java:1553) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:539) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:475) org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:304) org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:228) org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:300) org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:195) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:700) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.context.embedded.embeddedwebapplicationcontext.refresh(embeddedwebapplicationcontext.java:124) org.springframework.boot.springapplication.refresh(springapplication.java:609) org.springframework.boot.springapplication.run(springapplication.java:321) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.dirt.server.adminserverapplication.run(adminserverapplication.java:60) org.springframework.xd.dirt.server.adminserverapplication.main(adminserverapplication.java:42) caused by: org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [org.springframework.integration.monitor.integrationmbeanexporter@1de40d3e] with key 'integrationmbeanexporter' nested exception is javax.management.instancealreadyexistsexception: org.springframework.integration.monitor:name=integrationmbeanexportertype=integrationmbeanexporter org.springframework.jmx.export.mbeanexporter.registerbeannameorinstance(mbeanexporter.java:610) org.springframework.jmx.export.mbeanexporter.registerbeans(mbeanexporter.java:535) org.springframework.jmx.export.mbeanexporter.afterpropertiesset(mbeanexporter.java:417) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.invokeinitmethods(abstractautowirecapablebeanfactory.java:1612) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.initializebean(abstractautowirecapablebeanfactory.java:1549) ... 15 more caused by: javax.management.instancealreadyexistsexception: org.springframework.integration.monitor:name=integrationmbeanexportertype=integrationmbeanexporter com.sun.jmx.mbeanserver.repository.addmbean(repository.java:437) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registerwithrepository(defaultmbeanserverinterceptor.java:1898) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registerdynamicmbean(defaultmbeanserverinterceptor.java:966) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registerobject(defaultmbeanserverinterceptor.java:900) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registermbean(defaultmbeanserverinterceptor.java:324) com.sun.jmx.mbeanserver.jmxmbeanserver.registermbean(jmxmbeanserver.java:513) org.springframework.jmx.support.mbeanregistrationsupport.doregister(mbeanregistrationsupport.java:195) org.springframework.jmx.export.mbeanexporter.registerbeaninstance(mbeanexporter.java:663) org.springframework.jmx.export.mbeanexporter.registerbeannameorinstance(mbeanexporter.java:600) ... 19 more"""" and """"Springxd's syslog source does not fully support syslog rfc5424 springxd's syslog source cannot parse rfc5424 messages into a map. for the messages we get in rfc 3164 springxd converts these to a map. since the rfc5424 data cannot be interpreted then the map contains just one key called 'undecoded'. the result of this is that we get a string that looks like this (when we convert the message to a string) {code} {undecoded=<182>dec 02 2014 07:56:35: %asa-6-113008: aaa transaction status accept : user = jbloggs} {code} should be something like this (note the values below are for illustrative purposes only and should not be used as test data) {code} {facility=22 severity=6 timestamp=tue dec 02 07:56:35 host=the-hostname-that-sent-the-data tag=%asa-6-113008 message=........} {code} h3. root cause spring integration does not parse these messages. there is a jira for si here: https://jira.spring.io/browse/int-3450"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Support oracle jdbc configuration for xd batch job repository currently hsqldb postgres and mysql job repositories are supported. we need to add configurable oracle jdbc settings."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place. and similar to """"As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed."""" and similar to """"As a user i want to configure docker xd containers using service discovery so that i can have tools to manage how processes and services in a cluster can find and talk to one another."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Illegalstateexception on single node shutdown upon shutdown via ^c an illegalstateexception stack trace appears in the server logs. while harmless the traces are annoying and should be prevented."""" is a not user story because it is most similar to: """"Modify startup script of xdadmin/xdcontainer to allow specifying hadoop distro to use we need to modify startup script to use hadoop 1.1.2 as default or phd1 when specified with --hadoopdistro=phd1"""" and similar to """"Research approach to bootstrap custom modules design spike: investigate various approaches to bootstrap custom modules. can spring boot be leveraged? starter pom?"""" and similar to """"The new scsm twitterstream module should produce same json as old xd source the new scsm twitterstream module uses a different format than xd 1.x source module. it should match what twitter uses so existing processors etc. will continue to work."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Enhance xd on yarn to use shdp container clustering currently yarn runtime needs two yarn appmaster instances(one for admins one for containers). shdp's container grouping added functionality to run different type of containers within a same appmaster. beyond this container grouping will also give more functionality like ramping containers up/down on-demand creating groups with different settings dynamically and restarting failed containers."""" is a not user story because it is most similar to: """"First deploy/launch of pig job that includes yarn-site.xml file fails deploying and launching a pig job that contains a yarn-site.xml config file fails on the first deploy after xd starts up. this happens consistently. the error is: error: could not find or load main class org.apache.hadoop.mapreduce.v2.app.mrappmaster which indicates that the yarn-site.xml file never made it to the classpath. un-deploying and re-deploying the job seems to fix the problem."""" and similar to """"Remove code in streamplugin to extract target output channel from proxy the si jmx mbeanexporter proxies the output channel created in a module context when jmx is enabled. we have to unwrap the proxy in streamplugin in order to add the tap. xd-877 temporarily introduced this code but a more elegant solution is called for. perhaps this will involve si making addinterceptor an interface method."""" and similar to """"Improve module options support note from pr #365 - which has been merged - providing the initial level of support... pending issues (to be addressed in another pr?): - [x] complex case - [x] default values for complex case when option is not surfaced back to the module (eg """"suffix"""" in our canonical example) - [ ] plugin provided options and values - [ ] descriptive defaults instead of actual defaults (e.g. \<use stream name\>) - [ ] jsr303 validation"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to retain the data partitioning state so that when i restart the containers i continue to write based on the original partitioning strategy. currently the state is not preserved hence on restarts the definition of partitioning strategy is lost due to different _hashcode()_. *design consideration:* mine through the container info to derive the """"partition index"""" instead of relying on _hashcode()_."""" is a not user story because it is most similar to: """"Add the dependencies required to use #xpath in streams thanks to gary i found this little gem of documentation to be able to use xpath expression in xd. only hiccup is that i had to also add the spring-xml.jar to the classpath (otherwise it is missing xpathexception class). http://stackoverflow.com/questions/29110757/spring-xd-work-with-xml-payload"""" and similar to """"The ability to route within streams a flow or a processor component may require routing semantics. currently the stream assumes a single input and output for each module. a flow may support multiple outputs - switch routing that is - recipient list is not currently supported (another subtask?). we need to support semantics like: a |[output.foo:coutput.bar:ddefault:e]"""" and similar to """"Routing json arrays when i create following stream i am able to route json messages. but if i send same message as an array its not working. is it possible to do something about it? stream create --name reference-data-import --definition """"rabbit --outputtype=text/plain | router --expression=#jsonpath(payload'$.rejected').contains('true')?'queue:rejected':'queue:accepted'"""" --deploy"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to move {{jdbc}} module from xd to s-c-s repo so i can use it as source to build streaming pipeline."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to move {{cassandra}} module from xd to s-c-s repo so i can use it as {{sink}} to build streaming pipeline. and similar to """"As a spring-bus lead i'd like to review the current spring-bus architecture and the design specs so i can address any foundation level gaps."""" and similar to """"As a developer i'd like to have a maintenance branch so that i can commit minor release _(ex: 1.0.2)_ code changes instead of committing to master."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Homogenize container initialization failures if redis is not running the container fails to initialize in {{containermain.launch()}} because the connection factory attempts to eagerly connect. if rabbitmq is not running the container fails to initialize in {{abstractcontainerlauncher.launch()}}. make the failure behavior consistent from a user perspective and add a spring-retry {{retrytemplate}} to retry container startup."""" is a not user story because it is most similar to: """"Rpm upgrades should not to wipe-out previous installation configs/settings as an operator i'd like to upgrade to the latest releases of spring xd and yet not lose the older installation {{dirs}}/{{files}} so i can copy and reuse the previously used {{servers.yml}} configurations."""" and similar to """"Improve build file distribution tasks the current flow of gradle tasks is confusing. suggest the following changes to simplify the flow. 1. move the current task logic in zipxd to distzip 2. have distzip depend on dist 3. update the 'how to build docs' on the wiki 4. make sure that the distzip task only shows up once in the list of gradle target."""" and similar to """"Fix images alignment in reference pdf doc the reference pdf doc has some of the images not aligned well within the document. for the latest doc from snapshot build please refer here: http://repo.spring.io/libs-snapshot-local/org/springframework/xd/spring-xd/1.0.0.build-snapshot/"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fail fast on kryo registration conflicts currently kryo class registration is hard coded in spring-xd-codec. users may register their own classes using an extension mechanism but it is possible to conflict with internal xd class registration e.g. tuple. exposing this using the same extension mechanism will make it more transparent."""" is a not user story because it is most similar to: """"Update reactor stream processor to use latest snapshots the code base is changing a bit so using 2.0 m1 for development is stable up until all major jira issues have bee completed. then we should track snapshots in preparation to move to 2.0. m2 when it gets released."""" and similar to """"Using a newer version of a spring-xd dependency is ignored in packaging when creating a new module with a dependeny which has a newer version than the one spring-xd uses (in my example i use jedis 2.6.1 and spring-xd uses jedis 2.5.2) the packaging ignores the dependency. using the solution of spring-boot-maven-plugin doesn't help because it will only include what you explicitly add to the include section (transitive dependencies are not included)"""" and similar to """"Hsql always started even when using other database i set the config/xd-config.yml properties to use mysql including this profiles: active: defaultmysql when xd admin starts i still see hsql server started and localhost:9393/env shows: """"profiles"""": [ """"adminserver"""" """"hsqldb"""" """"default"""" ]"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Support moduleoptions for composed modules with the following semantics (assuming http | filter | transform composition): * fully qualified names always available (eg filter.expression) * using module type as key * or label if ambiguity * simple names available if no ambiguity (eg here """"port"""" refers to http.port) as per discussion: viii) use of “--expression�? option in composed module “filter | filter�? should not be supported (require fqn always) should pertain to first filter module (always) should pertain to all modules with an “expression�? option (here: both filters) should fail if not qualified and ambiguity. use label.expression (or type.expression eg if we had “filter | transform) (see vii ⇒ nesting1.nesting2.nesting3.expression) (mf) viii) use of “--expression�? option in composed module “http | filter --expression=something | transform�? should not be supported (already valued) should pertain to first filter module (always) should pertain to all modules with an “expression�? option (here: both filters) should fail if not qualified and ambiguity. use label.expression (or type.expression eg if we had “filter | transform) (see vii ⇒ nesting1.nesting2.nesting3.expression) (mf)"""" and """"Strange language prefix shown on some code listings when hovering the mouse over them looking at the online docs the code listings have inconsistent syntax highlighting and when you hover the mouse over some of them there is a language prefix like ruby or javascript inserted at the beginning of the first line. very strange. to see this go to http://docs.spring.io/spring-xd/docs/1.2.0.release/reference/html/#_server_configuration and scroll down to the hsqldb section. the listing for hsqldb looks fine but scroll down further and put the mouse pointer on the mysql or postgresql listings and you should see 'javascript' being inserted on the first line."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Generated pom does not include spring boot 1.1. dependency the change in xd 1.0.1 to use spring boot 1.1.7 meant that we can't pickup the boot dependency by importing the platform-bom. andy w's suggestion is to change the generated pom to refer to the platform-bom as a parent (not import) and then declare the explicit dependency on boot 1.1.7"""" is a user story, and is worth 5 story points because it is most similar to: As a user i'd like to have the option to specify system properties that will be passed in to the sqoop job which runs in it's own java process. this is needed for defining memory usage and also for defining some options for various connector implementations. and similar to """"As a user i'd like to have the ability to mass-ingest data from various database systems so that i'm not restricted with the current approach (_jdbchdfs_) that is dependent on jdbc drivers. *spike scope:* * identify integration options * collaborate to determine the design * document outcome (design specs)"""" and similar to """"As a user i need to use xd sqoop module to support the merge command. currently the sqooprunner createfinalarguments method forces the requirement for connect username and password options which are not valid for the merge option. a check of the module type to not force these options being assigned to sqoop arg list would be preferred"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a rabbit sink module and documentation https://github.com/springsource/spring-xd/wiki/sinks should have 'rabbit' added to the list and also the corresponding section that shows some basic usage."""" is a not user story because it is most similar to: """"Use dot as the composed module option separator following merge of https://github.com/spring-projects/spring-xd/pull/601 use dot as the separator for a composed module option. need change to the parser to accept dots"""" and similar to """"Remove unnecessary usage of module.getindex() following the merge of https://github.com/spring-projects/spring-xd/commit/03cf962845499610ad021d9e6689bccbf5e13cef investigate calling sites of module.getindex() or any similar api and remove it if needed"""" and similar to """"Esper based complex event processing module i would like to see a module created that supports complex event processing. i have reviewed gemfire continuous query but was not able to find a feature for time windows. i have used esper in the past for this type of processing."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to add support for {{undeployed}} status consistently across all the deployers so i can present the correct status instead of the current {{unknown}}. this is applicable for existing streams without any deployment context associated with it."""" is a not user story because it is most similar to: """"Spike: research request/reply support to kafka message bus the scope is to research the available options to provide request/reply support for kafka. * document findings * pocs previous desc: the bindrequestor and bindreplier methods of the message bus need to be implemented."""" and similar to """"Jdbchdfstests sporadically fail acceptance tests sporadically fail after https://github.com/spring-projects/spring-xd/pull/1623 was merged xd-2309. additional tests were added but used fixed timeouts. will replace them with waitforjob."""" and similar to """"Creating a base class for plugins it might be worth creating a base class for plugins that combines common concerns across plugins. e.g. that would allow us to hide the commonapplicationcontext and beandefinitionaddingpostprocessor for common cases instead exposing a simple addbeandefinition method to sub-classes."""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Feature request: zeromq (zmq 0mq) source requesting a zeromq based source."""" is a not user story because it is most similar to: """"Update yarn deployment classpath settings for hdp 2.2 and phd 3.0 need to update classpath settings for phd 3.0 and hdp 2.2"""" and similar to """"Find and eliminate package-level cycles across xd projects"""" and similar to """"The user needs the ability to pause and resume triggers based on a calendar."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to refer to a pig script/job sample so that i can use that as a reference to integrate pig jobs in xd."""" is a user story, and is worth 5 story points because it is most similar to: As a s-c-d user i'd like to have {{runtime info}} as shell command so i can use this to list the details about the module such as {{host}} {{port}} and the like. and similar to """"As a s-c-d user i'd like to add rest support for stream commands so i can maneuver streaming pipeline backed by streamcontroller."""" and similar to """"As a developer i'd like to create a _gpload_ tasklet so i can ingest data from various sources into gpdb in an efficient manner."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Document monitoring & management features this section should discuss what is exposed via jmx how you can view it in jconsole and how you can view it over http via jolikia. in particular showing how some existing metrics for inbound message channel adapters or the 'inbound' channel of the stream that indicate the number of messages processed per section."""" is a user story, and is worth 5 story points because it is most similar to: As a user i'd like to have the ability to mass-ingest data from various database systems so that i'm not restricted with the current approach (_jdbchdfs_) that is dependent on jdbc drivers. *spike scope:* * identify integration options * collaborate to determine the design * document outcome (design specs) and similar to """"As a developer i'd like to decouple execution context from job launch lifecycle so that we can avoid cl and serialization errors. this fix needs to be formally applied in spring batch itself. xd will upgrade to batch release in order to inherit this functionality hence the current workaround with xd-2486 needs reafctored."""" and similar to """"As a user i'd like to have a common shared location so that i can place the dependent jar's that are required by 2 or more custom modules. *current recommendation:* * place the dependent jar under xd/lib folder * if it necessary to support different versions of jar's then bundle it in custom module to get around the _classloader_ problem if a older/newer version exist in xd/lib"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Nodeexists exception upon container disconnect/reconnect without admin leader when the container which has modules deployed disconnects/reconnects to the cluster while the admin leader isn't available following exception is thrown: this is more likely to happen in single-node scenario as there is no admin leader re-election there. in distributed mode we can always setup ha on admins so that the leadership re-election happens. 20:03:16307 error deploymentspathchildrencache-0 cache.pathchildrencache - org.apache.zookeeper.keeperexception$nodeexistsexception: keepererrorcode = nodeexists for /xd/deployments/modules/allocated/53f41042-8abd-443b-abfb-ba42a24fb9fb/foo.sink.log.1/metadata org.apache.zookeeper.keeperexception.create(keeperexception.java:119) org.apache.zookeeper.keeperexception.create(keeperexception.java:51) org.apache.zookeeper.zookeeper.create(zookeeper.java:783) org.apache.curator.framework.imps.createbuilderimpl$11.call(createbuilderimpl.java:676) org.apache.curator.framework.imps.createbuilderimpl$11.call(createbuilderimpl.java:660) org.apache.curator.retryloop.callwithretry(retryloop.java:107) org.apache.curator.framework.imps.createbuilderimpl.pathinforeground(createbuilderimpl.java:656) org.apache.curator.framework.imps.createbuilderimpl.protectedpathinforeground(createbuilderimpl.java:441) org.apache.curator.framework.imps.createbuilderimpl.forpath(createbuilderimpl.java:431) org.apache.curator.framework.imps.createbuilderimpl.forpath(createbuilderimpl.java:44) org.springframework.xd.dirt.server.containerregistrar.writemodulemetadata(containerregistrar.java:486) org.springframework.xd.dirt.server.containerregistrar.onchildadded(containerregistrar.java:461) org.springframework.xd.dirt.server.containerregistrar.access$8(containerregistrar.java:426) org.springframework.xd.dirt.server.containerregistrar$deploymentlistener.childevent(containerregistrar.java:807) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:509) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:503) org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92)"""" and """"Assess if gemfirejsonserver & gemfireserver sinks should close the client cache * os - mac * xd deployment type - singlenode * sha - bb4dd58 * required software - xd gemfire sample server [description] after creating and destroying 3 streams with gemfirejsonserver sink the 4th will fail with this error: * 44707 refused connection: the number of clients 4 exceeded the limit of 3 allowed by the default evaluation license. [steps to reproduce] * from your shell execute the following 4 times: ** stream create --name stocks --definition """"http --port=9090 | gemfire-json-server --regionname=stocks --host=ec2-54-221-32-82.compute-1.amazonaws.com --port=40404 --keyexpression=payload.getfield('symbol')"""" --deploy ** stream destroy stocks"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Filepollhdfs sporadically fails need to add a retry to the mkdir command in the case that it fails."""" is a not user story because it is most similar to: """"Design for deploying xd on ec2 create enough of a design to develop additional stories."""" and similar to """"Add readme to be included in root directory of distribution should explain basic layout of the distribution"""" and similar to """"Paging support for modulemetadata/container repositories add paging support for the appropriate accessor methods in modulemetadata/container repositories"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix class/package tangle introduced by xd-353 {{container}} and {{event}}. {{xdcontainer}} references and is referenced by {{containerstartedevent}} (and stopped). https://sonar.springsource.org/drilldown/measures/7173?metric=package_cycles&rids%5b%5d=7717"""" is a not user story because it is most similar to: """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Filesourcetest needs to apply label to source and sink * currently acceptance filesource acceptance tests are failing ** this is because the sink that tests the result for the file source test is a filesink. both use the """"file"""" token. thus causing a failure * simplefilesource and simplefilesink needs to support a label method. * update testfilesource to use the labels."""" and similar to """"Update to spring-data-hadoop 2.2.0.m1 we should update to use spring-data-hadoop 2.2.0.m1in order to use the fixes available for the hdfs writing there (syncable writes timeout). a few things to keep in mind: - this updates cloudera cdh to 5.3.3 - kite version is now 1.0 - need to test the hdfs-dataset sink"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Support pagination in list() command for jobs see xd-477"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create shell command for getting information on the progress of a given step execution"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a simple counter service a simple counters can increment/decrement a number. implementations for in-memory and redis."""" is a not user story because it is most similar to: """"Create tcp sink module based off si tcp inbound adapter. this will allow for event fowarding."""" and similar to """"Documentation for use of conversion service and creating custom processing modules that use the tuple data structure."""" and similar to """"Run all shell integration tests also with enabled security apply the same strategy for the module command tests also to all other shell integration tests."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create doc section about quotes handling document the different """"onion layers"""" that come in play with regard to quoting and escaping (shell xd-parser spel expressions in some cases) and provide practical examples to common scenarios"""" is a not user story because it is most similar to: """"Defaultcontainermatcher - improve logging and mention affected module when deploying a definition with a container match criteria specified and no container could be selected - the logging is ambiguous and should mention the affected module: {code} 11:58:24089 warn deploymentsupervisorcachelistener-0 cluster.defaultcontainermatcher - no currently available containers match criteria 'somecriteria' {code}"""" and similar to """"Verify platform compatibility versions with the xd dependencies we need to make sure there is no conflicting/missing dependency with build.gradle using spring io platform dependencies. https://jira.spring.io/browse/xd-1929 is one such scenario where jolokia dependency went missing."""" and similar to """"Create rest api for getting information on a job execution for a given execution id adopted functionality from spring batch admin should include springmvc test framework style tests get /batch/jobs/executions/{executionid} - get information on all executions of a given job name."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to move {{twittersearch}} module from xd to s-c-s repo so i can use it as source modules to build streaming pipeline."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to move {{hdfs-dataset}} module from xd to s-c-s repo so i can use it as sink to build streaming pipeline. and similar to """"As a spring xd developer i'd like to port sftp module from xd to s-c-s repo so i can use it as source modules to build streaming pipeline."""" and similar to """"As a spring xd developer i'd like to port {{analytic-pmml}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove xd uuidgenerator in favor of the new si provided one remove <bean id=""""idgenerator"""" class=""""org.springframework.xd.dirt.container.uuidgenerator"""" /> (container.xml) delete org.springframework.xd.dirt.container.uuidgenerator remove compile dependency on eaio from build.gradle"""" is a not user story because it is most similar to: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" and similar to """"Reorganize ootb module list in docs sort alphabetically nest """"available modules"""" section appropriately. optionally move to a whole different """"part"""" in reference doc"""" and similar to """"Avoid use of module name twice in location when using a custom modules see https://github.com/springsource/spring-xd/pull/240#discussion_r6045724"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create ec2 ami for single-node install of hortonworks data platform 1.3"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Test redis sentinel setup and document recommended configuration configure redis cluster with sentinal v 2.8.19. verify fail over experiment with settings. useful reference https://code.flickr.net/2014/07/31/redis-sentinel-at-flickr/ all analytics test cases should be run as well as test that deploy streams that make use of redis analytics. there might be some minor code changes required as mentioned in the flickr article."""" and """"Fix gradle build inconsistencies and leftovers the build has some inconsistencies that should be taken care of. amongst the one i know: * the ui project is always getting cleaned for no apparent reason (there might have been one before) thus triggering a rebuild of everything downstream most notably dirt * the “exec"""" task is not used anymore * lots of projects are getting the boot plugin applied to them. i'm not sure 100% what that plugin does but we don't need the repackage bit for example."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Copy latest build to s3 after a xd build"""" is a not user story because it is most similar to: """"Kafka profiling for base & distributed base benchmarks"""" and similar to """"Update spring-amqp to 3.6 rabbitmq client to 1.5.4 update to amqp-client 3.6.0 and spring-amqp 1.5.4"""" and similar to """"Create separate distribution for shell create zip distribution for shell"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add batch job listeners automatically add batch job listeners automatically * each major listener category should send notifications to own channel (stepexecution chunk item etc.) * add attribute to disallow automatic adding of listeners"""" is a user story, and is worth 1 story points because it is most similar to: As a user i'd like to have the option to change the default sqoop _metastore_ so i can implement a db of my choice and not tied to default specifications. refer to this [thread|http://stackoverflow.com/questions/24078668/how-to-change-sqoop-metastore] for more details. and similar to """"As a user i need to know the spark streaming features like adding tap at the spark module output and the examples need to be updated. the documentation also needs some more information on `reliable` receiver."""" and similar to """"As a user i'd like to have guidance to create custom modules so that i can align the development practices with recommended approach. 11/20: update: scope of this task is to create an example to demonstrate and document the capability."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update rpm and brew recipes"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update spring-data-hadoop version to 2.1.0.m3"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Cleanup and optimize gradle tasks to bundle spring-xd distribution we need to cleanup some of the duplicate gradle tasks that bundle spring-xd distributions. currently distxd does the copy of distributions from """"spring-xd-dirt"""" """"redis"""" and """"spring-xd-gemfire-server"""" projects into """"$rootdir/dist/spring-xd"""". and the task """"zipxd"""" makes the zip archive. these tasks should be combined with the """"distzip"""" & """"doczip"""" tasks. we also need to remove the duplicate artifacts configuration from these tasks."""" is a not user story because it is most similar to: """"Add the dependencies required to use #xpath in streams thanks to gary i found this little gem of documentation to be able to use xpath expression in xd. only hiccup is that i had to also add the spring-xml.jar to the classpath (otherwise it is missing xpathexception class). http://stackoverflow.com/questions/29110757/spring-xd-work-with-xml-payload"""" and similar to """"Do you have plan to support spark? do you have plans to support spark? in version 1.0 ga spring xd has supported hadoop but it has not supported the brand new big data calculation platform spark. do you have plans to support spark in the future?"""" and similar to """"Update doc about trigger changes trigger has been changed to be one single modules taking params (as opposed to 3 before) update doc at https://github.com/spring-projects/spring-xd/wiki/batch-jobs also arguably the module could be advertised as a source itself (it is only mentioned in the context of batch)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"For file based item reader jobs step/job completion message should have name of file sent on named channel it looks like we don't handle deletion of source files currently. we should provide some support for that - maybe there is a way to into spring integration's pseudotransactionmanager support: http://docs.spring.io/spring-integration/api/org/springframework/integration/transaction/pseudotransactionmanager.html the *file source* should possibly also support file archival functionality (but that might also be a dedicated processor?). not sure where we want to set the semantic boundaries for the file source."""" is a not user story because it is most similar to: """"Investigate dropped module deployment requests we have observed in unit tests (see abstractsinglenodestreamintegrationtests) that(redis/singlenode) occasionally fail. the root cause must be investigated further but there is some evidence to suggest that the control messages (moduledeploymentrequests) are not always received and handled by the moduledeployer. this does not produce an error but results in runtime stream failures. this problem may be resolved as part of the planned deployment spi but is being tracked here until we are certain that it has been resolved."""" and similar to """"Fix in-memory analytics most of the infrastructure and code cleanup has been done for in-memory analytics. the only remaining issue is that by including memory-analytics.xml from common.xml we're actually creating e.g. a new inmemorycounterrepository that is different from the one present in the admin process space. this story involves fixing that. it may actually be done as part of xd-353 handling the """"local"""" transport as a special case (context inheritance) rather than import based on xd.transport"""" and similar to """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Configure servers to use vanillahealthendpoint the standard simplehealthindicator that boot performs a database test that fails in xd-container since it does not require the use of a database."""" is a not user story because it is most similar to: """"Modify startup script of xdadmin/xdcontainer to allow specifying hadoop distro to use we need to modify startup script to use hadoop 1.1.2 as default or phd1 when specified with --hadoopdistro=phd1"""" and similar to """"Rename avro sink to hdfs-dataset and add support for parquet format the kite sdk is used to write avro records in a kite specific format and also it support the parquet format for which we will eventually support."""" and similar to """"Add steams page to show job triggers the streams page needs to be added to the ui at least to show the job triggers that are created while scheduling xd jobs."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Fix 'cluster/containers' rest endpoint if security is enabled if the security is enabled for the container then admin server won't be able to fetch the message rates for the deployed modules in that container. the rest endpoint 'cluster/containers' needs to be fixed."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to """"As a user i want to configure docker xd containers using service discovery so that i can have tools to manage how processes and services in a cluster can find and talk to one another."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add tab completion for named channels (i.e. queue:xyz >) tab completion doesn't currently list/support """"queue"""" as a source. for example if typing the following stream: stream create b --definition """"queue:bar > transform --expression=payload+'-bar' | log"""" --deploy tab completion doesn't recognize or suggest """"queue"""" or anything after it until after the first bar """"|"""". the same applies to named channels """"queue"""" as a sink."""" is a not user story because it is most similar to: """"Sample app that can process and analyze network packets create an example application that demonstrates the processing / analysis from a stream of network packets. a potential scenario could be the detection of ongoing cyber attacks by scanning for tls packets that what to abuse a ssl vulnerability aka """"heart bleed"""". a library that could help with this is: http://jnetpcap.com/"""" and similar to """"Tap lifecycle connection listener should close the tap path children cache upon zk disconnect currently taplifecycleconnectionlistener (which implements zookeeperconnectionlistener) clears(but not closes) the taps (pathchildrencache) upon zk `ondisconnect` child event. since `onconnect` child event re-creates the tap pathchildrencache the previously created pathchildrencache is still hanging in there. i would be better to close the cache upon disconnect."""" and similar to """"Update shell to support tasks h2. narrative as a user i need to be able to deploy a task (boot jar) via the cli. h2. back story since the concept of jobs as an explicit primitive within spring xd is going away in spring-cloud-data the shell needs to be updated to reflect that."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to include the following improvements as part of the ec2 ci infrastructure so that we can reliably run the ci builds and also assert over feature functionalities. *scope:* * enable 'distributed jvm test' * change from using artifactory gradle task to a command task (that calls ./gradlew) * test w/ embedded hadoop off * turn on maxparallelforks"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing and similar to """"As a user i'd like to have the option to define access control list (acls) so that i can define access controls to the resource by 'each user' and what the privileges are for that 'resource'. *spike scope:* ** review customer use cases and come up with design specs ** identify the best approach that fits xd runtime ** identify scope for dsl and ui ** document next steps and phases"""" and similar to """"As a developer i'd like to study the taxi trips based on a stream of trip reports from new york city so that i can evaluate event-based systems in the context of real-time analytics using spring xd. [challenge details|http://www.debs2015.org/call-grand-challenge.html]"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'm trying to use {{counter}} sink with {spel}} expression but i'm not able to use them in combination. it [throws|https://github.com/spring-cloud/spring-cloud-stream-modules/blob/master/counter-sink/src/main/java/org/springframework/cloud/stream/module/metrics/countersinkproperties.java#l77] {{exactly one of 'name' and 'nameexpression' must be set}} as error message."""" is a not user story because it is most similar to: """"Elk - log analysis we would like to experiment with “elk” stack. it’s the combination of elasticsearch logstash and kibana to extract end-to-end real-time insights from structured and unstructured data source. possibly provide integration endpoints to some of the components. features: * search and analyze in real-time * scrub parse and enrich data * visualization website -> http://www.elasticsearch.org/overview/ github -> http://www.elasticsearch.org/overview/elkdownloads/"""" and similar to """"Increase exit description text field on job execution process step page the step execution process (http://localhost:9393/admin-ui/#/jobs/executions/38/52) page should list more lines of text for 'exit description' field to make sense of error messages. *scope:* investigate how much information can be collected directly from the executioncontext. it may be dependent on the error types. let's have the observation documented to decide next steps."""" and similar to """"Investigate fall through of server.yml values when running in yarn we don't support using @configuration for modules atm. the current code was committed during the same time as improvements to handling module configuration. we should switch the reactor-ip.xml to include all bean definitions and remove referencing @configuration classes or see how to add support for @configuration. another short term hack is to put the prefix 'sink.reactor-ip' in all @value used in netserverinboundchanneladapterconfiguration."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to refer to hive sample so that i can use that as a reference to integrate hive to query and analyze."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices. and similar to """"As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations."""" and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Yarn/mapred application class path broke. when copying those xml files to spring xd conf spring xd doesn't pickup those classpath correctly. those classpath contains ${stack.name} ${stack.version}. those were processed correctly inside phd3/hdp but not in spring xd."""" is a not user story because it is most similar to: """"Profile / improve performance of tuplebuilder see discussion at https://github.com/spring-projects/spring-xd/pull/1311 1) there seems to be unused simpledateformat in tuplebuilder which hurst perf 2) more generally should take some time to profile / micro-benchmark tuplebuilder"""" and similar to """"Support composed module deletion provided it is not currently used in any stream: v) attempt to destroy a composed module should not be supported at all should not be supported if involved in at least one stream (eb? mf!) should be supported and have no other consequences whatsoever (see iv) (eb?) should be supported and invalidate/destroy streams involving it"""" and similar to """"Automatically align version for tomcat components from platform https://github.com/spring-projects/spring-xd/commit/db66aa2a329a6fc7ef89a340dd4d562fa70d14a4 introduces org.apache.tomcat.embed:tomcat-embed-logging-log4j which is not covered by platform. yet we should lookup the version to use from other tomcat artifacts using some gradle magic"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-s developer i'd like to create auto configuration for {{singlenode}} binder configuration/properties so i can automatically configure the spring application based on the dependencies."""" is a user story, and is worth 3 story points because it is most similar to: As a s-c-s developer i'd like to move {{spring-cloud-stream-modules}} from s-c-s to s-c repo so i can cleanup s-c-s project and at the same time make these modules visible outside of s-c-s. and similar to """"As a s-c-d developer i'd like to enhance integration test coverage for {{lattice}} spi so i can continuously evaluate functionalities via ci pipeline."""" and similar to """"As a s-c-d developer i'd like to enhance unit test coverage for {{yarn}} spi so i can continuously evaluate functionalities via ci pipeline."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Move cassandra sink to xd proper"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Batch jobs executions by jobname causes stackoverflow whether it's after applying https://github.com/spring-projects/spring-xd/pull/1034/ or not this causes the following problem: {noformat} .... com.fasterxml.jackson.databind.ser.std.beanserializerbase.serializefields(beanserializerbase.java:644) com.fasterxml.jackson.databind.ser.beanserializer.serialize(beanserializer.java:152) com.fasterxml.jackson.databind.ser.beanpropertywriter.serializeasfield(beanpropertywriter.java:541) com.fasterxml.jackson.databind.ser.std.beanserializerbase.serializefields(beanserializerbase.java:644) com.fasterxml.jackson.databind.ser.beanserializer.serialize(beanserializer.java:152) com.fasterxml.jackson.databind.ser.impl.indexedlistserializer.serializecontents(indexedlistserializer.java:100) com.fasterxml.jackson.databind.ser.impl.indexedlistserializer.serializecontents(indexedlistserializer.java:21) com.fasterxml.jackson.databind.ser.std.asarrayserializerbase.serialize(asarrayserializerbase.java:183) com.fasterxml.jackson.databind.ser.beanpropertywriter.serializeasfield(beanpropertywriter.java:541) com.fasterxml.jackson.databind.ser.std.beanserializerbase.serializefields(beanserializerbase.java:644) com.fasterxml.jackson.databind.ser.beanserializer.serialize(beanserializer.java:152) com.fasterxml.jackson.databind.ser.beanpropertywriter.serializeasfield(beanpropertywriter.java:541) com.fasterxml.jackson.databind.ser.std.beanserializerbase.serializefields(beanserializerbase.java:644) com.fasterxml.jackson.databind.ser.beanserializer.serialize(beanserializer.java:152) com.fasterxml.jackson.databind.ser.impl.indexedlistserializer.serializecontents(indexedlistserializer.java:100) com.fasterxml.jackson.databind.ser.impl.indexedlistserializer.serializecontents(indexedlistserializer.java:21) caused by: java.lang.stackoverflowerror java.lang.classloader.defineclass1(native method) java.lang.classloader.defineclass(classloader.java:800) java.security.secureclassloader.defineclass(secureclassloader.java:142) java.net.urlclassloader.defineclass(urlclassloader.java:449) java.net.urlclassloader.access$100(urlclassloader.java:71) java.net.urlclassloader$1.run(urlclassloader.java:361) java.net.urlclassloader$1.run(urlclassloader.java:355) java.security.accesscontroller.doprivileged(native method) java.net.urlclassloader.findclass(urlclassloader.java:354) java.lang.classloader.loadclass(classloader.java:425) sun.misc.launcher$appclassloader.loadclass(launcher.java:308) java.lang.classloader.loadclass(classloader.java:358) com.fasterxml.jackson.databind.ser.std.beanserializerbase.serializefields(beanserializerbase.java:660) ... 1011 more {noformat}"""" and """"Allow """"--path=..."""" configuration in http channel adapter currently each http stream channel uses its own port which is a limitation if we want to use large numbers of http streams with fine granularity. it would be nice to (additionally) use uri paths to identify http channels allowing to re-use a single http port for multiple channels in xd. example usage: stream create --name s1 --definition """"http --port=9495 --path=/foo | log"""" --deploy for a poc implementation see: https://github.com/spring-projects/spring-xd/pull/1538"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update jclouds to 1.8 have to update the code because of deprecation and to get ready for 2.0."""" is a not user story because it is most similar to: """"Change accepted-media-types to accpted-content-types"""" and similar to """"Add test for filejdbc to test scripts the filejdbc jobs isn't included in the test scripts"""" and similar to """"Change xd-config.yml and xd-modules-config.yml to servers.yml and modules.yml"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add config dir to classpath to support custom properties-locations the transform filter and script processor modules support passing in a properties-location for script variables. we need a default location on the classpath for users to provide custom properties files."""" is a user story, and is worth 8 story points because it is most similar to: As a field engineer i'd like to have reference architectures built on spring xd so that i can use that as reference building pocs. the scope is to get the raw domain specific ideas captured as first step. and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Correctly report state of module instances currently only the started application (and application instance) status is recognised. this issue will look at the other possible states and report them as module instance states. this would be trivial if we knew what the possible states might be and how we should interpret them for module instance state."""" is a not user story because it is most similar to: """"Make rabbitmessagebus rabbitmq config properties optional when the bus is used outside of the xd container (e.g. spring-bus) the inheritance from spring boot configuration is broken (no application.yml or servers.yml on the cp). make the bus properties optional (add """":"""")"""" and similar to """"Review dsl updated story points to 14 since 5 of us just participated in a 2 hour call and we still need to discuss """"topology"""" support after some dev spikes later this week"""" and similar to """"Update source syslog section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#syslog"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to refer to 'job orchestration' documentation so i can use it as guideline for building batch workflows."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Reorganize toc for manual here is a strawman {noformat} getting started (rather meaty compared to other top level sections maybe have a section - running in singlenode) * running in distributed mode * running on yarn *application configuration message bus configuration monitoring and management technical documentation architecture distributed runtime (remove 'xd' prefix) interactive shell batch jobs streams modules tuples sources processors analytics sinks taps type conversion deployment (better name?) best practices (new section) admin ui dsl reference rest api samples {noformat}"""" is a not user story because it is most similar to: """"Create assertion to get count of messages processed by a specific module in a stream the modules are exposed via jmx and in turn exposed over http via jolokia. see https://jira.springsource.org/browse/xd-343. this issue is to develop a helper method that given a stream id and/or module name assert that the number of messages processed after sending stimulus messages is as expected. e.g. int originalcount = getcount(""""teststream"""" """"file"""") //do stuff that generates 100 messages assertcount(""""teststream"""" """"file"""" 100 originalcount) for now we can assume we know the location of where the modules are located by assuming we have only one container deployed."""" and similar to """"Create design document for implementation strategy to support message conversion in channelregistry the conversion should be based on content-type headers similar to the way spring's httpmessageconverters work (with mime types). also the map of available converters should be extensible while including the most common defaults (for json xml etc). we most likely want to add a few of our own content types also (e.g. for tuples). most likely this logic and the configuration methods for extending the converter map belong in abstractchannelregistry since it should be common across all implementations (i.e. the logic should be the same regardless of the transport used after-serialization/before-deserialization)."""" and similar to """"Assess if gemfirejsonserver & gemfireserver sinks should close the client cache * os - mac * xd deployment type - singlenode * sha - bb4dd58 * required software - xd gemfire sample server [description] after creating and destroying 3 streams with gemfirejsonserver sink the 4th will fail with this error: * 44707 refused connection: the number of clients 4 exceeded the limit of 3 allowed by the default evaluation license. [steps to reproduce] * from your shell execute the following 4 times: ** stream create --name stocks --definition """"http --port=9090 | gemfire-json-server --regionname=stocks --host=ec2-54-221-32-82.compute-1.amazonaws.com --port=40404 --keyexpression=payload.getfield('symbol')"""" --deploy ** stream destroy stocks"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-s developer i'd like to support xd-like features where modules bind to incoming messages via expressions or other mechanism so i can bind message properties to every microservice modules."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"When creating a job with the fixed-delay parameter in the shell command fails need to change the name from fixed-delay to fixed_delay or fixeddelay. system rejects the '-'."""" is a not user story because it is most similar to: """"Modify startup script of xdadmin/xdcontainer to allow specifying hadoop distro to use we need to modify startup script to use hadoop 1.1.2 as default or phd1 when specified with --hadoopdistro=phd1"""" and similar to """"Jmx endpoints not functioning i cannot access the jmx/jolokia endpoints using the spring boot rc1 and snapshot. works with xd-m5 and boot-m7"""" and similar to """"Remove spring-xd-analytics-ml-pmml project and module xml - to be put in seperate repository agpl license issues"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Assess xd fails to connect to remote redis instance deployment: admin/container redis as data transport sha: 45e1beb [description] in the case that the redis is not running locally xd cannot connect to the redis instance even though the environment variable spring_redis_host has been set. [steps to reproduce] * shutdown local instance of redis. * for both the admin and container execute the command prior to running the instances: ** export spring_redis_host=yourredishost * start admin and container instances * deploy a simple stream ** you will see the following error: 13:56:59647 error task-scheduler-9 handler.logginghandler:145 - org.springframework.messaging.messagehandlingexception: error occurred in message handler [org.springframework.integration.redis.outbound.redisqueueoutboundchanneladapter@6a1f1d12] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:84) org.springframework.xd.dirt.integration.redis.redismessagebus$sendinghandler.handlemessageinternal(redismessagebus.java:235) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.directchannelmetrics.monitorsend(directchannelmetrics.java:113) org.springframework.integration.monitor.directchannelmetrics.doinvoke(directchannelmetrics.java:97) org.springframework.integration.monitor.directchannelmetrics.invoke(directchannelmetrics.java:91) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy57.send(unknown source) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:93) org.springframework.integration.endpoint.sourcepollingchanneladapter.handlemessage(sourcepollingchanneladapter.java:110) org.springframework.integration.endpoint.abstractpollingendpoint.dopoll(abstractpollingendpoint.java:205) org.springframework.integration.endpoint.abstractpollingendpoint.access$000(abstractpollingendpoint.java:55) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:149) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:146) org.springframework.integration.endpoint.abstractpollingendpoint$poller$1.run(abstractpollingendpoint.java:284) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) org.springframework.core.task.synctaskexecutor.execute(synctaskexecutor.java:50) org.springframework.integration.util.errorhandlingtaskexecutor.execute(errorhandlingtaskexecutor.java:49) org.springframework.integration.endpoint.abstractpollingendpoint$poller.run(abstractpollingendpoint.java:278) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:54) org.springframework.scheduling.concurrent.reschedulingrunnable.run(reschedulingrunnable.java:81) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:745) caused by: org.springframework.data.redis.redisconnectionfailureexception: cannot get jedis connection nested exception is redis.clients.jedis.exceptions.jedisconnectionexception: could not get a resource from the pool org.springframework.data.redis.connection.jedis.jedisconnectionfactory.fetchjedisconnector(jedisconnectionfactory.java:97) org.springframework.data.redis.connection.jedis.jedisconnectionfactory.getconnection(jedisconnectionfactory.java:143) org.springframework.data.redis.connection.jedis.jedisconnectionfactory.getconnection(jedisconnectionfactory.java:41) org.springframework.data.redis.core.redisconnectionutils.dogetconnection(redisconnectionutils.java:85) org.springframework.data.redis.core.redisconnectionutils.getconnection(redisconnectionutils.java:55) org.springframework.data.redis.core.redistemplate.execute(redistemplate.java:169) org.springframework.data.redis.core.redistemplate.execute(redistemplate.java:149) org.springframework.data.redis.core.abstractoperations.execute(abstractoperations.java:84) org.springframework.data.redis.core.defaultlistoperations.leftpush(defaultlistoperations.java:68) org.springframework.data.redis.core.defaultboundlistoperations.leftpush(defaultboundlistoperations.java:60) org.springframework.integration.redis.outbound.redisqueueoutboundchanneladapter.handlemessageinternal(redisqueueoutboundchanneladapter.java:109) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ... 43 more caused by: redis.clients.jedis.exceptions.jedisconnectionexception: could not get a resource from the pool redis.clients.util.pool.getresource(pool.java:42) org.springframework.data.redis.connection.jedis.jedisconnectionfactory.fetchjedisconnector(jedisconnectionfactory.java:90) ... 54 more caused by: redis.clients.jedis.exceptions.jedisconnectionexception: java.net.connectexception: connection refused redis.clients.jedis.connection.connect(connection.java:142) redis.clients.jedis.binaryclient.connect(binaryclient.java:75) redis.clients.jedis.binaryjedis.connect(binaryjedis.java:1724) redis.clients.jedis.jedisfactory.makeobject(jedisfactory.java:65) org.apache.commons.pool2.impl.genericobjectpool.create(genericobjectpool.java:819) org.apache.commons.pool2.impl.genericobjectpool.borrowobject(genericobjectpool.java:429) org.apache.commons.pool2.impl.genericobjectpool.borrowobject(genericobjectpool.java:360) redis.clients.util.pool.getresource(pool.java:40) ... 55 more caused by: java.net.connectexception: connection refused java.net.plainsocketimpl.socketconnect(native method) java.net.abstractplainsocketimpl.doconnect(abstractplainsocketimpl.java:339) java.net.abstractplainsocketimpl.connecttoaddress(abstractplainsocketimpl.java:200) java.net.abstractplainsocketimpl.connect(abstractplainsocketimpl.java:182) java.net.sockssocketimpl.connect(sockssocketimpl.java:392) java.net.socket.connect(socket.java:579) redis.clients.jedis.connection.connect(connection.java:137) ... 62 more"""" and """"A batch job can be launched by sending a message on a channel *description* when a job is ‘created’ in springxd a ‘control-channel’ for that job is also created. the listener for that channel will receive a message be able to take the ‘jobparameters’ and other launch information from the message and be able to launch/run the job. note: i can see a few other stories that should probably be made to break this up after writing it. i put estimate of 10 for now but we should break this up. here are some suggestions 1. create ‘data only’ jobparametersbean equivalent with primitive types 2. create joblauncher source 3. create jobparametertransformer processor 4. refactoring of channelregistry’s aliashing to use a callback strategy. *implementation suggestions* job create --name helloworldjob --definition """"myjob --somepropertytooverride=somevalue * this would not execute the batch job immediately but instead register the job definition and deploys a “joblauncher�? and the job definition to an xd-container. * the xd-container that receives the deploy request message will create a module application context will also create a channel with the channel registry named after the job e.g. :myjob. this should be a pub/sub channel from the point of view of the middleware. from the point of view of the spring integration channel it should ideally be of the executor channel. there is a limitation in the current implementation of channelregistry now as ‘createinbound’ only creates direct channels. the boolean ‘aliashint’ should probably be extended to some type of callback that creates a channel. the aliashint was added to address the case of localchannelregistry creating or looking up a queue backed channel or a direct channel. there will be a consumer on the si channel in the module application context that will be responsible for getting the job launch information and launching the job. the launching of the job may need to be explicitly done in a separate thread if direct channels are created by the channelregistry. the contents of the message should be something similar to the current “jobparametersbean�? it needs to be easily serializable with simple types via json over the wire. the current impl of “jobparametersbean�? has objectmapper so that may require a bit of reworking. the handler of the message will use the joblauncher to launch the job using the information in the jobparametersbean. * the ‘myjob’ can then be launched by sending a message perhaps this is handled by having a joblauncher source joblauncher [--jobparameters <jobparameters>] [--dateformat <dateformat>] [--numberformat <numberformat>] [--makeunique <makeunique>] > :myjob e.g. with no-args joblauncher > :myjob *how to verify it works* with the test hellospringxdtasklet we should be able to create the job job create --name hellospringxd --definition """"myjob"""" this will not launch the job (as mentioned in the ‘implementation’ section. it would then be launched by joblauncher > :myjob where joblauncher is a new source. ideally would like to be able to test a data driven triggering. this would require a new file source that doesn’t use the file-to-string-transformer but lets a file object be the payload. file | jobparametertransformer > :myjob"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Command to list taps"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to continue xd-on-lattice/diego poc and will be focused on the design of a pluggable spi so it is more generally applicable than lattice with the receptor api being just one implementation option."""" is a not user story because it is most similar to: """"Batch basic fails to launch job when rabbit is data transport deployed the batch basic as instructions prescribe. tests work for both singlenode and redis as a data transport. however while the job does deploy using rabbit it does not launch."""" and similar to """"Add job rdbms config in ambari plugin spring xd ambari plugin only supports hdb as job db. hdb is not good in production environment. it will be great if we can specify rdb in spring xd installation/config process."""" and similar to """"Consolidate rest endpoints for batch resources under /jobs currently we have /batch and /jobs. everything should move to /jobs. see https://github.com/spring-projects/spring-xd/wiki/rest-api for details."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Mqtt: support the new spring integration 4.1 features ha configuration async sends. http://docs.spring.io/spring-integration/reference/html/whats-new.html#4.1-mqtt"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to use ambari plugin so that i can provision manage and monitor spring xd cluster using the same tool i use for hadoop clusters. and similar to """"As a developer i'd like to design and document the approach towards deploying stream in a single container so i can have all modules within a stream colocated."""" and similar to """"As a user i'd like to have the option of _batching_ for the rabbit _sink_ so that i can write data in batches as opposed to one-at-a-time."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-d developer i'd like to have {{module info}} {{module list}} {{module register}} and {{module unregister}} commands so i can interact with {{moduleregistry}}."""" is a not user story because it is most similar to: """"Remove spring-xd-codec from spring xd source tree and build replace with spring-cloud-streams (or spring-cloud-streams-codec) dependency"""" and similar to """"Consolidate trigger sources into a single source currently we have 2 trigger sources: trigger & cron-trigger. the preference is to have a user to just use a single trigger source. for example: * trigger > :myjob * trigger --cron='...' >:myjob * trigger --fixeddelay='...' > :myjob one option to handle this is to use spel to reference a bean and then have different trigger beans defined. i.e. trigger='crontriggerbean'. each trigger bean would setup the channel with the correct poller."""" and similar to """"Modules need to validate their parameters at create time. we need to fail fast."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to port {{aggregate-counter}} module from xd to s-c-s repo so i can use it as {{sink}} module to build streaming pipeline."""" is a not user story because it is most similar to: """"Remove spark and hadoop dependencies from custom module classpath remove spark and hadoop requirements from spring-xd-module-parent and gradle module plugin"""" and similar to """"Version xd dependencies with spring io platform versioning all the xd artifacts dependencies need to be updated with the versions that in line with spring io platform's standard versioning."""" and similar to """"Move binder to scs project move project out of https://github.com/pperalta/geode-scdf into https://github.com/spring-cloud/spring-cloud-stream"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"New libraries to experiment we would like to experiment with open source libraries to further enrich spring xd’s service offerings and feature-set. this epic remains the anchor point for following categories and the respective experimentation outcomes will be documented in the associated stories. * measure based alerts * log analysis * machine learning and graph computation"""" is a not user story because it is most similar to: """"Spring-xd-module-parent creates resources outside of target folder custom modules that use {code} <groupid>org.springframework.xd</groupid> <artifactid>spring-xd-module-parent</artifactid> <version>1.1.0.release</version> {code} as a parent will get a """"lib"""" directory created in the module root source directory. this forces us to add additional ignores in version control system. following maven convention all build files should be created under """"target"""" folder so """"lib"""" folder should be created as """"target/lib""""."""" and similar to """"Create google doc with instructions on managing ec2 instances * logging into your xd account for example: https://946513944028.signin.aws.amazon.com/console * discuss how to terminate running instances. ** users can terminate all instances using the ui on the ec2 admin page * usage monitoring via cloudwatch * investigate what metadata in each instance is required so that cloudwatch can track"""" and similar to """"Have resourcemoduleregistry transparently proxy a remote root thru filesystem archivemoduleregistry and the use of boot archives inherently relies on java.io.file have resourcemoduleregistry extend/compose archivemr to transparently download and cache (remote) jars that may be located in a (non-file:) location. the staging area should be customizable but some subdir of java.io.tmpdir sounds like a sensible default"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create jdbc sink we need a jdbc sink for writing to hawq (using int-jdbc:outbound-channel-adapter and postgresql jdbc driver)"""" is a not user story because it is most similar to: """"Job execution list should mention jobs that have been deleted create a job execute it a couple of times destroy it and then invoke job execution list. the job name column should mention that a job is defunct (even though a job with the same name could have been re-created in the interim)"""" and similar to """"Update documentation for kafka sources include new features added by using spring integration kafka m3"""" and similar to """"Optimize abstractsinglenodestreamdeploymentintegrationtests xd singlenode currenly initialized in @before should be @beforeclass. in this case must be re-initialized for each transport but not for each @test."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Introduce wire.js into the xd admin ui we should consider moving to wire.js to encourage dependency injection in the ui javascript code. see here: https://github.com/cujojs/wire/blob/master/docs/get.md"""" is a not user story because it is most similar to: """"Improve resilience of route creation/removal the cf implementation requires that a route be created for each new app. this works fine on the happy path but is brittle. for example it will fail if the route required already exists."""" and similar to """"Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice"""" and similar to """"Postgresql server.yml options ignored {{p-spring-xd}} defines values for the following parameters in {{servers.yml}}. these values are not being retrieved and hence have to be manually added to each stream definition. * {{url}} * {{username}} * {{password}} * {{driverclassname}} * {{validationquery}} (cf xd-2675 xd-2741)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Creating a tap with same name as existing streams results in infinite loop see http://stackoverflow.com/questions/17157068/counter-analytics-in-springxd the underlying issue is stream creation with a name already taken though"""" is a not user story because it is most similar to: """"Investigate job event listeners when the job is created as java config when the job module is configured using java config there seems to be some issue with the way out of the box job event listeners are created. please see the discussion here: https://github.com/spring-projects/spring-xd/pull/1506"""" and similar to """"Verify platform compatibility versions with the xd dependencies we need to make sure there is no conflicting/missing dependency with build.gradle using spring io platform dependencies. https://jira.spring.io/browse/xd-1929 is one such scenario where jolokia dependency went missing."""" and similar to """"Dsl needs to have wildcard support for taps wildcard support for associating inbound and outbound channels with modules. the wild card will be represented by an asterisk '*'. example: myemailsource > tap:job:* send message to all jobs myemailsource > tap:* send message to all stream/job taps myemailsource > :*foo* send message to all channels that contain the channels that contains the word 'foo' tap:*bar > myemailsource"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Commandline default values from container & admin options can not be overridden if we have default values from container/admin options then they can not be overridden by the system properties or system environment. currently the only default we have for the container/admin options is for """"jmxenabled"""" option and since it is a boolean it can never be overridden by sys/env property xd_jmx_enabled. i think we need to make sure there are no default values assigned for the non-boolean container/admin options and handle the boolean type option separately."""" is a not user story because it is most similar to: """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Automate execution of gradle pushgenerateddocs should be part of the daily build. one """"easy"""" way to do it would be to use the """"hardcoded"""" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Don't perform error-level logging for normal application behavior in batch admin functionality assumption: the batch job *wordcountjob* does not exist. executing the rest endpoint: http://localhost:9393/batch/jobs/wordcountjob/executions yields the correct response: {code} <errors xmlns:atom=""""http://www.w3.org/2005/atom""""> <error logref=""""nosuchbatchjobexception""""> <message> batch job with the name wordcountjob.job doesn't exist </message> </error> </errors> {code} one could argue though that this is technically not an error but a status/application message no?? however the console/log logs at error level with a full stacktrace. i think the full stacktrace should only be available when debugging is allowed. in normal mode i think we should log only at info or warn level without the full stacktrace."""" is a not user story because it is most similar to: """"Create design document for implementation strategy to support message conversion in channelregistry the conversion should be based on content-type headers similar to the way spring's httpmessageconverters work (with mime types). also the map of available converters should be extensible while including the most common defaults (for json xml etc). we most likely want to add a few of our own content types also (e.g. for tuples). most likely this logic and the configuration methods for extending the converter map belong in abstractchannelregistry since it should be common across all implementations (i.e. the logic should be the same regardless of the transport used after-serialization/before-deserialization)."""" and similar to """"Investigate failing tests in mailcommandtest org.springframework.xd.shell.command.mailcommandtests in spring-xd-shell project. i get failures relating to invalid username/password info: stream name stream definition status ----------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -------- mailstream imap --port=1044 --protocol=imap --folder=inbox --username=johndoe --password=secret | file --dir=/tmp --name=filesink1280066074228960855 --suffix=txt --charset=utf-8 --binary=false deployed 13/09/04 11:32:11 warn mail.imapidlechanneladapter: error occurred in idle task javax.mail.authenticationfailedexception: login failed. invalid login/password at com.sun.mail.imap.imapstore.protocolconnect(imapstore.java:663)"""" and similar to """"Controllers - disallow negative pagesize values currently you can specify negative pagesize values - the controllers should validatate that. right now an internal exception is being return leaking internal details to the caller - e.g.: **http://localhost:9393/batch/executions?pagesize=-1** results in: {code} <errors> <error logref=""""badsqlgrammarexception""""> <message> statementcallback bad sql grammar [select top -1 e.job_execution_id e.start_time e.end_time e.status e.exit_code e.exit_message e.create_time e.last_updated e.version i.job_instance_id i.job_name from batch_job_execution e batch_job_instance i where e.job_instance_id=i.job_instance_id order by e.job_execution_id desc] nested exception is java.sql.sqlsyntaxerrorexception: user lacks privilege or object not found: top </message> </error> </errors> {code}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Classnotfoundexception: o.s.social.twitter.api.tweet with rabbit-transport using rabbit as a transport i get the below error when creating the following stream: {code} stream create mytweets --definition """"twittersearch --query='spring' | log"""" --deploy true {code} in local mode the stream executes just fine. of course it works with *--outputtype=application/json*. nevertheless i was not expecting that exception (see below) issue was also verified by [~grenfro]. {code} org.springframework.amqp.rabbit.listener.listenerexecutionfailedexception: listener threw exception org.springframework.amqp.rabbit.listener.abstractmessagelistenercontainer.wraptolistenerexecutionfailedexceptionifneeded(abstractmessagelistenercontainer.java:758) org.springframework.amqp.rabbit.listener.abstractmessagelistenercontainer.doinvokelistener(abstractmessagelistenercontainer.java:653) org.springframework.amqp.rabbit.listener.abstractmessagelistenercontainer.invokelistener(abstractmessagelistenercontainer.java:576) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer.access$001(simplemessagelistenercontainer.java:75) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer$1.invokelistener(simplemessagelistenercontainer.java:154) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.retry.interceptor.retryoperationsinterceptor$1.dowithretry(retryoperationsinterceptor.java:69) org.springframework.retry.support.retrytemplate.doexecute(retrytemplate.java:255) org.springframework.retry.support.retrytemplate.execute(retrytemplate.java:162) org.springframework.retry.interceptor.retryoperationsinterceptor.invoke(retryoperationsinterceptor.java:87) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy102.invokelistener(unknown source) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer.invokelistener(simplemessagelistenercontainer.java:1111) org.springframework.amqp.rabbit.listener.abstractmessagelistenercontainer.executelistener(abstractmessagelistenercontainer.java:559) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer.doreceiveandexecute(simplemessagelistenercontainer.java:904) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer.receiveandexecute(simplemessagelistenercontainer.java:888) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer.access$500(simplemessagelistenercontainer.java:75) org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer$asyncmessageprocessingconsumer.run(simplemessagelistenercontainer.java:989) java.lang.thread.run(thread.java:745) caused by: org.springframework.messaging.messagehandlingexception: error occurred in message handler [se.0.convert.bridge] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:84) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:93) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:98) org.springframework.integration.amqp.inbound.amqpinboundchanneladapter.access$400(amqpinboundchanneladapter.java:44) org.springframework.integration.amqp.inbound.amqpinboundchanneladapter$1.onmessage(amqpinboundchanneladapter.java:90) org.springframework.amqp.rabbit.listener.abstractmessagelistenercontainer.doinvokelistener(abstractmessagelistenercontainer.java:650) ... 24 more caused by: org.springframework.xd.dirt.integration.bus.serializer.serializationexception: unable to deserialize [null]. class not found. org.springframework.xd.dirt.integration.bus.messagebussupport.deserializepayload(messagebussupport.java:381) org.springframework.xd.dirt.integration.bus.messagebussupport.deserializepayload(messagebussupport.java:363) org.springframework.xd.dirt.integration.bus.messagebussupport.deserializepayloadifnecessary(messagebussupport.java:346) org.springframework.xd.dirt.integration.rabbit.rabbitmessagebus.access$500(rabbitmessagebus.java:70) org.springframework.xd.dirt.integration.rabbit.rabbitmessagebus$receivinghandler.handlerequestmessage(rabbitmessagebus.java:448) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:170) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ... 37 more caused by: java.lang.classnotfoundexception: org.springframework.social.twitter.api.tweet java.net.urlclassloader$1.run(urlclassloader.java:366) java.net.urlclassloader$1.run(urlclassloader.java:355) java.security.accesscontroller.doprivileged(native method) java.net.urlclassloader.findclass(urlclassloader.java:354) java.lang.classloader.loadclass(classloader.java:425) sun.misc.launcher$appclassloader.loadclass(launcher.java:308) java.lang.classloader.loadclass(classloader.java:358) java.lang.class.forname0(native method) java.lang.class.forname(class.java:190) org.springframework.xd.dirt.integration.bus.messagebussupport.deserializepayload(messagebussupport.java:375) ... 43 more {code}"""" and """"Db.password not being passed when sqoop job --create called from spring-xd batch job created a single definition sqoop job --create statement. when processed through sqoop direct (see attach image for props in repos. jobname sqoop2) notice: job definition set db.require.password = false and has a propname called db.password that holds the value for password. when same definition is created as a batch job via spring-xd (see image jobname lookupd_job) the db.require.password prop is set to """"true"""" and the db.password is not even created as a row. this causes a password prompt when trying to execute the job in sqoop direct that was created via a spring-xd batch job. note the job definition for spring-xd job contains meta-connect with username and password defined as well as import jdbc: --connect username and password. when created via sqoop (no spring-xd) password is stored and job is able to execute with no prompt. please see attachment for repository job values. highlighted in yellow is the discrepant property and value attribution. please reach out if there are questions or need further details. to automate spring-xd batch job using sqoop via spring we can not be prompted for password. spring-xd job definition: job create sqoop_lookup_d_job_v1 --definition """"sqoop --command=job --args='--create lookupd_job --meta-connect \""""jdbc:postgresql://xx.xxx.xx.xx:5433/bdl?user=xxxxx&password=xxxxxx\"""" -- import --connect jdbc:oracle:thin:@xxxxxx.com:xxxx/gdwp --username xxxxx --password xxxxx --query \""""select row_wid lkup_id trim(translate(lkup_cd chr(10)||chr(13) ''-'')) as lkup_cd trim(translate(lkup_desc chr(10)||chr(13) ''-'')) as lkup_desc trim(translate(lkup_type chr(10)||chr(13) ''-'')) as lkup_type trim(translate(lkup_val chr(10)||chr(13) ''-'')) as lkup_val src_strt_dt src_end_dt w_insert_dt w_update_dt from masterdata.w_lookup_d where 1=1 and $conditions\"""" --incremental append --check-column row_wid --last-value 10150 --target-dir /user/monasj1/bdl/data/sqoop/jobtest --num-mappers 1 --fields-terminated-by \""""|\"""" --append'"""" sqoop direct definition: sqoop job --create sqoop2 --meta-connect 'jdbc:postgresql://xx.xxx.xx.xx:5433/bdl?user=xxxxx&password=xxxxxx' -- import --connect jdbc:oracle:thin:@xxxxxx.com:xxxx/gdwp --username xxxxx --password xxxxx --query """"select row_wid lkup_id trim(translate(lkup_cd chr(10)||chr(13) '-')) as lkup_cd trim(translate(lkup_desc chr(10)||chr(13) '-')) as lkup_desc trim(translate(lkup_type chr(10)||chr(13) '-')) as lkup_type trim(translate(lkup_val chr(10)||chr(13) '-')) as lkup_val src_strt_dt src_end_dt w_insert_dt w_update_dt from masterdata.w_lookup_d where 1=1 and \$conditions """" --incremental append --check-column row_wid --last-value 10150 --target-dir /user/monasj1/bdl/data/sqoop/jobtest --num-mappers 1 --fields-terminated-by '|' --append"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Rest - listing of fieldvaluecounter not working http://localhost:8080/metrics/field-value-counters {code} <errors xmlns:atom=""""http://www.w3.org/2005/atom""""> <error logref=""""httpmessagenotwritableexception""""> <message> could not marshal [pagedresource { content: [links: [<http://localhost:8080/metrics/field-value-counters/hashtags>rel=""""self""""]] metadata: metadata { number: 0 total pages: 1 total elements: 1 size: 0 } links: [] }]: null nested exception is javax.xml.bind.marshalexception - with linked exception: [com.sun.istack.saxexception2: unable to marshal type """"org.springframework.xd.rest.client.domain.metrics.metricresource"""" as an element because it is not known to this context.] </message> </error> </errors> {code}"""" is a not user story because it is most similar to: """"Assess if gemfirejsonserver & gemfireserver sinks should close the client cache * os - mac * xd deployment type - singlenode * sha - bb4dd58 * required software - xd gemfire sample server [description] after creating and destroying 3 streams with gemfirejsonserver sink the 4th will fail with this error: * 44707 refused connection: the number of clients 4 exceeded the limit of 3 allowed by the default evaluation license. [steps to reproduce] * from your shell execute the following 4 times: ** stream create --name stocks --definition """"http --port=9090 | gemfire-json-server --regionname=stocks --host=ec2-54-221-32-82.compute-1.amazonaws.com --port=40404 --keyexpression=payload.getfield('symbol')"""" --deploy ** stream destroy stocks"""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" and similar to """"Update launcher.xml to have protocol independent beans defined and an import statement to load protocol specific defintiions from a system property defined location. launcher.xml can make use of the system property xd.pipeprotocol inside an import statement. this determines which version of the xd infrastructure to load for example what channelregistry implementation local or redis based or specific message listener containers. file name conventions should be used so if the option passed in from the command line is --pipeprotocol localchannel then the xml filename looked for has the 'protocol' suffix applied e.g. localchannelprotocol and is loaded via the classpath. redis and local will not be the only options other implementations will be provided in the future e.g. rabbit and the user may be able to provide their own implementations of these infrastructure classes (an advanced task)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Improve e2e test coverage"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create mock on distributedjobservice instead of instantiating object currently the tests use instantiated distributedjobservice object instead of a simple mock. we can just use mock object for the tests."""" is a not user story because it is most similar to: """"Create documentation for batch db migration update documentation related to database migration with the changes from xd-1822"""" and similar to """"Add ability to launch job composition h2. narrative verify that the job launch works as we expect for the composed job."""" and similar to """"Move jmx endpoints from /jolokia to management/jolokia update code to use the management/jolokia endpoint."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Fix xd scripts on windows currently the xd scripts are broken in windows."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to have the option of extending the trigger abstraction so that i can implement my own trigger."""" and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to bench rabbit on rackspace infrastructure so i can have a sense on how it scales as we add more _xd-container_ nodes."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Error in correlation strategy in aggregator.xml {noformat} correlation-strategy-expression=""""${correlation:'${xd.stream.name}}'"""" {noformat} should be {noformat} correlation-strategy-expression=""""${correlation:'${xd.stream.name}'}"""" {noformat} add a test to make sure correlation expressions here work."""" is a not user story because it is most similar to: """"Rename channelregistry my current thinking is... channelregistry -> messagebus rabbitchannelregistry -> rabbitmessagebus ... then method names change like so: createinbound -> registerconsumer createoutbound -> registerproducer"""" and similar to """"Rabbit bus: expose channelcachesize on cachingconnectionfactory http://stackoverflow.com/questions/35563064/processing-messages-through-namedchannels-with-prefetch-1/35584333#35584333"""" and similar to """"Provide option for sources/sinks to configure mapped headers to/from messages see the discussion: https://gopivotal-com.socialcast.com/messages/20771872"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to move {{reactor-ip}} module from xd to s-c-s repo so i can use it as source to build streaming pipeline."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to move {{hdfs-dataset}} module from xd to s-c-s repo so i can use it as sink to build streaming pipeline. and similar to """"As a spring xd developer i'd like to port sftp module from xd to s-c-s repo so i can use it as source modules to build streaming pipeline."""" and similar to """"As a spring xd developer i'd like to port {{analytic-pmml}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: [scs] - replace binder xml config with @configuration create confguration and configurationproperties. configuration must support replacing the default kryo codec implementation with something else."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd user i want to have the ability to customize the encoders and decoders used by the kafka source sink and bus so that i can customize data formats and choose the most appropriate strategy and similar to """"As a developer i'd like to configure hadoop_user_name environment variable to implement and run-as-user for kerberos secured clusters. this would need some additional work in shdp."""" and similar to """"As a user i'd like to type the _username_ and _password_ to gain access to admin server so that i don't have to add it in some file hence i don't have to worry about having the password getting logged somewhere."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Refactor cloudfoundryapplicationfactory this class should not know what the test app is. this means changing the constructors on cloudfoundryapplication."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add jetty-util-6.1.26.jar and jsr311-api-1.1.1.jar as required jars so they will be on the xd classpath this is needed for the use of the webhdfs:// scheme to talk to hdfs over http."""" is a not user story because it is most similar to: """"The new scsm twitterstream module should produce same json as old xd source the new scsm twitterstream module uses a different format than xd 1.x source module. it should match what twitter uses so existing processors etc. will continue to work."""" and similar to """"Add job rdbms config in ambari plugin spring xd ambari plugin only supports hdb as job db. hdb is not good in production environment. it will be great if we can specify rdb in spring xd installation/config process."""" and similar to """"Support spark streaming processor/sink specific module options currently the module options provided for spark streaming processor/sink modules use the same defaultsparkstreamingmoduleoptionsmetadata. since we start adding new module options for processor/sink specific modules it would be better if we expose specific moduleoption classes so that would help the implementing developers."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Investigate classloading leakage using the gemfire module as an example there is currently at least two sources of leakage retaining classes that are loaded by the module classloader (and hence everything from there). one of them is because of jmx monitoring. another one i'm not sure about but here is a screenshot"""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Modularize angular app modules based on the functionality when adding streams page to the ui (from xd-1667) it is necessary to modularize the angular app modules based on the functionality/components (job stream auth etc.). as we expand into more components and use cases in the ui this definitely makes it easier to concentrate on specific modules based on the functionality."""" is a not user story because it is most similar to: """"Rpm upgrades should not to wipe-out previous installation configs/settings as an operator i'd like to upgrade to the latest releases of spring xd and yet not lose the older installation {{dirs}}/{{files}} so i can copy and reuse the previously used {{servers.yml}} configurations."""" and similar to """"Replace usage of 'raw' curl with shell command to post http data in documentation e.g. http://localhost:8080:>post httpsource --target http://localhost:9090 --data 10 i believe this will also help to avoid ugly syntax to escaping quotes for json as in the gemfire example."""" and similar to """"Add aliases concept to module options and use in composed modules following merge of https://github.com/spring-projects/spring-xd/pull/601 allow a module option to be known by several names and elect a short name in composed module options when there is no ambiguity"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to mass ingest data from databases (and others) into hdfs/hawq/gpdb so that i don't have to write custom code and as well as be able to ingest in an efficient way."""" is a not user story because it is most similar to: """"Provide cmdline options validation wherever they come from (cmd line args or env_vars) options such as transport analytics etc should be validated and issues should be reported to users"""" and similar to """"Update documentation for module launcher the s-c-s-module-launcher document requires update for running it on standalone docker lattice. also the docker-compose yml requires fix so that modules in there are bound together."""" and similar to """"Fix section headers in reference toc see: http://docs.spring.io/spring-xd/docs/current-snapshot/reference/html/#_introduction_26 there should be chapter/section title before this."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Clean up unused json mapping classes there are a few obsolete classes lurking around typedjsonmapper comes to mind but there are likely some others"""" is a user story, and is worth 2 story points because it is most similar to: As a user i should be able to use the existing admin ui client for spring-cloud-data admin with the appropriate server configurations. and similar to """"As a developer i'd like to port {{log}} module from xd to s-c-s repo so i can use it as {{sink}} modules to build streaming pipeline."""" and similar to """"As a s-c-d developer i'd like to move {{kafka}} module from xd to s-c-s repo so i can use it as {{sink}} to build streaming pipeline."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create asciidoc toolchain script to create a 'toc2' style html output publishing an html version of the guide that uses the 'toc2' style format table of contents on the left. looks like a 'stylesheet factory' http://asciidoctor.org/docs/produce-custom-themes-using-asciidoctor-stylesheet-factory/ needs to be installed. from the theme showcase http://themes.asciidoctor.org/preview/ the 'golo' theme has a toc2 style. in the root of the git repo for the wiki is a build.gradle file that uses the asciidoctor gradle plugin but it doesn't support using a single file with import as input. (see see https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/15 ) the mvn plugin does support this so maybe using mvn is an option or just a bash script."""" is a not user story because it is most similar to: """"Bind producer before consumer {quote} here is the full exception: org.springframework.messaging.messagedeliveryexception: dispatcher has no subscribers for channel 'resourceconfiguredmodule [name=filter type=processor group=request-rate index=0 @58b0f318]:use-expressiondefaultadminsinglenodehsqldbserver:9393.output'. nested exception is org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers and here is that stream: topic:httpstartstop > filter --expression=payload.gethttpstartstop().getpeertype().name().equals('client') | requestrateaggregator | appmetricssplitter | router --expression='topic:app-request-rate-'+#jsonpath(payload'$.appid') [2:59 pm] gary russell: @markfisher @ilayaperumalgopinathan @patrickperalta this looks like another (not fixed by the previous fix) timing problem with taps when using singlenode. the tap is started before the tap stream is deployed. but it's not clear to me how the filter module could be deployed/bound as a consumer before the requestrateaggregator [3:08 pm] gary russell: i see the problem: abstractmessagebusbinderplugin.bindconsumerandproducers() binds the consumer before the producer - this is the wrong order for a passive component such as the filter. /cc @davidturanski {quote}"""" and similar to """"Output modules cannot use minpartitioncount when sending to named channels if the output module is connected to a named channel cannot be set up the property minpartitioncount it is giving an exception. streams: stream create f --definition """"queue:foo > transform --expression=payload+'-foo' | log"""" stream create b --definition """"queue:bar > transform --expression=payload+'-bar' | log"""" stream deploy --name f --properties """"module.transform.count=2"""" stream deploy --name b --properties """"module.transform.count=2"""" stream create r --definition """"time | router --expression=payload.contains('10')?'queue:foo':'queue:bar'"""" stream deploy --name r --properties """"module.router.producer.minpartitioncount=20"""" the error is: caused by: java.lang.illegalargumentexception: kafkamessagebus does not support producer property: minpartitioncount for queue:bar. at org.springframework.xd.dirt.integration.bus.messagebussupport.validateproperties(messagebussupport.java:781) ~[spring-xd-messagebus-spi-1.2.1.release.jar:1.2.1.release]"""" and similar to """"Spike for matching algorithm for stream/job deployments and nodes base matching algorithm on the model used in http://research.cs.wisc.edu/htcondor/ jobs/stream - specify their requirements and preferences nodes - specify their requirements and preferences e.g. a job/stream module """"requires"""" a linux x85-64 platform and """"prefers"""" the machine with the most free memory a node """"requires"""" that only only can run jobs when there is 25% or more free memory and it """"prefers"""" to run stream modules over job modules. the requirements and preferences are represented as spel expressions in a """"advertisement"""" data structure. there is a 'require' expression and a 'preference' expression. matching occurs between node ads and job/stream ads so that the requirements of both ads evaluate to true and the matching nodes are ranked according to the preference expression. the job/streams ads can make use of well defined attributes about the nodes such as it's memory/cpu usage."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to be able to clean rabbit binder broker artifacts using the rest api. when the rabbit bus was ported from xd the bus cleaner was ported as {{rabbitbindingcleaner}} but the rest api to invoke it was not ported over."""" is a not user story because it is most similar to: """"Create reactormessagehandler for reactor based xd processor/sink modules the module should be flexible to act as a sink as well as a processor. errorhandling will be considered as part of another jira"""" and similar to """"Create links to springxd on other pages of springsource.org site bottom home page - list of projects data/integration category landing pages - related projects."""" and similar to """"Support --ref=true/false for sftp source the file and ftp sources allow working with either the java.io.file or its contents. for consistency the sftp source should support the same mechanism."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Expose job parameters for jobexecutions currently the way that we are accessing jobexecutions from batch admin the jobparameters are not being filled in. we are using a {{org.springframework.batch.admin.service.jdbcsearchablejobexecutiondao}} to grab the job executions from the database. the database queries that it uses does not include the jobparameters (which is stored in a different table). i think that this will require a change to batch admin in order to properly expose the parameters."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to implement _undeploy_ operation for {{singlenode}} (single jvm) so i can use this target to undeploy a running stream. more details in [this pr|https://github.com/spring-cloud/spring-cloud-data/pull/19]. *note:* its a prerequisite to determine consistent _undeploy_ strategy for both {{jobs}} and {{streams}}. and similar to """"As a developer i'd like to study the taxi trips based on a stream of trip reports from new york city so that i can evaluate event-based systems in the context of real-time analytics using spring xd. [challenge details|http://www.debs2015.org/call-grand-challenge.html]"""" and similar to """"As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a data scientist i'd like to have the option to process data using {{flink}} processor so i can take advantage of the streaming machine learning abstractions implemented on top of flink."""" is a not user story because it is most similar to: """"Add create() and deploy() methods to jobdeployer see https://docs.google.com/a/gopivotal.com/drawings/d/1kcnbvsprbjgc10itf9cskwst8wgcjgg3wgzfkqlcazu/edit create the deployer if it doesn't exist."""" and similar to """"Add create() and deploy() methods to streamscontroller see https://docs.google.com/a/gopivotal.com/drawings/d/1kcnbvsprbjgc10itf9cskwst8wgcjgg3wgzfkqlcazu/edit create optionally deploys"""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Remove the constraint on job module batch job id to be """"job"""" currently the job module's batch job's bean id should be """"job"""". this also causes the job name to be 'actual-job-name + """".job""""' and the batch job controllers require to search for job with suffix """".job"""". removing this constraint would help us avoiding these."""" and """"Remove unavailable jobs if a job is deployed an the singlenode job is canceled the job name cannot neither be reused nor destroyed. see screenshots."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Add ability to define nested jobs h3. narrative as a developer i need to be able to create a spring xd job module that consists of a job orchestrating the execution of other spring batch jobs using the spring batch job step (see section 5.3.6 here: http://docs.spring.io/spring-batch/reference/html/configurestep.html) within the same module definition. h3. acceptance criteria # define the """"contract"""" for a job module ## currently the contract consists of a single job definition within the assembled {{applicationcontext}} ({{context.getbean(job.class)}}). ## the new version will need to document what job definition within the assembled {{applicationcontext}} should be run as the entry point. i'm assuming it would be by id ({{context.getbean(""""job"""")}} for example) of the job but am open to other options. # a custom job module that orchestrates multiple spring batch jobs via job steps should be able to be deployed and executed as a single spring xd module. ## spring xd launches the job that conforms to the previously defined """"contract"""". ## spring batch manages the execution of the child jobs. # the existing ootb jobs should work under the new """"contract"""". h3. assumptions # the ui should """"just work"""" in that child jobs update the job repository independently so no updates should be needed for an mvp of this functionality. # *this will be a breaking change for users that have developed custom job modules.* h3. out of scope # execution of child jobs that are remote (deployed on another node / {{applicationcontext}}). # dynamically assembling jobs via the shell's dsl or the ui."""" and """"Fix misc doc formatting issues noticed a few issues while reviewing the documentation * the sidebar for toc is no longer there :( that was really nice. * somehow the 'using-mqtt-on-xd' section is giving an error. {quote} asciidoctor: warning: index.adoc: line 167: invalid style for paragraph: appendix asciidoctor: warning: index.adoc: line 169: include file not found: /data/projects/spring-xd/build/asciidoc/guide/using-mqtt-on-xd.asciidoc :distzip {quote} but i don't notice anything different between that appendix and the others in index.adoc."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Container and single node do not update their associated log after the container/singlenode is up and running the application does not update the singlenode.log or containernode.log. create a stream """"time|log"""". you will see the timestamp in your console but it will not be in the log."""" is a not user story because it is most similar to: """"Remove unavailable jobs if a job is deployed an the singlenode job is canceled the job name cannot neither be reused nor destroyed. see screenshots."""" and similar to """"Ensure job definitions are escaped in ui if using the definition <aaa || bbb> where the definition starts with a """"<"""" and ends with a """">"""" the definition for the composed job does not appear on the definition page."""" and similar to """"Make deploy=false as the default when creating a new job the automatic deployment of the job makes it harder to understand the lifecycle of the job and also does not allow for the opportunity to define any additional deployment metadata for how that job runs e.g is it partitioned etc."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Release 1.0 rc1"""" is a not user story because it is most similar to: """"Writing to hdfs - 1.x"""" and similar to """"Twitterstream is broken"""" and similar to """"Channel registry"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Jobrepository should be persistent and shared across xd-admin/xd-container the current code is creating an in-memory job repository for each batch job that is launched. this makes it impossible to query the tables in the job repository across the cluster. a single job repository that is backed by a file need to be shared across all jobs that are a launched. *implementation suggestions* * the xdadmin server should create the job repository schema if not found in a hsqldb database when it starts up * the bean definitions should be added to the same context that the analytics are being loaded in as it is already shared across xd-admin/xd-container. the ‘analytics’ context should be renamed to something more generic ‘shared parent context’ or something. * there is some clean up (removal) of the code in the current jobplugin meta-inf/spring-xd/plugins/job/common.xml wouldn’t be needed anymore. that might be all not sure. *how to verify it works* * a junit test that verifies the spring batch tables were created in the job repository when xd-admin is launched. this would require deleting the backing db file before instantiating singlenode/xd-admin/xd-container. * if you start the xd-container it should be able to find the necessary datasource/jobrepository beans information to be able to contact the database. we don’t have di style junit tests so this will required getting a reference to the xd-container and it’s application context and performing ‘getbean(jobrepository.class)’"""" and """"Duplicate mbean names with router sink for some reason the integration {{mbeanexporterhelper}} is not preventing the standard context {{mbeanexporter}} from exporting the {{abstractmessagerouter}}. this should be suppressed (when an imbe is present) because it's annotated {{@integrationmanagedresource}}. causes {{instancealreadyexistsexception}}. workaround in the stack overflow answer. http://stackoverflow.com/questions/33838502/error-deploying-more-than-one-stream-with-a-router-1-3-0 could be an si issue but investigation needed. however we should probably include the stream/job name in all mbeans for the stream (as is done for the integration exporter)."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Initial work that uses the module architecture from dirt"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Need to be able setup ec2 env to test job samples in spring-xd-samples repo currently in order to deploy a user created job we copy the job to the containers and admin server and then bounce the servers. the tests will need the ability to copy these jobs to the containers & admin and then bounce the servers. these sample jobs are located at https://github.com/spring-projects/spring-xd-samples"""" is a not user story because it is most similar to: """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Automate execution of gradle pushgenerateddocs should be part of the daily build. one """"easy"""" way to do it would be to use the """"hardcoded"""" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though"""" and similar to """"Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Implement undeploy operation for cc spi currently undeploy is a no-op."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to have the option of extending the trigger abstraction so that i can implement my own trigger. and similar to """"As a developer i'd like to have acceptance test coverage for xd + yarn on ec2 so that i can verify simple xd features running on yarn on every build cycle."""" and similar to """"As a developer i'd like to move 'input/output type conversion' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Upgrade to zookeeper 3.4.6 3.4.6 was released on 2014.03.10: http://zookeeper.apache.org/doc/r3.4.6/releasenotes.html especially relevant for us they updated netty from 3.2.2 to 3.6.6: https://issues.apache.org/jira/browse/zookeeper-1715"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to host/read python script (file) from hdfs so i can use the shell processor in xd (on cf) to delegate data science functionality to py runtime and receive the feedback back in xd. and similar to """"As a developer i'd like to have a central place to manage external properties for applications across all the environments so i can provide server and client-side support for externalized configuration for xd-admin and xd-container servers."""" and similar to """"As a follow up to xd-2877 experiment with the removal of the list of modules from basedefinition and reparse as needed. branch is here: https://github.com/pperalta/spring-xd/tree/deploy-refactor-2"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Split dirt project into common/admin/container/standalone this is a generalization of xd-1702"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update to spring-data-hadoop 1.0.1.release this might mean we should adjust our hadoopdistro options to the ones supported in the new release - hadoop12 (default) cdh4 hdp13 phd1 and hadoop21"""" is a not user story because it is most similar to: """"More dsl work: documentation updates for new format once issues like xd-438 have been completed the wiki doc will need updates to reflect the current behaviour and syntax options."""" and similar to """"Update sources tail section to use shell commands instead of curl http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#tail"""" and similar to """"Create tcp/udp load generator script for xd performance testing create a load generator script which can generate messages at specific 1) rate 2) payload 3) concurrency to a specific tcp/udp port where a syslog adapter is listening."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add command for listing streams"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update getting started documentation to use xd-singlenode start script. with the new option of starting without requiring redis the getting started documentation should reflect this easier way to start processing data."""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a user i'd like to have the option to specify system properties that will be passed in to the sqoop job which runs in it's own java process. this is needed for defining memory usage and also for defining some options for various connector implementations."""" and similar to """"As a spring xd developer i'd like to create initial version of the new module registry abstraction so we could leverage the foundation to make progress and test the respective spi ({{receptor}} or {{cloudcontroller}}) implementations."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Trigger can send a message to a named channel trigger can send a message to a named channel. for example: trigger create --name mytrigger --definition """"trigger --cron='*/10 * * * * *' --message='good luck we are all counting on you'"""" --channel foo where the --message contains the message that will be sent to foo job/component."""" is a not user story because it is most similar to: """"Create redisprotocol.xml that will load all the redis specific implementations to suppor the xd container runtime and administration the redis specific beans that are defined in the current launcher.xml should move into this configuration file."""" and similar to """"Ensure package-info.java is present for each package we should ensure that each package of spring xd is documented. right now the created javadoc looks barren: http://static.springsource.org/spring-xd/docs/1.0.0.m1/api/"""" and similar to """"Using a newer version of a spring-xd dependency is ignored in packaging when creating a new module with a dependeny which has a newer version than the one spring-xd uses (in my example i use jedis 2.6.1 and spring-xd uses jedis 2.5.2) the packaging ignores the dependency. using the solution of spring-boot-maven-plugin doesn't help because it will only include what you explicitly add to the include section (transitive dependencies are not included)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Register stringtobytearraymessageconverter the converter was not configured therefore string to byte[] for --outputtype application/octet-stream fails for a string payload."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to design and document the approach towards deploying stream in a single container so i can have all modules within a stream colocated. and similar to """"As a developer i'd like to have a maintenance branch so that i can commit minor release _(ex: 1.0.2)_ code changes instead of committing to master."""" and similar to """"As a s-c-d user i'd like to add rest support for stream commands so i can maneuver streaming pipeline backed by streamcontroller."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have the option to explicitly define/configure """"error channel"""" so that i can stage and route the errors/exceptions through the dedicated channel and continue ingestion. *scenario:* * 'http' source ingest * failure at either source processor or sink module * regardless of whether it is a custom module or not traverse through the exception to propagate the actual _caused by:..._ stage the error as payload and route it to the error channel *example configuration:* * error channel definition similar to """"topic.errors.stream.module"""" * configure custom exception similar to """"catch=**exception"""" * exception hierarchy ** globalexception ** defaultexception ** modulespecificexception"""" is a not user story because it is most similar to: """"Tcp-client source module throws classnotfoundexception *version:* xd: 1.1 m1 *problem:* trying to use tcp-client source module and observing an exception while deploying the stream. *stream definition:* {code:xml} curl --data name=dummy-firehose --data definition='tcp-client --decoder=lf --port=8080 | log' --data deploy=true http://localhost:9393/streams/definitions {""""name"""":""""dummy-firehose""""""""status"""":null""""definition"""":""""tcp-client --decoder=lf --port=8080 | log""""""""_links"""":{""""self"""":{""""href"""":""""http://localhost:9393/streams/dummy-firehose""""}}} {code} the same curl command works fine against xd 1.0.1 release."""" and similar to """"Job in unknown state after run long sqooptasklet hello guys i hope you are doing good. i found a problem when i try run long sqoop imports (4 hours or more). for some reason when the sqoop step finish the system is not able to save the meta data for the current sqoop step however the sqoop import finish without problems. 2015-10-17t03:04:03-0400 1.2.0.release error simpleasynctaskexecutor-4 step.abstractstep - encountered an error saving batch meta data for step import-logs in job ingestion-flow. this job is now in an unknown state and should not be restarted. please see attached log file for more details. could you please let me know if you need other details to find what is the problem? thanks in advance héctor"""" and similar to """"Create java client lib over rest api so that clients (e.g. shell or custom user program) are insulated from rest details (ala cloud foundry). may go even further if we want a java dsl for stream definitions (that may reuse batch command pojos btw): difference between: xdclient.createstream(""""mystream"""" """"http --port=9000 | file"""") and import static stuff.* streamdef stream = http().port(9000).pipe(file()) xdclient.createstream(""""mystream"""" stream)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: The hdfs sink should roll over based on the number of events."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Streams section of doc should explicitly mention that labels are required for ambiguous modules currently i believe we only mention labels in this section of the doc: https://github.com/spring-projects/spring-xd/wiki/dsl-reference#labels and it is not even clear there that they are *required* when 2 or more module names would otherwise be ambiguous. it was probably written before we made that a mandatory part of the definition. we should mention this somewhere in the 'streams' section of the manual. even if none of the examples there currently have more than one occurrence of the same module we should add one to illustrate this point."""" is a not user story because it is most similar to: """"Increase exit description text field on job execution process step page the step execution process (http://localhost:9393/admin-ui/#/jobs/executions/38/52) page should list more lines of text for 'exit description' field to make sense of error messages. *scope:* investigate how much information can be collected directly from the executioncontext. it may be dependent on the error types. let's have the observation documented to decide next steps."""" and similar to """"[scs]replace messagecollector with generic si components ultimately module integrationtest classes should themselves be a module so that testing a source for example would use a testsink and the message verified on the sink input(). this is currently a placeholder which includes: * scs enhancements to support proxying of pollable or subscribable messgechannels * corresponding changes to the s-c-s-test-support to eliminate messagecollector and provide support for easily using the test's pollablechannel(s) if necessary e.g. test-specific annotations * related to or may depend on implementing direct binding (composed modules) in s-c-s * refactor existing module test code"""" and similar to """"Investigate dropped module deployment requests we have observed in unit tests (see abstractsinglenodestreamintegrationtests) that(redis/singlenode) occasionally fail. the root cause must be investigated further but there is some evidence to suggest that the control messages (moduledeploymentrequests) are not always received and handled by the moduledeployer. this does not produce an error but results in runtime stream failures. this problem may be resolved as part of the planned deployment spi but is being tracked here until we are certain that it has been resolved."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Jdbc source acceptance tests"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Allow user to configure tests with di with the addition of sinks and sources that require connections with external entities (hadoop jms jdbc ...) the environment setup is getting unwieldy. * integrate springjunit4classrunner.class into acceptance tests. * retrieve environment variables via dependency injection from application.properties. * utilize profiles for --local single node --local cluster --ec2 single node --ec2 cluster"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing and similar to """"As a user i'd like to have the option to define access control list (acls) so that i can define access controls to the resource by 'each user' and what the privileges are for that 'resource'. *spike scope:* ** review customer use cases and come up with design specs ** identify the best approach that fits xd runtime ** identify scope for dsl and ui ** document next steps and phases"""" and similar to """"As a developer i'd like to create an annotation ({{@enablemodule}}) driven programming model for modules so instead of explicitly defining i/o channels as beans on the module for classes annotated with {{@enablemodule}} the application would be responsible for creating the actual channel beans and channel adapters vs. the developer creating concrete channel instance types. the {{@input}} and {{@output}} annotations will be used to indicate the input and output channels of the module."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Ui: the user can view progress information about a given step"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the option of _solr_ sink so that i can perform full-text indexing and search through solr backend server."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update hdfs sink documentation to reflect new functionality introduced in xd-990 and xd-991"""" is a not user story because it is most similar to: """"Create tcp sink module based off si tcp inbound adapter. this will allow for event fowarding."""" and similar to """"Documentation for use of conversion service and creating custom processing modules that use the tuple data structure."""" and similar to """"Run all shell integration tests also with enabled security apply the same strategy for the module command tests also to all other shell integration tests."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove usage of dummy() md in spring-xd-module this creates a dependency cycle that eclipse can't handle (doesn't discern between scope like idea does). i believe we can get rid of dummy() in tests that are in spring-xd-module"""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a user i need a 'sandbox' docker image so that i can get started to experiment xd deployment with the following setup: * ubuntu os * full xd jar * java 7.x * redis * rabbitmq"""" and similar to """"As a developer i'd like to configure hadoop_user_name environment variable to implement and run-as-user for kerberos secured clusters. this would need some additional work in shdp."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Web admin app not loading for slow connections when opening manager webapp if the internet connection is slow enough to make one of the biggest javascript dependencies to make requirejs throw a timeout the webapp becomes unusable displaying only the loading gif and showing a javascript error saying: uncaught error: load timeout for modules: angular it typically takes ~ 10 seconds to throw that error."""" is a not user story because it is most similar to: """"Have resourcemoduleregistry transparently proxy a remote root thru filesystem archivemoduleregistry and the use of boot archives inherently relies on java.io.file have resourcemoduleregistry extend/compose archivemr to transparently download and cache (remote) jars that may be located in a (non-file:) location. the staging area should be customizable but some subdir of java.io.tmpdir sounds like a sensible default"""" and similar to """"Flatten out ephemeral nodes flatten out ephemeral nodes written by containers when deploying modules. for instance instead of {{.../streams/moduletype/modulelabel/container}} use {{.../streams/moduletype.modulelabel.container}}. this change allows us to derive state for a stream/job without having to traverse multiple layers of znodes. this is a big deal because: * each level of children requires a network call * curator can only cache one level of children"""" and similar to """"Suppress deliverymode header in rabbitmq source related to xd-2567 which fixed this problem but only in the bus. {quote} 2016-02-19t18:25:24-0500 1.2.1.release warn simpleasynctaskexecutor-1 support.defaultamqpheadermapper - skipping header 'amqp_deliverymode' since it is not of expected type [class org.springframework.amqp.core.messagedeliverymode] it is [class org.springframework.amqp.core.messagedeliverymode] {quote}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Handle paginated responses currently we handle only a single page response from cc spi list requests but potentially there could be multiple ones."""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to have the option of _cassandra_ sink so i can leverage the nosql database to write high volumes of variable data segments in high velocity. and similar to """"As a user i'd like to have the option of _hawq_ sink so that i can write data directly into hawq via pxf extensions through avro/parquet format."""" and similar to """"As a qa i'd like to include acceptance test coverage for _mail_ sink module so that i can validate the functionality as part of every ci build."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to port {{shell}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" is a user story, and is worth 2 story points because it is most similar to: As a spring xd developer i'd like to port {{script}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline. and similar to """"As a spring xd developer i'd like to port {{splitter}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" and similar to """"As a spring xd developer i'd like to port {{transform}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to document performance benchmark results along with the infrastructure specifics so i can publish the blog for customers/users to use it as a reference while setting up spring xd cluster."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_. and similar to """"As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally."""" and similar to """"As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: The hdfs sink should support copying file payloads we should support *java.io.file* payloads in order to support non-textual file and large text file payloads being uploaded to hdfs. currently text file payloads are converted to a text stream in memory and non-string payloads are converted to json first using an """"object-to-json-transformer"""". ultimately we need to support streams such as """"file | hdfs"""" where the actually payload being copied to hdfs is not necessarily json or textual. need to be able to support headers in the message that will indicate which hdfs file the data should be stored in."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to study the taxi trips based on a stream of trip reports from new york city so that i can evaluate event-based systems in the context of real-time analytics using spring xd. [challenge details|http://www.debs2015.org/call-grand-challenge.html] and similar to """"As a developer i'd like to handle module options via pure boot property source management so i can leverage boot's module [metadata|http://docs.spring.io/spring-boot/docs/current-snapshot/reference/htmlsingle/#configuration-metadata] option to inject module options as opposed to maintaining them in core spring xd runtime cp."""" and similar to """"As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i need to investigate the differences in dependency versions so when i create/deploy custom modules in xd i don't run into cp/cl issues."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd ui on yarn technically speaking of we want to integrate xd ui on hadoop tools we should do it so that the proxy on resource manager works with xd ui. from hadoop yarn resource manager point of view this proxied url is the applications tracking url(which is registered when application is deployed)."""" is a not user story because it is most similar to: """"The hdfs sink should support writing pojos to hdfs using avro serialization writing pojos using cdk data (avro) we should support both partitioned and un-partitioned. this story addresses only un-partitioned. document limitations in terms of which java types are supported and not supported by the avro serialization"""" and similar to """"Refactor tests with filesink|filesource to use eventually() matcher some tests (esp. moduleclasspathtests.testmodulewithclasspathafterserverstarted) seem to fail because of a race condition. add a hamcrest matcher that knows how to read the content of a filesink|source and refactor those to read like e.g. assertthat(filesink eventually(hascontent(""""foo)))"""" and similar to """"Upgrade to 3.1.1 of the gradle artifactory plugin this addresses the plugin issue https://www.jfrog.com/jira/browse/gap-172 to disable spring-xd/pom.xml"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update xdec2validation to reference <root>/management endpoint change """"/jolokia/list"""" to """"/management/jolokia/list"""" etc."""" is a not user story because it is most similar to: """"Add ci job in bamboo to run xd integration tests ci job will run integration tests that are tagged for ci build."""" and similar to """"Add spring retry to rabbit message bus log and purge bad messages"""" and similar to """"Hadoopdistrooptionhandler fails when xd_home ends with a """"/"""" also the approach may not work as expected on windows."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update to reactor 2.0.3"""" is a not user story because it is most similar to: """"Writing to hdfs - 1.x"""" and similar to """"Twitterstream is broken"""" and similar to """"Channel registry"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Combine distributed job locator related schema changes into one table currently there are job_registry_names job_registry_restartables and job_registry_incrementables tables and we can possibly combine them into one table and have a better schema for this."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Only ship relevant modules files the current build ships everything that is found in the modules directory including build artifacts such as build/ or idea *.iml files. restrict the build to only include config/ lib/ at the moment."""" is a not user story because it is most similar to: """"Add parameter information to application definition a moduledefinition contains parameters which need to be passed to the cloudfoundry application. currently these are put directly into the application's environment. this issue will verify they are correctly named."""" and similar to """"Build.gradle doesn't handle a small handful of libraries trying to build spring-xd for the first resulted in lots of errors inside sts (i had an empty .m2 repo)."""" and similar to """"Shell: add named channel list command user shall have the ability to get a listing of available named channels (order by name ascending) from the shell * add support to controllers * add tests"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"In certain scenarios a job can be redeployed more than once in a scenario where we are using the same job definition i.e. job.xml and we create job instance foo. if i create and deploy foo2 using job.xml i will see only 2 job definitions(correct) but i will see the job run 3 times. if i create foo3 & deploy i will see 3 job definitions(correct) but the jobs will run 5 times."""" is a not user story because it is most similar to: """"Add accepted type logic to module a module can declare one ore more payload types it will accept. this will inform the runtime re. automatic payload conversion. this can be done in the module xml configuration and processed by streamplugin"""" and similar to """"Make deploy=false as the default when creating a new job the automatic deployment of the job makes it harder to understand the lifecycle of the job and also does not allow for the opportunity to define any additional deployment metadata for how that job runs e.g is it partitioned etc."""" and similar to """"Xd ui: job parameters tool tips display needs to aligned when clicking on a specific job execution from the job executions bar chart the tool tips display isn't aligned with the job parameters. please see the attachment."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to have a permanent location of spi implementations so i could use the common repo every time i contribute or enhance the test coverage."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to """"As a s-c-d developer i'd like to add support for having different binder types for module's channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Synchronous deployment/undeployments there are a range of issues (such as xd-3083 xd-2671) that are caused by asynchronous deployments issued by the rest api. the flow of events is: * deploy/undeploy request received by rest api * controller queues up request to be processed by supervisor * controller returns http 2xx this proposal is to have the thread executing the deploy/undeploy request block until the request has been processed by the supervisor. this will have the side effect of deploys appearing to take longer but when the http request completes the deployment/undeployment will have been fulfilled."""" is a not user story because it is most similar to: """"Update spring-xd-extension-reactor dependency currently the reactorenv bean is defined in module-common context and the spring-xd-dirt has the runtime dependency over spring-xd-extension-reactor project. this enables boot's reactorautoconfiguration to initialize the reactor environment we have the reactor setup configured for both admin and container server applications. since reactor environment is not being used by container and only used by the reactor-syslog module we can move the reactorenv bean definition in reactor-syslog module. there is one caveat in this approach as the reactor environment gets setup everytime a new reactor-syslog module is deployed."""" and similar to """"Enable profile selection from module options this came up when working on email source. there is <int-mail:imap-idle-channel-adapter> and <int-mail:inbound-channel-adapter> it would be nice to be able to put those in two profiles and have one of the profile being activated from module options (e.g. email --polling=true|false) don't know the runtime cost of activating profiles but we could blindly activate profiles from all options passed explicitly : <beans profile=""""profile-[optionname]-[optionvalue]""""> not sure if this is the same as xd-132"""" and similar to """"Enable grouping of modules for co-located deployment example: {code} a | (b | c) | d {code} ...where b and c modules are deployed together as a composite module. there are 2 options (maybe more) for how we could handle that. one would be defining a compositemodule type that simply bridges the channels (b's output to c's input in this example). the second option would be to deploy those together on the same node as modules but using the localchannelregistry between them."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Xd-admin silently fails if servers.yml is invalid for example: {code} xd: transport: rabbit messagebus: # local: # queuesize: 2147483647 # polling: 1000 # executor: # corepoolsize: 0 # maxpoolsize: 200 # queuesize: 2147483647 # keepaliveseconds: 60 rabbit: # compressionlevel: 1 # bus-level property applies only when 'compress=true' for a stream module # see java.util.zip.deflater 1=best_speed 9=best_compression ... default: # ackmode: auto # valid: auto (container acks) none (broker acks) manual (consumer acks). # upper case only. # note: manual requires specialized code in the consuming module and is unlikely to be # used in an xd application. for more information see # http://docs.spring.io/spring-integration/reference/html/amqp.html#amqp-inbound-ack # autobinddlq: false # backoffinitialinterval: 1000 # backoffmaxinterval: 10000 # backoffmultiplier: 2.0 # batchbufferlimit: 10000 batchingenabled: true # batchsize: 100 # batchtimeout: 5000 # compress: false # concurrency: 1 # deliverymode: persistent # maxattempts: 3 # maxconcurrency: 1 # prefix: xdbus. # prefix for queue/exchange names so policies (ha dle etc.) can be applied # prefetch: 1 # replyheaderpatterns: standard_reply_headers* # requestheaderpatterns: standard_request_headers* # requeue: true # transacted: false # txsize: 1 # redis: # headers: # comman-delimited list of additional (string-valued) header names to transport # default: # default bus properties if not specified at the module level # backoffinitialinterval: 1000 # backoffmaxinterval: 10000 # backoffmultiplier: 2.0 # concurrency: 1 # maxattempts: 3 # kafka: # brokers: localhost:9092 # zkaddress: localhost:2181 # numofkafkapartitionsforcountequalszero: 10 # socketbuffersize: 2097152 # offsetstoretopic: springxdoffsets # offsetstoresegmentsize: 25000000 # offsetstoreretentiontime: 60000 # offsetstorerequiredacks: 1 # offsetstoremaxfetchsize: 1048576 # offsetstorebatchsize: 200 # offsetstorebatchenabled: false # offsetstorebatchtime: 1000 # offsetupdatetimewindow: 10000 # offsetupdatecount: 0 # offsetupdateshutdowntimeout: 2000 default: batchingenabled: true {code}"""" and """"As a user i'd like to have the option to delete the queues/topics so that we can include an _optional_ attribute as part of the stream destroy command to also clean-up the associated queues/topics. *notes:* * spring-amqp {{rabbitadmin}} now has a {{getqueueproperties()}} method which returns the number of consumers so it may be possible to use it for this purpose. * consider the possibility of _producers_ and/or _queues_ still containing data * consider the scenario even after the topics/queues are cleaned-up what to do with fanout exchange? *some further thoughts* * consider using the upcoming spring amqp rest api {{rabbitmanagementtemplate}} if the timing is not right we could temporarily invoke the rabbit rest api directly. * should be optional perhaps via {{stream destroy foo --clean}} * should this be done by the admin? or via a new plugin handling module undeployments - in the rabbit case undeploying a consumer would check for us being the last consumer and remove the queue/binding/exchange since we undeploy left->right everything can be cleaned up on the consumer side. * third option would be new methods on the bus {{cleanconsumer}} etc invoked by the {{streamplugin}} * down side of doing it on the admin is that he wouldn't necessarily know which rabbit cluster a stream was deployed to - so it probably has to happen on the container - even so we'd need the admin url(s) for the cluster."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Automatically disable autostartup in module smartlifecycle components provide a bpp to do this in the streamplugin. (possibly jobplugin as well). remove auto-startup=""""false"""" in existing module configs."""" is a not user story because it is most similar to: """"Remove jmxenabled as a cmdline option and enable jmx by default after some discussion and voting we decided to remove """"jmxenabled"""" as a command line option and have jmx enabled by default. this can be disabled from xd-config.yml externally."""" and similar to """"Update spring-xd-yarn servers.yml with settings for hdp 2.2.6.0 we need to add the settings needed to run xd on yarn when using hortonworks hdp 2.2.6.0 which is the version you now get when installing with ambari."""" and similar to """"Create a command to browse the hdfs file system there are existing commands that can be taken from https://github.com/springsource/spring-hadoop-samples or https://github.com/springsource/impala that can be used for this"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Investigate long running tests the goal is to optimize the build process and at the same time validate the feature capabilities as quickly as we can. investigate the long running tests. look for long timeout window declarations."""" is a user story, and is worth 5 story points because it is most similar to: As a user i'd like to have google's [protocol buffer|https://code.google.com/p/protobuf/] codec option so that i can serialize/deserialize objects based on its native specifications. and similar to """"As a s-c-s user i'd like to have the modules self-register itself with {{eureka}} whenever they're installed so i can also discover the same modules using spring xd admin spi and reuse them to create data pipelines."""" and similar to """"As a qa i'd like to benchmark _sqoop_ vs. _jdbchdfs_ batch job so that i can compare and contrast performance stats."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-d developer i'd like to upgrade {{receptor-client}} to comply with latest {{receptor}} api changes so i can sync-up and take advantage of the recent improvements."""" is a not user story because it is most similar to: """"X-xd-* transport content-type leakage the {{abstractreplyproducingmessagehandler}} in the rabbit transport exposes the internal transport content-type if none existed on the original transported message."""" and similar to """"Ip address used as default data when creating paths invoking {{paths.ensurepath}} is creating a default value of the host ip address instead of the expected """"empty"""" value."""" and similar to """"Upgrade to spring data fowler release spring data gemfire is version 8.0.0 in folwer which is the same as in bds (should check minor version number in bds). atm we are using gemfire 7.0.x"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Payload conversion sample throws exception. after updating the dependency to use the snapshot (even with m5) the conversion throws an exception. stacktrace attached."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a continuation we would like to further investigate spark develop poc and identify the best appropriate design and implementation for xd."""" and similar to """"As a pm i'd like to have test coverage for both kafka source and sink modules so that we can assert its functionality as part of the ci builds."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to use a _jdbchdfs_ batch job as a passthrough (without chunk processing) so that i don't have to incur the batch read/write overhead."""" is a user story, and is worth 2 story points because it is most similar to: As a s-c-s user i'd like to have my modules add/update it's current state to eureka so i can use the repository to discover the current sate of the module as needed. and similar to """"As a user i'd like to have a config parameter preferably in _servers.yml_ file so that i can enable/disable message rates in the cluster view."""" and similar to """"As a user i'd like to have the ability to visually explore xd's cluster view so that i'm aware where the components are deployed and how they are connected within the topology."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create bridge processor see https://github.com/spring-cloud/spring-cloud-dataflow/issues/128 this is needed to support """"channel > channel"""" type constructs"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Admin should fail immediately if rabbit is not running container currently does that."""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create xd integration test framework add top level utility methods to manage xd runtime (deploy start and stop). these methods will be used by underlying integration tests to control runtime test environment."""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a s-c-s user i'd like to have the modules self-register itself with {{eureka}} whenever they're installed so i can also discover the same modules using spring xd admin spi and reuse them to create data pipelines."""" and similar to """"As a user i need a 'sandbox' docker image so that i can get started to experiment xd deployment with the following setup: * ubuntu os * full xd jar * java 7.x * redis * rabbitmq"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"We need a kafkasinglenodestreamdeploymentintegrationtests see {{redissinglenodestreamdeploymentintegrationtests}} etc."""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Parser needs to handle a ':' embedded in a name. also drop the enhanced portion of the enhancedstreamparser."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The ability to import beans referenced in the main context into a module this should be a core feature of any spring based module. the plugin should be able to import explicitly referenced beans. this minimizes potential side effects of making the module a child context and is simpler than declaring a shared context (parent) of the application and the module. provide namespace support for flow:"""" is a not user story because it is most similar to: """"Expose a getter for a module unique id inside a stream definition following merge of https://github.com/spring-projects/spring-xd/pull/601 expose a unique id under which a module is known inside a stream. that id (which defaults to the module name) is what should be used as the qualifier for an option name inside a composed module ie {noformat} module compose foo --definition """"f1: filter | filter"""" ==> f1.expression and filter.expression are available {noformat}"""" and similar to """"Basic support for plugin contributed module options metadata pending a better approach and extension point (see xd-1050) provide a way to factor out common recurring options for modules: * inputtype * outputtype * job parameters"""" and similar to """"Ui: improve the filtering capabilities of jobs that are executing/have executed * show only the jobs that you have created vs. those of others. (requires security - e.g. xd-1616) - probably a separate issue * show only jobs that are in a specific status/state running vs. other states. * show only jobs for the past x number of days. * show only jobs whose name matches a simple string e.g. ‘useranalysis’"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Container and grid control 1. we'll need a system which give better control of what yarn/xd containers are out there and what is a status of those containers. 2. we also need grouping of containers order to choose prioritize and scale tasks. 3. we need heartbeating of the grid nodes. hadoop yarn itself doesn't give enough tools to know if container is """"alive""""."""" is a not user story because it is most similar to: """"Remove dynamically created producers when producers are created/bound dynamically (e.g. from the router sink) they are not unbound when the module is undeployed. there is currently no metadata in the binding to provide that functionality. it is not critical because the producers are just sitting there (and may be reused if the module is redeployed but it is a leak and should be addressed at some time."""" and similar to """"Upgrade to the latest gradle 2.x release gradle 2.x is required for the latest sonar version (sonar.spring.io) we may need to wait for a fix in groovy itself (2.4.1) - please see the following links for details: * http://forums.gradle.org/gradle/topics/after_upgrade_gradle_to_2_0_version_the_maven_pom_not_support_build_property * http://jira.codehaus.org/browse/groovy-7023"""" and similar to """"Simplify """"instance"""" deployment code abstractdeployer has 4 subclasses 3 of which override e.g. deploy() making the boilerplate factorization ineffective. introduce an intermediate class for those deployers that support the concept of an instance (stream tap job to some extent)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i would like to create dsl based jobs using spring xd. currently batchjobregistrybeanpostprocessor implementation has an assumption in postprocessafterinitialization( ) method (line 92). it checks if the beans are instanceof stepparserstepfactorybean which is xml based steps. therefore any xd step listeners for tap events are not getting registered effectively i'm not getting any step events out of my dsl based jobs. apparently everything else is working alright for the java dsl job. java dsl jobs are far easier to write test/integration tests with. please review issue type - i was not sure if this was a bug or improvement i supposed it is an improvement."""" is a not user story because it is most similar to: """"Composed options does not trigger profile activation i was in the process of rewriting transform using profiles (see expressionorscriptmixin). this broke eg modulecommandtests.testcomposedmodulesvaluesindefinition because basically composed module options activate no profile. the problem is that there is no real way to know what to activate currently because when deploying a part of a composed module its metadata is actually a link to the *whole* metadata but does not really know which part. long story short something we may be able to do is to activate the union of all profiles but this breaks very easily : module compose foo --definition """"transform --expr=foo | transform --script=bar"""" would try to activate both """"script"""" and """"expression"""" profiles for both modules."""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" and similar to """"Stream partitioning metadata should allow updating at runtime - dynamically / anytime in a running system some times the algorithm for partitioning the data might overload a given server with work. when that happens we might need to """"rebalance"""" the partitioned work / data to achieve a even balance of stream throughput across servers in a given compute group. we can think of this dynamic rebalancing behavior as an extension of a failure use case. in the failure scenario we need to re-partition the stream to other servers in the group. we should allow third parties to plug-in to help with this capability. as an example gemfire will report the new partitioning meta-data when this type failure / rebalance happens."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Document mail related sources & sinks"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update payload-conversion demo to latest module spec upload payload conversion demo such that a user can use the module upload feature against the sample."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" and similar to """"As a developer i'd like to build _spark_ batch job sample so that we can demonstrate some of the distributed data computation capabilities."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Jms source does not expose `acknowledge` since the message-driven adapter uses a {{dmlc}} the default behavior is to lose messages on exceptions (with the dmlc the message is ack'd before the listener is invoked). in order to provide recovery of such situations the source needs to expose {{acknowledge}} so it can be set to {{transacted}}. or perhaps given that we don't expose complex configuration the source should use a {{simplemessagelistenercontainer}} instead (where the ack is sent after the listener is successfully invoked)."""" is a not user story because it is most similar to: """"Document json quoting behavior in shell this may be an issue following the search/replace from curl to shell but for example this documentation line does not work: http post --target http://localhost:9000 --data """"{\""""symbol\"""":\""""vmw\""""\""""price\"""":72.04}"""" the backslash prior to quote is left in the payload (and hence jackson chokes on it) we need clear rules about quoting at the shell level"""" and similar to """"In ec2 deployment allow users to set download jars into the lib/xd directory in cases where the deployment requires jars that can not be included with the distribution the user should be able to pull a jar from a http site and place it in lib/xd. the use case is that when we removed the mysql jar from the distribution the ci tests could not start the xd instances on ec2 without it. it was suggested that we use the postgresql instead but decided to continue the use of mysql for acceptance tests."""" and similar to """"Jsonstringtoobjecttransformertests fail on mac if local machine name is not in /etc/hosts when running the gradlew build the jsonstringtoobjecttransformertests unit test failed. the cause is enumerated below: caused by: com.gemstone.gemfire.internal.tcp.connectionexception: while creating serversocket and stub on port 0 with address glenns-mbp/192.168.1.254 if i added 127.0.0.1 glenns-mbp to my /etc/hosts the tests succeeded."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add smartlifecycle to channelbindingadapter make channelbindingadapter implement smartlifecycle so that it gets started with the highest precedence and before any other message producing bean."""" is a not user story because it is most similar to: """"Xd config home should use xd_config_location if this is set if xd_config_location is set then xd runtime's xd.config.home should use that. otherwise they point to two different paths."""" and similar to """"Ability to send files as attachment (mail sink) i'd be very pratical if the mail sink has the ability to send files as attachment. i.e. add the attribute """"attachment-filename"""" to header-enricher."""" and similar to """"Jobs list rest endpoint should include deployed/undeployed status currently the jobs definition list rest endpoint doesn't include deployed/undeployed status on a given job."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Properly close redis/rabbit connection factories in tests tests that leverage [redis|rabbit]availablerule often create another connection factory in the test body but fail to close it. tests should properly close the resource. as an added benefit the rule itself can expose the resource that it created for deciding whether to skip the test or not"""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to add the hadoop _namenode_ specifics in a config file so that i don't have to incur the hassle of pointing to the _namenode_ location every time i open a new dsl session but it is automatically configured. and similar to """"As a developer i'd like to remove _id_ and _timestamp_ attributes from the {{tuple}} class so i can improve performance characteristics by not having them go through _serde_ instead we could leverage message headers to collect such information."""" and similar to """"As a user i'd like to have concurrency and compression support for kafka so that i can increase performance throughput and/or increase responsiveness *things to consider:* * make global configuration options be """"defaults"""" and allow per-deployment overrides * add options for ** concurrency ** compression support"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Streamdeployer to implement resourcedeployer streamcontroller to not access the repository instance directly all access to go through streamdeployer"""" is a user story, and is worth 2 story points because it is most similar to: As a developer i'd like to clean-up compiler and javadoc warnings from the build so we don't see the warnings in build sysout. and similar to """"As a developer i'd like to complete the remaining work with debs challenge so i can submit by the deadline."""" and similar to """"As a spring xd developer i'd like to port {{http}} module from xd to s-c-s repo so i can use it as {{source}} module in streaming pipeline."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Change rabbitmq sink to use routing-key-expression instead of routing-key the current rabbitmq sink uses the attribute routing-key which defaults to the name of the stream. this should be change to use the attribute routing-key-expression so that the routing-key can be determined using spel. this will enable a dynamic evaluation of the routing-key based on message payload/header. *implementation suggestions* this hopefully should be changing the xml description of the sink to routing-key-expression=""""${routingkey:'${xd.stream.name}'} this way the ${xd.stream.name} is surrounded by a single quote to indicate a string literal to spel in the default case. *how to verify it works.* one of the simple uses of this is to create a routing key based on payload. in a distributed word-count example the hashcode of a word would be sent to a certain number of processing modules that would perform the count. the idea is that the same word is sent to the same node over and over again in particular if in-memory counters or state is computed - using centralized redis counters this wouldn't be necessary in the case of only counter state. the stream http | rabbit --routingkey=""""'word-' + payload.hashcode() % 3"""" is an example of a stream that can be used to verify that messages published to a direct exchange will have routing keys of the value word-0 word-1 and word-2. binding a queue to each of these routing keys one can observe the contents of messages in the queue to make sure that words are being routed to the appropriate queue e.g. publishing """"hello"""" as the payload of an http request should always appear in the same queue. the rabbitmq admin console can be used for this purpose."""" and """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Add redis binaries for windows presently spring xd does not ship windows binaries for redis. however microsoft is actively working [1] on supporting redis on windows. you can download windows redis binaries from: https://github.com/msopentech/redis/tree/2.6/bin/release [1] http://blogs.msdn.com/b/interoperability/archive/2013/04/22/redis-on-windows-stable-and-reliable.aspx"""" and """"Document and review rest api rest api needs to be finalized and documented for the ga release. the api to be reviewed by rest experts"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add support for named channels as an s-c-d user i'd like to have the option to use _named channels_ so i can create streaming pipelines without source or sink modules."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a user i need a """"production-ready' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x"""" and similar to """"As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd user i'd like to capture module (aka: {{cf apps}}) metrics directly so i can relay that information via rest-apis and not depend on the current coupling of {{xd-container}}'s. currently there are two different ways we could consume this information from applications. si's {{channel()}} and sboot's {{actuator()}} apis are the few to explore as part of this scope."""" is a user story, and is worth 3 story points because it is most similar to: As a minimum we need some common polling strategy on the client side to detect status changes of job + streams etc. (e.g. during deployment of streams/jobs) ideally i would like to have this addressed on the server-side as well. it would be nice if we could propagate events between containers and admin-server that would inform about any changes in the system. we could then use those to notify connected ui clients. and similar to """"As a user i'd like to have a redis based _aggregation_ over field-value counters so that i can continuously write the aggregation in redis as we ingest more data. *scope:* * port specs from [previous implementation|https://github.com/spring-projects/spring-xd/wiki/old---aggregate-field-value-counters]. * identify gaps * update reference documentation"""" and similar to """"As a user i'd like to have the option to extend the default message handling behavior for http source-module so that i can override the settings via _servers.yml_ to control the default message size. *notes:* the adapter currently has that hard-coded (1mb limit) in the httpchunkaggregator. we will have to expose this property for overrides. [related pr|https://github.com/spring-projects/spring-xd/pull/1367]."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to refer to ootb batch jobs and the documentation so i can jump to the right job section and review details."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Source that produces json string as byte[] with --outputtype application/json should produce json string"""" is a not user story because it is most similar to: """"Update documentation to list supported hadoop distributions after spring hadoop 2.0 rc4 update."""" and similar to """"Shell: remove """"taps list"""" command we should only allow """"tap list"""" - currently """"tap list"""" and """"taps list"""" are allowed but """"tap list"""" does not show up under help."""" and similar to """"Refactor the tests so that contexts are destroyed properly in our tests the context is destroyed at the end of each module. it should be destroyed at the close of the container."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Fix compiler warnings as of m3... {code} javadoc: warning - error fetching url: http://static.springsource.org/spring-shell/docs/current/api/package-list /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/module/compositemoduleregistry.java:40: warning - @param argument """"cp"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/module/compositemoduleregistry.java:40: warning - @param argument """"file"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/jobfactorybean.java:62: warning - tag @link: can't find jobname in org.springframework.xd.dirt.plugins.job.jobfactorybean /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/rest/xdcontroller.java:56: warning - @param argument """"<v>"""" is not a type parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/rest/xdcontroller.java:56: warning - @param argument """"<t>"""" is not a type parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/batch/batchjobalreadyexistsexception.java:32: warning - @param argument """"message"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/batch/batchjoblocator.java:32: warning - @distributedjobservice is an unknown tag. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/batch/batchjoblocator.java:32: warning - @distributedjobservice is an unknown tag. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/batch/nosuchbatchjobexception.java:31: warning - @param argument """"message"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/containeroptions.java:30: warning - @param argument """"defaulttransport"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/containeroptions.java:30: warning - @param argument """"defaultanalytics"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/optionutils.java:35: warning - @return tag has no arguments. /users/gpr/documents/workspace-si/spring-xd/spring-xd-module/src/main/java/org/springframework/xd/module/plugin.java:32: warning - tag @see: reference not found: moduledeployer /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/bus/messagebus.java:53: warning - @param argument """"moduleinputchannel"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/bus/messagebus.java:72: warning - @param argument """"moduleoutputchannel"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/bus/messagebus.java:102: warning - @param argument """"moduleoutputchannel"""" is not a parameter name. /users/gpr/documents/workspace-si/spring-xd/spring-xd-reactor/src/main/java/org/springframework/xd/integration/reactor/config/reactornamespaceutils.java:46: warning - @return tag has no arguments. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/batch/batchjoblocator.java:32: warning - @distributedjobservice is an unknown tag. /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job/batch/batchjoblocator.java:32: warning - @distributedjobservice is an unknown tag. {code} and {code} warning: [options] bootstrap class path not set in conjunction with -source 1.6 /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/bus/localmessagebus.java:132: warning: [rawtypes] found raw type: localmessagebus.sharedchannelprovider sharedchannelprovider channelprovider = aliashint ? queuechannelprovider ^ missing type arguments for generic class localmessagebus.sharedchannelprovider<t> where t is a type-variable: t extends abstractmessagechannel declared in class localmessagebus.sharedchannelprovider /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/bus/localmessagebus.java:159: warning: [rawtypes] found raw type: localmessagebus.sharedchannelprovider sharedchannelprovider channelprovider = aliashint ? queuechannelprovider ^ missing type arguments for generic class localmessagebus.sharedchannelprovider<t> where t is a type-variable: t extends abstractmessagechannel declared in class localmessagebus.sharedchannelprovider /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdentities.java:93: warning: [rawtypes] found raw type: list public list geturls() { ^ missing type arguments for generic class list<e> where e is a type-variable: e extends object declared in interface list /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdentities.java:101: warning: [rawtypes] found raw type: list public list gethashtags() { ^ missing type arguments for generic class list<e> where e is a type-variable: e extends object declared in interface list /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdentities.java:109: warning: [rawtypes] found raw type: list public list getmentions() { ^ missing type arguments for generic class list<e> where e is a type-variable: e extends object declared in interface list /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdentities.java:117: warning: [rawtypes] found raw type: list public list getmedia() { ^ missing type arguments for generic class list<e> where e is a type-variable: e extends object declared in interface list /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdentities.java:126: warning: [rawtypes] found raw type: list public list gettickersymbols() { ^ missing type arguments for generic class list<e> where e is a type-variable: e extends object declared in interface list /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdentities.java:37: warning: [serial] serializable class xdentities has no definition of serialversionuid public class xdentities implements serializable { ^ /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdurlentity.java:31: warning: [serial] serializable class xdurlentity has no definition of serialversionuid public class xdurlentity implements serializable { ^ /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdhashtagentity.java:32: warning: [serial] serializable class xdhashtagentity has no definition of serialversionuid public class xdhashtagentity implements serializable { ^ /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdmentionentity.java:32: warning: [serial] serializable class xdmentionentity has no definition of serialversionuid public class xdmentionentity implements serializable { ^ /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdmediaentity.java:32: warning: [serial] serializable class xdmediaentity has no definition of serialversionuid public class xdmediaentity implements serializable { ^ /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdtickersymbolentity.java:31: warning: [serial] serializable class xdtickersymbolentity has no definition of serialversionuid public class xdtickersymbolentity implements serializable { ^ /users/gpr/documents/workspace-si/spring-xd/spring-xd-dirt/src/main/java/org/springframework/integration/x/twitter/xdtweet.java:34: warning: [serial] serializable class xdtweet has no definition of serialversionuid public class xdtweet implements serializable { ^ {code}"""" and """"Bind producer before consumer {quote} here is the full exception: org.springframework.messaging.messagedeliveryexception: dispatcher has no subscribers for channel 'resourceconfiguredmodule [name=filter type=processor group=request-rate index=0 @58b0f318]:use-expressiondefaultadminsinglenodehsqldbserver:9393.output'. nested exception is org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers and here is that stream: topic:httpstartstop > filter --expression=payload.gethttpstartstop().getpeertype().name().equals('client') | requestrateaggregator | appmetricssplitter | router --expression='topic:app-request-rate-'+#jsonpath(payload'$.appid') [2:59 pm] gary russell: @markfisher @ilayaperumalgopinathan @patrickperalta this looks like another (not fixed by the previous fix) timing problem with taps when using singlenode. the tap is started before the tap stream is deployed. but it's not clear to me how the filter module could be deployed/bound as a consumer before the requestrateaggregator [3:08 pm] gary russell: i see the problem: abstractmessagebusbinderplugin.bindconsumerandproducers() binds the consumer before the producer - this is the wrong order for a passive component such as the filter. /cc @davidturanski {quote}"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Refactor deployment interfaces/class hierarchy (continued) refactoring of the {{resourcedeployer}} to split apart the concepts of repository and deployment. for reference see xd-2835 xd-2671 xd-2877 and xd-3070."""" is a not user story because it is most similar to: """"Profile byte array on in-memory and kafka transport identify and report hotspots while running the load-generator source and the throughput sink on : # singlenode -> in memory transport # singlenode -> kafka transport # admin/container -> kafka transport"""" and similar to """"Modularize xd ui from https://jira.springsource.org/browse/xd-1231 we understand the importance of modularizing client side javascript code. this story tracks modularization of xd ui."""" and similar to """"Add spring xd build plan for java 8 to bamboo this is issue depends on xd-761 https://build.springsource.org/browse/xd-jdk8"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Log version number in log files when answering support questions the first step is to determine what version of the software the customer is using. this question can be easily answered if we log the version as one of the fields in the log file. for example: {noformat} 10:44:21212 1.0.2.build-snapshot info deploymentsupervisorcachelistener-0 server.containerlistener - container arrived: container{name='431baa56-b23b-48fc-b37d-18b52231e799' attributes={ip=192.168.25.177 host=patrick-peralta-macbook-pro.local groups= pid=38004 id=431baa56-b23b-48fc-b37d-18b52231e799}} {noformat} this way when we receive log snippets (initial support inquires rarely include the entire log file) we can immediately determine if the issue has already been fixed in a later release."""" and """"Change module placeholder names and remove context:property-placeholder usage e.g. rabbit.xml source. <context:property-placeholder location=""""${xd.config.home}/${configproperties:rabbit}.properties"""" ignore-resource-not-found=""""true"""" /> would be removed and <rabbit:connection-factory id=""""rabbitconnectionfactory"""" host=""""${host:${spring.rabbitmq.host:localhost}}"""" port=""""${port:${spring.rabbitmq.port:5672}}"""" virtual-host=""""${vhost:${spring.rabbitmq.virtualhost:/}}"""" username=""""${username:${spring.rabbitmq.username:guest}}"""" password=""""${password:${spring.rabbitmq.password:guest}}""""/> would look like port=""""${port}"""" and a property file in the module directory or pojo in the module lib would specify the default value of the port. for pojo it would be options_class = org.springframework.xd.dirt.modules.metadata.rabbitsourceoptionsmetadata for property file it would be option.port.default=5672 option.port.description=""""cool port number"""" this needs to be consistently done across all the modules."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Test scripts on windows that use xd_module_config_location/name"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Support partitioning properties using these as a starting point support the standard binder partitioning properties: https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream-binders/spring-cloud-stream-binder-spi/src/main/java/org/springframework/cloud/stream/binder/binderproperties.java#l69 https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream-binders/spring-cloud-stream-binder-spi/src/main/java/org/springframework/cloud/stream/binder/messagechannelbindersupport.java#l663"""" and """"Split xd-dirt in 3 (or 5) the xd-dirt project should be split in at least 3 parts: - classes and resources pertaining to the admin-server - container server - shared classes additionally we may consider splitting the first two in half as well having a separate project for cli handling (and hence introduce 2 other projects for yarn etc)"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update architecture diagram to show rabbit in addition to redis to communicate between admin and containers figure 1 here https://github.com/springsource/spring-xd/wiki/architecture should also show rabbit as an option since otherwise people will think we are tied to redis."""" is a user story, and is worth 8 story points because it is most similar to: As a performance tester i'd like to investigate why there's high cpu startup time for both admin and container servers. perhaps profiling would assist isolating the bottlenecks. *scope:* * identify the bottlenecks * document reasons * list pros/cons and similar to """"As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables"""" and similar to """"As a s-c-d developer i'd like to provide optional key-value pairs as deployment properties so i could leverage them at the runtime to instruct how the modules will be deployed. _the scope of this story is to specifically support {{count}} to represent {{n}} instances of modules that share the same environment variables._"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Servers not finding logging file 12:30:43930 warn main logging.loggingapplicationlistener - logging environment value 'file:/data/projects/spring-xd/build/dist/spring-xd/xd/config///xd-container-logger.properties' cannot be opened and will be ignored there are extra slashes in there.... probably due to some recent changes related to xd/config location in the scripts."""" is a not user story because it is most similar to: """"Come up with a consistent link consumption scheme on the rest client side see discussion at https://github.com/spring-cloud/spring-cloud-data/pull/37#discussion_r36849117 also relevant: http://docs.spring.io/spring-hateoas/docs/current/reference/html/#client"""" and similar to """"Replace spring-xd-messagebus-* dependencies with scs xd 2.0 will not have direct dependency on the s-c-s binder (as mb has been renamed). the message bus code is obsolete/orphaned in xd 2.0 but some is required to support current integration tests. we can look at pruning it some more but complete removal likely depends on integrating the s-c-s enabled admin spi. mb will remain in xd 1.x."""" and similar to """"Initial xd on cloudfoundry support first take on this involves - being able to deploy the two separate applications: xd-admin & xd-container - being able to cf-service provided redis & rabbit for internal needs of xd - to some extent make modules smart and cf aware (e.g. http source uses correct port)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"The command line for xd-admin and xd-container to support an additional option pipeprotocol that is used to determine the middleware for sending admin requests and data between processing steps the name 'pipeprotocol' is tentative. 1. the command line scripts for xd-admin and xd-container would support a --pipeprotocol option with the default being to use redis. (otherwise use xd-singlenode). 2. the xd-admin and xd-container scripts will use the value of pipeprotocol to set the java system property xd.pipeprotocol when launching the app."""" and """"Replace spring-xd-messagebus-* dependencies with scs xd 2.0 will not have direct dependency on the s-c-s binder (as mb has been renamed). the message bus code is obsolete/orphaned in xd 2.0 but some is required to support current integration tests. we can look at pruning it some more but complete removal likely depends on integrating the s-c-s enabled admin spi. mb will remain in xd 1.x."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Column option of jdbc sink should not convert underscore to property name. current implementation of column option of jdbc sink convert underscore to java property name. if database column contains underscore there is no way to store data. so jdbcmessagepayloadtransformer should not use jdbcutils.convertunderscorenametopropertyname even if column contains """"_""""."""" is a not user story because it is most similar to: """"Move [back] button to top right the [back] button is at lower left of the page which requires scrolling all the way to the bottom - could we move it to top right? would make clicking back and forth for job executions much easier."""" and similar to """"Singlestep-partition-support needs to allow grid size to be configurable h3. narrative as a developer i need to be able to configure a partitioned job's grid size so that the correct number of partitions are created (the current code is hard coded to 1 for the grid size). h3. acceptance criteria # expose the gridsize attribute of the {{messagechannelpartitionhandler}} as an option. h3. assumptions # existing ootb jobs should not be impacted by this given they don't use the grid size."""" and similar to """"Admin ui does not respond after login in ie 11 i have ie 11. the xd admin ui stops responding after the login prompt and i have to kill the browser every time. it's not functional. i have not tried it with security turned off. attach is the screenshot of the version."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add hdfs (apache hadoop 2.2 distro) acceptance tests"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd does not release ports on failed stream creates. if stream fails to create while using sources or sinks that need ports. ports are not released. if while creating a stream you see: """"command failed org.springframework.xd.rest.client.impl.springxdexception: failed to bind to: 0.0.0.0/0.0.0.0:9000. possibly the port is already in use."""" then destroy the stream (or all streams for that matter) you will not be able to create another stream that uses that port. the work around is to cycle the container."""" is a not user story because it is most similar to: """"Using a newer version of a spring-xd dependency is ignored in packaging when creating a new module with a dependeny which has a newer version than the one spring-xd uses (in my example i use jedis 2.6.1 and spring-xd uses jedis 2.5.2) the packaging ignores the dependency. using the solution of spring-boot-maven-plugin doesn't help because it will only include what you explicitly add to the include section (transitive dependencies are not included)"""" and similar to """"Support completion proposals of processors after a named channel due to the way the heuristics for module type guessing work we can't currently support completions of the like: """"queue:foo > s<tab>"""" that would yield valid processor names we need to add non-determinism (list of types instead of single type) to the type guessing heuristic"""" and similar to """"Update reactor stream processor to use latest snapshots the code base is changing a bit so using 2.0 m1 for development is stable up until all major jira issues have bee completed. then we should track snapshots in preparation to move to 2.0. m2 when it gets released."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create a standard way to configure spring cloud data and stream projects"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"As a developer i'd like to add support for dynamic classpath for modules so we can have the flexibility to load the right dependencies either based on module options (0) or via other properties such as including the dependencies from a specific location (1). (0): {code} /lib/*.jar:lib/${distro}/*.jar {code} (1): {code} ${xd.home}/lib/hadoop/${distro}/*.jar {code} *example:* {code} http | hdfs --distro=phd22 http | mycustommodule --classpath=/my/funky/dir http | jpa --provider=eclipse jpa: /config/ /lib/something-that-is-common.jar /eclipse/eclipse-link-3.2.jar /hibernate/hibernate-core-5.0.jar module.classpath = /lib/*.jar:/lib/${provider}/*.jar {code}"""" and """"End point to retrieve a list of all xd artifacts of all kinds any kind of sophisticated artifact retrieval mechanism in xd will need to grab more than one kind of artifact at once. for example if i want to see all taps streams triggers and jobs (ie- everything) i need to make 4 http requests. i can imagine dashboards that need to display information on artifacts of multiple kinds. there will also need to be a way to pass a query to return a sub-set of artifacts but that should be designed separately."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Provide jms as a supported messagebus implementation"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add acceptance tests for stream with sources of tcp http and time and sinks of file and log need to be able to test the following sources: tcp http time"""" is a user story, and is worth 8 story points because it is most similar to: As a user i should be able to leverage native _websocket_ sink so that i can take the advantage of full-duplex communications channels over a single tcp connection. and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to document the changes to message headers so that users can refer to the troubleshooting section if there are any serialization errors when reusing the 1.0 batch-jobs in 1.1 release. perhaps this could be part of [troubleshooting|https://github.com/spring-projects/spring-xd/wiki/deployment#troubleshooting] section in our wiki."""" is a not user story because it is most similar to: """"Dead letter is not created on all rabbitmq queues for partionned stream hi if i use the module.[name].producer.paritionkeyexpression and the module as also autobinddlg enabled the creates rabbbitmq queues do not have the deadletter policy. the first queue has it (xdbus.<stream>.0-0) but others do not have it (xdbus.<stream>.0-n). thanks mickaël"""" and similar to """"Configurable response status code in http source we have a use case where we need the http source module to return a 204 status instead of the 200 status that is currently returned. there may be other status codes that it would be useful to be able to return. a simple additional option on the module would allow this to be configured."""" and similar to """"Update documentation related to transport and controltransport e.g. need to update this section (maybe others): https://github.com/spring-projects/spring-xd/wiki/running-distributed-mode remove all mentions of control bus and replace any mentions of the --transport cmd line arg with the xd.transport property in yml."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Kafka sink: support async producer the kafka sink supports properties for an async producer (e.g. {{queue.buffering.max.ms}} ) but you cannot enable such a producer (only {{sync}} ). async producers batch messages (at the risk of message loss). add a new property {{async}} default {{false}} and add the corresponding attribute to the {{<int-kafka:producer-configuration/>}} element {{async=""""$\{async\}""""}}"""" and """"Use hadoop mini-cluster test support in xd tests the tests that use hdfs currently require an external hadoop installation and is hard to set up/update version in all the environments where we want to run tests e.g. bamboo travis. see if the mini-cluster described in http://docs.spring.io/spring-hadoop/docs/2.0.0.rc1/reference/html/testing.html#testing:yarn:minicluster can be used in the test cases instead."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the option to store the custom module uber-jar in hdfs so that i can rely on the ha feature to reliably read and reinstall under failure scenarios."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a user i need a """"production-ready' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x"""" and similar to """"As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Redo hadoop distribution dependency management the way we now include various hadoop distributions is cumbersome to maintain. need a better way of managing and isolating these dependencies on a module level rather than container level."""" is a not user story because it is most similar to: """"Support having multiple property placeholders defined in different modules right now the ppc for jolokia mgmt is conflicting with the ppc used to resolve redis properties. need to determine a strategy such that multiple ppcs can be used."""" and similar to """"Review dsl updated story points to 14 since 5 of us just participated in a 2 hour call and we still need to discuss """"topology"""" support after some dev spikes later this week"""" and similar to """"Create pojo based filesink module metadata this is so that we can have an enum that can show the possible values and autocomplete. using just the xml the user has a greater chance to enter an invalid mode."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Batch hashtag count throws exception when launched 1) update instructions to mention --hadoopdistro for both singlenode and shell. else demo will not work. 2) pom needs to be updated to use 1.2.1 at the least. 3) i can see where hdfs is writing the results 4) throws npe stacktrace is attached."""" is a not user story because it is most similar to: """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Create a throughput sink the throughput module would expect a payload of the type message<byte[]> and look for the byte[] to be start or stop strings to trigger a throughput measurement. https://github.com/spring-projects/spring-xd/tree/master/extensions would be the place for the module to live."""" and similar to """"Move ftp support from .x package to spring-xd-dirt batch package commit https://github.com/spring-projects/spring-xd/commit/761cd5e8250c055878caf3a789ab5b3254ba48e8 introduced support for ftp and added a bunch of .x classes. these should not belong to dirt proper though and should be added to an extension style project. the job(s) module would then depend on them"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Review 'critical' sonar warning... https://sonar.spring.io/drilldown/issues/org.springframework.xd:spring-xd?severity=critical"""" is a user story, and is worth 8 story points because it is most similar to: As a pm i'd like to have test coverage for both kafka source and sink modules so that we can assert its functionality as part of the ci builds. and similar to """"As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time."""" and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to upgrade to reactor 2.0 rc1 release so that we can synchronize with stable dependencies."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i should be able to leverage native _elasticsearch_ sink so that i can aggregate search and analyze data insights in real-time."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Surface the provenance of a default to the user when using @value for providing a default value in a module options pojo make it so that the rest api (and hence the module info command) advertises that 1) the expression was ${foo.something} 2) to the best extent possible (value may come from another property source) tell which config file it came from (introspecting the @propertysource annotation)"""" is a user story, and is worth 3 story points because it is most similar to: As a minimum we need some common polling strategy on the client side to detect status changes of job + streams etc. (e.g. during deployment of streams/jobs) ideally i would like to have this addressed on the server-side as well. it would be nice if we could propagate events between containers and admin-server that would inform about any changes in the system. we could then use those to notify connected ui clients. and similar to """"As a performance tester i'd like to rerun baseline benchmarks with batching enabled on rabbit so that i can compare the results with previous performance snapshots. note: - batchingenabled = true - batchingsize = 100 (default) we could also vary default size to compute and record at granular level."""" and similar to """"As a user i'd like to have a redis based _aggregation_ over field-value counters so that i can continuously write the aggregation in redis as we ingest more data. *scope:* * port specs from [previous implementation|https://github.com/spring-projects/spring-xd/wiki/old---aggregate-field-value-counters]. * identify gaps * update reference documentation"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Low story point/time improvements or bug fixes that can easily be picked up in a sprint in an ad-hoc manner"""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the ability to use expressions so i can dynamically name directories/files based on the timestamp or other intermediate data point."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Use descriptive texts for some module options defaults need a way to tell the user that this option will be determined at runtimelate bindings. in the module info command references to ${xd.stream.name} could read """"<use stream name>"""" for example)"""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to create initial version of the new module registry abstraction so we could leverage the foundation to make progress and test the respective spi ({{receptor}} or {{cloudcontroller}}) implementations. and similar to """"As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience."""" and similar to """"As a spring xd user i want to have the ability to customize the encoders and decoders used by the kafka source sink and bus so that i can customize data formats and choose the most appropriate strategy"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Refactor to use restoperations the current implementation makes use of cf-java-client which is relatively heavy for our needs. it should be removed in favour of a bespoke restoperations wrapper. see https://github.com/zteve/test-cc-oauth for sample code."""" is a not user story because it is most similar to: """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Update reactor stream processor to use latest snapshots the code base is changing a bit so using 2.0 m1 for development is stable up until all major jira issues have bee completed. then we should track snapshots in preparation to move to 2.0. m2 when it gets released."""" and similar to """"Using a newer version of a spring-xd dependency is ignored in packaging when creating a new module with a dependeny which has a newer version than the one spring-xd uses (in my example i use jedis 2.6.1 and spring-xd uses jedis 2.5.2) the packaging ignores the dependency. using the solution of spring-boot-maven-plugin doesn't help because it will only include what you explicitly add to the include section (transitive dependencies are not included)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Creating a tap throws an exception creating a tap throws an exception. in local mode: cannot resolve reference to bean 'redisconnectionfactory' while setting constructor argument nested exception is org.springframework.beans.factory.nosuchbeandefinitionexception: no bean named 'redisconnectionfactory' is defined but also fails when using redis."""" is a not user story because it is most similar to: """"Create test script that reproduces failure in writing to hdfs when undeploying and redeploying a stream see https://github.com/spring-projects/spring-xd/pull/415#issuecomment-29024329 this test should be created so that it reproduces the failure and then turned off so that when we switch to the new hdfs writing code"""" and similar to """"Ui: user should be able to launch a job from deployed jobs page from the deployed jobs page user should be able to click on the """"launch"""" button on a specific job and specify the job parameters as key value pairs in the text box and we will convert that into json string as jobparameters into joblaunch request."""" and similar to """"Add code coverage to gradle build build should be able to generate code coverage reports. after a quick tour of the intertubes it seems that jacoco is a well maintained project and has first class support inside gradle. http://www.gradle.org/docs/current/userguide/jacoco_plugin.html"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Jsr303 validation of options interferes with dsl completion when using a jsr303 annotated class for module options the binding failures should be bypassed as they interfere with completion proposals."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi. and similar to """"As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases."""" and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Metric repositories should support spring data crudrepository interface this provides common crud behavior and a shared interface that can be useful in testing scenarios."""" is a user story, and is worth 5 story points because it is most similar to: As a user i'd like to have the option of reliable hdfs writes (for stream pipelines) so i can get acknowledgement of actual hdfs _commits_ as opposed to just from the message bus. and similar to """"As a developer i'd like to create persistent repository for streams so i could leverage the persisted metadata and reestablish the streaming pipe under failure conditions."""" and similar to """"As a developer i'd like to continue lattice/diego poc so that i can identify the scope risks and the overall design for a pluggable spi in xd runtime."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Revise the available hadoopdistro options we should adjust our --hadoopdistro options to the ones supported in the new spring-data-hadoop 1.0.1.release - hadoop12 (default) cdh4 hdp13 phd1 hadoop20 this includes updating the wiki pages"""" is a not user story because it is most similar to: """"Add property maxmessagesperpoll to all polled sources polled message sources return only one message per poll by default. when polling say a file directory with many files files will be emitted once per {{fixeddelay}}. as a user i need to configure a limit for the number of messages that will be emitted per poll."""" and similar to """"Refactor containerregistrar decouple from deploymentlistener. make dl a public class to handle deployment related events. remove createsimplemodule() and createcomposedmodule() from dl. this will be delegated to moduledeployer which will eventually be further refactored to use the proposed modulefactory."""" and similar to """"Update sources twitter search section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#twittersearch"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update build to use shdp 2.2.0.rc1"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i would like to have shell interface to the spring-cloud-data rest api. the scope for this jira could be limited to stream commands."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add documentation on how to deploy xd to yarn"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Poc for spark integration *spike scope:* * experiment with identified options * poc with the logical integration choice"""" is a not user story because it is most similar to: """"Add ci job in bamboo to run xd integration tests ci job will run integration tests that are tagged for ci build."""" and similar to """"Change default container port from 9000 to something else change the default port since it conflicts with the default port for the http source"""" and similar to """"Add incremental load feature to batch docs the incremental load introduced with xd-2309 should be added to the batch docs"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade to spring boot 1.3 upgrade dependencies to spring boot 1.3.x"""" is a not user story because it is most similar to: """"Update spring-amqp to 1.3.1.release"""" and similar to """"Exclude slf4j transitive dependencies"""" and similar to """"Create documentation for the deployment manifest"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-s developer i'd like to investigate the right approach to port {{phd}} as the provider to support {{hdfs}} module from xd so i can decide better handling of hdfs dependencies which needs loaded and available in root cp at the runtime."""" is a not user story because it is most similar to: """"Refactor containerregistrar decouple from deploymentlistener. make dl a public class to handle deployment related events. remove createsimplemodule() and createcomposedmodule() from dl. this will be delegated to moduledeployer which will eventually be further refactored to use the proposed modulefactory."""" and similar to """"Spike: research request/reply support to kafka message bus the scope is to research the available options to provide request/reply support for kafka. * document findings * pocs previous desc: the bindrequestor and bindreplier methods of the message bus need to be implemented."""" and similar to """"Add partitioned job integration tests using other bus implementations {{jobcommandtests}} in xd-shell only uses a {{localmessagebus}} so the problem in xd-2323 was not discovered until a manual integration test was executed. at a minimum {{jobcommandtests.testlaunchpartitionedjob()}} should be run with all bus implementations."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Fail fast admin server if admin's embedded tomcat couldn't start during admin server startup if it fails due to embedded tomcat failure then the admin server instance still up and running. since its tomcat isn't running it can not handle any rest client requests. in this scenario we need fail fast the admin server process itself with better error message."""" is a user story, and is worth 5 story points because it is most similar to: As a build manager i'd like to setup ci infrastructure so that i can run integration tests in windows os automatically as we commit-trigger new builds. *scope:* * use the environment where bamboo is running * gain access to powershell * setup services (redis rabbit etc.) * kick-off ci task and similar to """"As a spring xd user i'd like to persist module (aka: {{cf apps}}) metrics directly so i can relay that information via rest-apis and not depend on the current coupling of {{xd-container}}'s. currently sboot's {{export()}} api allows us to snapshot metrics (default = {{redis}}) on a specific interval (default = {{5s}}). this could be something to explore as part of this scope."""" and similar to """"As a user i'd like to have a common shared location so that i can place the dependent jar's that are required by 2 or more custom modules. *current recommendation:* * place the dependent jar under xd/lib folder * if it necessary to support different versions of jar's then bundle it in custom module to get around the _classloader_ problem if a older/newer version exist in xd/lib"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Shell should display error messages returned from the server for example using tcpdump i can see both an exception and message information: 'http/1.1 500 internal server error server: apache-coyote/1.1 content-type: application/jsoncharset=utf-8 transfer-encoding: chunked date: fri 12 jul 2013 13:38:26 gmt connection: close 275 [{""""links"""":[]""""logref"""":""""messagehandlingexception""""""""message"""":""""org.springframework.context.applicationcontextexception: failed to start bean 'org.springframework.integration.monitor.integrationmbeanexporter#0#92e27d20-4c48-4131-866c-91b6cb642ca2' nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=nullchannel sends=0 receives=0]] with key 'xd.tap1:type=messagechannelname=nullchannelindex=1module=log' nested exception is javax.management.instancealreadyexistsexception: xd.tap1:type=messagechannelname=nullchannelindex=1module=log""""}] however the client only shows: http://localhost:8080:>tap create --name """"tap1"""" --definition """"tap@test1.file | log"""" --deploy true 14:38:26113 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/taps"""" resulted in 500 (internal server error) invoking error handler error creating tap 'tap1' the error doesn't seem to be logged in the xd admin server either so the information is effectively lost."""" and """"Hdfs sink partition path causing writes to be slower in certain cases i have not tested this on m7 but i believe it is the case with latest release as well. stream definition 1: stream create logingestion --definition """"rabbit --queues=demo --host=<rabbitmq-broker> | script --location=linemerge.groovy | hdfs --rollover=10m --idletimeout=10000 --fileuuid=true --directory=/data/loganalysis --partitionpath=path(payload.split('\u0001')[1]dateformat('yyyy/mm/dd/hh'payload.split('\u0001')[0]'yyyymmddhhmmss'))"""" we noticed this was causing writes to be slower stream definition 2: stream create logingestion --definition """"rabbit --queues=demo --host=<rabbitmq-broker> | script --location=linemerge.groovy | hdfs --rollover=10m --idletimeout=10000 --fileuuid=true --directory=/data/loganalysis """" but this definition caused the writes to be much faster. please note this was just a one time test i did and not reproduced multiple times. janne also seems to have reproduced this in another use case. thanks girish"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Support json to object register a json to object converter in the defaultcontenttypeawareconverterregistry. currently we only support object to json but not the other way. this may or may not work for an arbitrary object but is useful in many cases."""" is a not user story because it is most similar to: """"Export of data from hdfs to mongodb based on a single process spring batch job etl of data from hdfs to mongodb."""" and similar to """"Rest-client should not force usage of joda time the rest-client project should not impose joda to the user."""" and similar to """"Payload conversion will need to migrated to m6 as soon as m6 is available currently uses m5 dependency."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to upgrade to si 4.2.1 release so i can take advantage of the latest improvements."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Provide a clean way to get a reference to the messagebus running in singlenodeapplication currently the message bus is only obtained via module.getcomponent(messagebus.class). stream testing scenarios that depend on sending and receiving payloads via named channels do not require a deployed module instance per se but any stream flow control uses the messagebus directly. getting a deployed module instance in general is expensive e.g. you have to wait for the module to deploy asynchronously whereas the messagebus implementation could be known a priori when the application starts. an improvement would be to ask the container for its messagebus."""" is a not user story because it is most similar to: """"Deploy batch jobs on xd h2. narrative as a developer i need a way to deploy job configurations as well as the related custom code to xd. h2. acceptance criteria # provide the ability to register jobs that have been deployed as modules via something like {{curl -d """"job"""" http://localhost:8080/streams/myjob}} where job is the name of the job definition located in /modules/job and myjob is the name of the resulting registered job # confirm that both """"regular"""" jobs and spring hadoop based jobs can be packaged/run."""" and similar to """"Update the ec2 deployer ec2 deployer needs to change its configuration behavior to use environment variables vs. the property files * remove configuresystem class since we will use environment variables instead * allow users to set environment variables via the xd-ec2 properties. * if properties are not present use those that are available in the application.yml * utilize jclouds environment variable setup features to implement this behavior."""" and similar to """"When there are no wiretap listeners don't publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be """"serialized + transported + deserialized"""" to other members even if there is no one listening. this """"serialized + transported + deserialized"""" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Integrate grunt based ui build into the xd's gradle build blog post http://naleid.com/blog/2013/01/24/calling-gruntjs-tasks-from-gradle/ seems to be the definitive reference...."""" is a not user story because it is most similar to: """"Testers need ability to wait for a file to be created in xd directory user's need ability to wait for user specified time in millis for a file to be created in the xd directory. if file is not created in allotted time then return false else return true. also check to see if a file exists in the xd directory."""" and similar to """"Refactor exception handling and update javadocs for acceptance test [add javadocs to] * streamutils * httptest * mqtttest * jmssource [exception handling] streamutils stream method should throw illegalstateexception instead of a checked exception. xdec2validation assertreceived assertvalid should throw illegalstateexception instead of a checked exception"""" and similar to """"Update sink's tcp section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#tcp_sinks"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have the option to read the file line by line so i get the optional ootb optimum file reading experience."""" is a not user story because it is most similar to: """"User wants to restart failed job from scd user wants to restart a failed job via the cli. i.e. task relaunch job-instance id"""" and similar to """"Move binder to scs project move project out of https://github.com/pperalta/geode-scdf into https://github.com/spring-cloud/spring-cloud-stream"""" and similar to """"Spring xd processor module classloader issue: classnotfoundexception see http://stackoverflow.com/questions/32525290/spring-xd-processor-module-classloader-issue-classnotfoundexception"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update to spring shell 1.1 rc1"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Filejdbc job broken in distributed mode the filejdbc job is broken in distributed mode (redis and rabbit) to reproduce: export xd_transport=rabbit start xd-admin start xd-container start shell and create this job: {code} >job create mydata --definition """"filejdbc --names=col1col2col3 --resources=file:///home/trisberg/test/input/*.csv --initializedatabase=true"""" --deploy >job launch mydata {code} results in job starting but never completing: {code} >job execution list id job name start time step execution count execution status deployment status definition status -- -------- ------------------------------------ -------------------- ---------------- ----------------- ----------------- 0 mydata 2014-07-11 15:44:33 america/new_york 0 started deployed exists {code} steps: {code} step id step name reads writes commits rollbacks duration status details 0 step1-master 0 0 0 0 -1405349644032 ms executing 1 step1-master:partition0 292 292 3 0 302 ms completed 2 step1-master:partition1 292 292 3 0 203 ms completed 3 step1-master:partition2 292 292 3 0 193 ms completed {code} when using redis i also get this stacktrace in container: {code} 15:40:51220 info deploymentspathchildrencache-0 boot.springapplication - started application in 1.965 seconds (jvm running for 66.949) 15:40:51220 info deploymentspathchildrencache-0 core.simplemodule - initialized module: simplemodule [name=filejdbc type=job group=job1 index=0 @64a28a58] 15:40:51233 info deploymentspathchildrencache-0 redis.redismessagebus - binding requestor: job1.0 15:40:51236 info deploymentspathchildrencache-0 redis.redismessagebus - binding replier: job1.0 15:40:51243 info deploymentspathchildrencache-0 module.moduledeployer - deployed simplemodule [name=filejdbc type=job group=job1 index=0 @64a28a58] 15:40:57110 error inbound.job1.0-redis:queue-inbound-channel-adapter1 redis.redismessagebus$1 - failed to deliver message retries exhausted message sent to queue 'errors:name' org.springframework.messaging.messagehandlingexception: error occurred in message handler [org.springframework.integration.aggregator.aggregatingmessagehandler#0] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:84) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.simplemessagehandlermetrics.handlemessage(simplemessagehandlermetrics.java:106) org.springframework.integration.monitor.simplemessagehandlermetrics.invoke(simplemessagehandlermetrics.java:86) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy84.handlemessage(unknown source) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) sun.reflect.generatedmethodaccessor89.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.directchannelmetrics.monitorsend(directchannelmetrics.java:113) org.springframework.integration.monitor.directchannelmetrics.doinvoke(directchannelmetrics.java:97) org.springframework.integration.monitor.directchannelmetrics.invoke(directchannelmetrics.java:91) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy78.send(unknown source) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:109) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:94) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:260) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:241) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:205) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:199) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:177) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.xd.dirt.integration.redis.redismessagebus$1$1.dowithretry(redismessagebus.java:251) org.springframework.xd.dirt.integration.redis.redismessagebus$1$1.dowithretry(redismessagebus.java:247) org.springframework.retry.support.retrytemplate.doexecute(retrytemplate.java:263) org.springframework.retry.support.retrytemplate.execute(retrytemplate.java:168) org.springframework.xd.dirt.integration.redis.redismessagebus$1.dosend(redismessagebus.java:247) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:109) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:94) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:98) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.popmessageandsend(redisqueuemessagedrivenendpoint.java:211) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.access$300(redisqueuemessagedrivenendpoint.java:50) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint$listenertask.run(redisqueuemessagedrivenendpoint.java:290) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) java.lang.thread.run(thread.java:744) caused by: java.lang.illegalstateexception: null correlation not allowed. maybe the correlationstrategy is failing? org.springframework.util.assert.state(assert.java:385) org.springframework.integration.aggregator.abstractcorrelatingmessagehandler.handlemessageinternal(abstractcorrelatingmessagehandler.java:383) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ... 60 more 15:41:00129 error inbound.job1.0-redis:queue-inbound-channel-adapter1 redis.redismessagebus$1 - failed to deliver message retries exhausted message sent to queue 'errors:name' org.springframework.messaging.messagehandlingexception: error occurred in message handler [org.springframework.integration.aggregator.aggregatingmessagehandler#0] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:84) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.simplemessagehandlermetrics.handlemessage(simplemessagehandlermetrics.java:106) org.springframework.integration.monitor.simplemessagehandlermetrics.invoke(simplemessagehandlermetrics.java:86) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy84.handlemessage(unknown source) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) sun.reflect.generatedmethodaccessor89.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.directchannelmetrics.monitorsend(directchannelmetrics.java:113) org.springframework.integration.monitor.directchannelmetrics.doinvoke(directchannelmetrics.java:97) org.springframework.integration.monitor.directchannelmetrics.invoke(directchannelmetrics.java:91) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy78.send(unknown source) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:109) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:94) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:260) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:241) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:205) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:199) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:177) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.xd.dirt.integration.redis.redismessagebus$1$1.dowithretry(redismessagebus.java:251) org.springframework.xd.dirt.integration.redis.redismessagebus$1$1.dowithretry(redismessagebus.java:247) org.springframework.retry.support.retrytemplate.doexecute(retrytemplate.java:263) org.springframework.retry.support.retrytemplate.execute(retrytemplate.java:168) org.springframework.xd.dirt.integration.redis.redismessagebus$1.dosend(redismessagebus.java:247) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:109) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:94) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:98) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.popmessageandsend(redisqueuemessagedrivenendpoint.java:211) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.access$300(redisqueuemessagedrivenendpoint.java:50) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint$listenertask.run(redisqueuemessagedrivenendpoint.java:290) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) java.lang.thread.run(thread.java:744) caused by: java.lang.illegalstateexception: null correlation not allowed. maybe the correlationstrategy is failing? org.springframework.util.assert.state(assert.java:385) org.springframework.integration.aggregator.abstractcorrelatingmessagehandler.handlemessageinternal(abstractcorrelatingmessagehandler.java:383) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ... 60 more {code}"""" and """"As a user i'd like to have the option to delete the queues/topics so that we can include an _optional_ attribute as part of the stream destroy command to also clean-up the associated queues/topics. *notes:* * spring-amqp {{rabbitadmin}} now has a {{getqueueproperties()}} method which returns the number of consumers so it may be possible to use it for this purpose. * consider the possibility of _producers_ and/or _queues_ still containing data * consider the scenario even after the topics/queues are cleaned-up what to do with fanout exchange? *some further thoughts* * consider using the upcoming spring amqp rest api {{rabbitmanagementtemplate}} if the timing is not right we could temporarily invoke the rabbit rest api directly. * should be optional perhaps via {{stream destroy foo --clean}} * should this be done by the admin? or via a new plugin handling module undeployments - in the rabbit case undeploying a consumer would check for us being the last consumer and remove the queue/binding/exchange since we undeploy left->right everything can be cleaned up on the consumer side. * third option would be new methods on the bus {{cleanconsumer}} etc invoked by the {{streamplugin}} * down side of doing it on the admin is that he wouldn't necessarily know which rabbit cluster a stream was deployed to - so it probably has to happen on the container - even so we'd need the admin url(s) for the cluster."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add support to set the read timeout for http request we need to have the ability to set read timeout for http request. this is already implemented here: https://github.com/springsource/rest-shell/"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a user i need a """"production-ready' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x"""" and similar to """"As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Unable to set --closetimeout on scsm hdfs sink module creating a stream like this: stream create --name myhdfsstream1 --definition """"time | hdfs --closetimeout=5000"""" --deploy causes: java.lang.illegalargumentexception: task executor must be set at org.springframework.util.assert.notnull(assert.java:115) ~[spring-core-4.2.1.release.jar!/:4.2.1.release] at org.springframework.data.hadoop.store.support.pollingtasksupport.init(pollingtasksupport.java:105) ~[spring-data-hadoop-store-2.3.0.m2.jar!/:2.3.0.m2] at org.springframework.data.hadoop.store.support.storeobjectsupport.oninit(storeobjectsupport.java:97) ~[spring-data-hadoop-store-2.3.0.m2.jar!/:2.3.0.m2] at org.springframework.data.hadoop.store.support.outputstoreobjectsupport.oninit(outputstoreobjectsupport.java:81) ~[spring-data-hadoop-store-2.3.0.m2.jar!/:2.3.0.m2] at org.springframework.data.hadoop.store.support.lifecycleobjectsupport.afterpropertiesset(lifecycleobjectsupport.java:67) ~[spring-data-hadoop-store-2.3.0.m2.jar!/:2.3.0.m2] at org.springframework.cloud.stream.module.hdfs.sink.datastorewriterfactorybean.afterpropertiesset(datastorewriterfactorybean.java:175) ~[hdfs-sink-1.0.0.build-snapshot-exec.jar!/:1.0.0.build-snapshot] at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.invokeinitmethods(abstractautowirecapablebeanfactory.java:1637) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.initializebean(abstractautowirecapablebeanfactory.java:1574) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] ... 35 common frames omittedwrapped by: org.springframework.beans.factory.beancreationexception: error creating bean with name 'datastorewriter' defined in class path resource [org/springframework/cloud/stream/module/hdfs/sink/hdfssinkconfiguration.class]: invocation of init method failed nested exception is java.lang.illegalargumentexception: task executor must be set at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.initializebean(abstractautowirecapablebeanfactory.java:1578) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:545) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:482) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:305) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:301) ~[spring-beans-4.2.1.release.jar!/:4.2.1.release] at org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbea"""" and """"Filejdbc job throws exception during acceptance tests currently the testfilejdbcjobmultipleinvocations fails on line 156 stating data is different in table that what is expected. currently this is failing on the single admin/container deployment using redis as a transport. also seeing the following exception in the attached log: {noformat} 2.0.0.snap error xdbus.job:ec2job3.0.requests-1 step.abstractstep - encountered an error executing step step1 in job ec2job3 org.springframework.batch.item.itemstreamexception: failed to initialize the reader ... caused by: java.lang.illegalstateexception: input resource must exist (reader is in 'strict' mode): url [file:/tmp/xd/output/filejdbctest/filejdbctest1.out] {noformat} the file is should be present and data present for the test. at least according to the checker on ec2 and local deployments."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add stream/job destroy option at the ui add an option to destroy the stream/job definitions. also add confirm action that asks for user to confirm to proceed with destroy."""" is a not user story because it is most similar to: """"Update creating a processor module section to use shell commands instead of curl """"test the deployed module"""" sub-section uses curl."""" and similar to """"Add ci acceptance test for 1.2.x need acceptance tests to run on the 1.2.x branch. needs to be setup as a child of the publish 1.2.x"""" and similar to """"Update documentation for kafka sources include new features added by using spring integration kafka m3"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove jersey test framework for xd/lib distribution the jars jersey-test-framework-core-1.9.jar jersey-test-framework-grizzly2-1.9.jar are incorrectly classified as compile time deps in hadoop vs. testcompile."""" is a not user story because it is most similar to: """"List runtime modules by wrong containerid should throw exception with pr#340 listing of runtime modules with a non-existent containerid will display empty table. instead we can throw exception saying container doesn't exist."""" and similar to """"Remove jmxenabled as a cmdline option and enable jmx by default after some discussion and voting we decided to remove """"jmxenabled"""" as a command line option and have jmx enabled by default. this can be disabled from xd-config.yml externally."""" and similar to """"Upgrade asciidoctor toolchain this will in turn allow us to get rid of the custom logic for handling crossref links between documents"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Create aggregator module create a processing module based on si's aggregator component. the completion criteria for the aggregator should be a simple count of messages (e.g. received 50 messages) and a timeout so that messages don't stay in the aggregator module for more than 30 seconds. *implementation suggestions* create an xml based processing module definition using the si aggregator namespace. only the options to support the features in the description should be exposed as property placeholders. *how to know it works* a shell style integration test that has a source that sends a known amount of messages. a ticktock like module would perhaps be a good example. 10 messages sent every 100ms with an aggregator set to a 'aggregate count' of 10 should have 1 message output (perhaps to file sink whose name is based on time as well is that possible.). a ticktock example with a 1 second delay and with the aggregator module set to have a timeout of 0.5 seconds will have only one message in the file (again assumign the file name has a timestamp/counter in the filename)."""" and """"Getting stuck on hive error. in hadoop while creating table in hive i am getting stuck in below error 15/04/21 12:35:34 info log.perflogger: <perflog method=driver.run from=org.apache.hadoop.hive.ql.driver> 15/04/21 12:35:34 info log.perflogger: <perflog method=timetosubmit from=org.apache.hadoop.hive.ql.driver> 15/04/21 12:35:34 info log.perflogger: <perflog method=acquirereadwritelocks from=org.apache.hadoop.hive.ql.driver> 15/04/21 12:35:34 info lockmgr.dummytxnmanager: creating lock manager of type org.apache.hadoop.hive.ql.lockmgr.zookeeper.zookeeperhivelockmanager 15/04/21 12:35:34 info zookeeper.zookeeper: initiating client connection connectstring=dkhc3013.dcsg.com:2181dkhc3010.dcsg.com:2181dkhc3011.dcsg.com:2181 sessiontimeout=600000 watcher=org.apache.hadoop.hive.ql.lockmgr.zookeeper.zookeeperhivelockmanager$dummywatcher@5b9e1cd4 15/04/21 12:35:34 debug lockmgr.dummytxnmanager: adding /incoming/mkt/gcdb.etl_master_account_pref to list of lock inputs 15/04/21 12:35:34 debug lockmgr.dummytxnmanager: adding database:mkt_incoming to list of lock outputs after restart the zookeeper service i am able to successfully run the query but after some time again facing the same issue/error i am stuck on the same error. is there any solution to overcome this issue or any tuning i can do for resolve this issue. please suggest on this."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update xd-ec2 to use placement groups"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"User wants ability to test processors be able to point to the processor xml file e.g. modules/processors/transformer.xml and have access to a source channel that drives messages into the processor and a output channel where output messages are send. the outbound channel is queue backed. test sending json to a processor module that uses tuples."""" is a not user story because it is most similar to: """"Update doc about modules and spring the doc at http://docs.spring.io/spring-xd/docs/1.0.0.m3/reference/html/#_modules_and_spring refers to an old version of the counter sink when it was still hardwired to use redis. the text next to it that explains placeholders is out of date (with respect to the redis placeholders)"""" and similar to """"Use hateoas traverson for client side consumption now that spring hateoas has some support for client side consumption we can consider using its traverson object to replace code such as {noformat} resources.put(""""streams/definitions"""" uri.create(xdruntime.getlink(""""streams"""").gethref() + """"/definitions"""")) resources.put(""""streams/deployments"""" uri.create(xdruntime.getlink(""""streams"""").gethref() + """"/deployments"""")) resources.put(""""jobs"""" uri.create(xdruntime.getlink(""""jobs"""").gethref())) {noformat} in springxdtemplate etc."""" and similar to """"Defaultcontainermatcher - improve logging and mention affected module when deploying a definition with a container match criteria specified and no container could be selected - the logging is ambiguous and should mention the affected module: {code} 11:58:24089 warn deploymentsupervisorcachelistener-0 cluster.defaultcontainermatcher - no currently available containers match criteria 'somecriteria' {code}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create reactor module in spring-xd-modules project"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-s user i'd like to have {{gemfire}} message-channel binder so i can use {{gemfire}} as the messaging middleware for low latency use-cases."""" is a not user story because it is most similar to: """"User requires wiki page on how to use the xd ec2 installer add instructions to github wiki on the usage of the installer"""" and similar to """"Empty parameter sent to job when launched from ui job gets a empty key:value pair when launching the job from the admin-ui."""" and similar to """"Jobs list rest endpoint should include deployed/undeployed status currently the jobs definition list rest endpoint doesn't include deployed/undeployed status on a given job."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Command to deploy a job deploy an existing job. must exist in the jobsrepository"""" is a not user story because it is most similar to: """"Spike for deployment spi spi for deployment on to yarn + local 'dirt' cluster."""" and similar to """"Update batch job docs to cover triggers as a source"""" and similar to """"Ui: the user should be able to view metrics about an executed job."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Make processor:header-enricher available"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update document for the distributed runtime based on rc1 changes this should be included on the wiki providing a thorough overview of how the distributed runtime works under-the-hood including details of the various zookeeper nodes and associated watchers etc. for example it should describe the role of *any* admin as a provider of the rest api as well as the specific roles allocated to the single *leader* admin. it should describe module recovery after container failure as well as some description of various failure scenarios (crashed jvm network partition etc) and how the recovery should be expected to occur (e.g. in some cases it will be nearly immediate and in other cases it will be after a timed out connection). intentional container shutdown should be included in that discussion as well. at many points this doc could link back to items that we also need to add to the main user guide such as the description of containermatcher as the strategy for an admin to determine which container(s) should deploy a given module since that containermatcher is used not only for the initial deployment but also any redeployment that may be necessary."""" is a not user story because it is most similar to: """"Refactor streamparser to return a streamdefinition {code} streamdefinition sd = streamparser.parse(name dsltext) {code} we should also consider explicit methods such as parsestream (so that parsejob and parsecomposedmodule are at least separate methods if not separate parser classes that share the common parser support class that is the core of today's parser). the parsing for """"completion providers"""" should probably be spun off to its own class as well. in the end there should be no need for a parsingcontext enum but rather more explicitly named methods and dedicated classes if that seems like the right approach. the streamdefinition should be composed of """"moduledescriptors"""" (that name is not set in stone) and other stream-level metadata like source/sink channels consider merging some of streamfactory code there and the rest into streamdeployer merge moduledescriptor and moduledeploymentrequest as part of this effort (again a new name could be considered but moduledescriptor should take precedence over moduledeploymentrequest) and note in the process that moduledescriptor was originally designed to be immutable (taking constructor args) but as we migrated the prototype code into xd itself this was violated. we may want to consider a builder approach and we likely want to avoid the need for a moduledefinition within the moduledescriptor."""" and similar to """"Bind producer before consumer {quote} here is the full exception: org.springframework.messaging.messagedeliveryexception: dispatcher has no subscribers for channel 'resourceconfiguredmodule [name=filter type=processor group=request-rate index=0 @58b0f318]:use-expressiondefaultadminsinglenodehsqldbserver:9393.output'. nested exception is org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers and here is that stream: topic:httpstartstop > filter --expression=payload.gethttpstartstop().getpeertype().name().equals('client') | requestrateaggregator | appmetricssplitter | router --expression='topic:app-request-rate-'+#jsonpath(payload'$.appid') [2:59 pm] gary russell: @markfisher @ilayaperumalgopinathan @patrickperalta this looks like another (not fixed by the previous fix) timing problem with taps when using singlenode. the tap is started before the tap stream is deployed. but it's not clear to me how the filter module could be deployed/bound as a consumer before the requestrateaggregator [3:08 pm] gary russell: i see the problem: abstractmessagebusbinderplugin.bindconsumerandproducers() binds the consumer before the producer - this is the wrong order for a passive component such as the filter. /cc @davidturanski {quote}"""" and similar to """"Temporary race condition between deployment and """"runtime modules"""" command the """"runtime modules"""" command can show a failure between the deployment command and the actual deployment on the container node especially if there is a network hop. this clears up once the module is fully deployed. {code} xd:>stream create --name trois3 --definition """"time | jdbc"""" --deploy created and deployed new stream 'trois3' xd:>runtime modules command failed org.springframework.xd.rest.client.impl.springxdexception: java.lang.runtimeexception: org.apache.zookeeper.keeperexception$nonodeexception: keepererrorcode = nonode for /xd/deployments/modules/bc95653e-9da5-4738-beb2-f215e4003318/trois3.source.time-0/metadata xd:>runtime modules module container id options -------------------- ------------------------------------ ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- trois3.source.time-0 bc95653e-9da5-4738-beb2-f215e4003318 {format=yyyy-mm-dd hh:mm:ss fixeddelay=1} wintu.sink.jdbc-1 bc95653e-9da5-4738-beb2-f215e4003318 {tablename=${xd.stream.name} url=jdbc:hsqldb:hsql://carbon:9102/xdjob columns=payload driverclassname=org.hsqldb.jdbc.jdbcdriver initializedatabase=false initializerscript=init_db.sql username=sa} trois3.sink.jdbc-1 d0ad8eda-be27-46ac-86be-e43b5d9921af {tablename=${xd.stream.name} url=jdbc:hsqldb:hsql://carbon:9102/xdjob columns=payload driverclassname=org.hsqldb.jdbc.jdbcdriver initializedatabase=false initializerscript=init_db.sql username=sa} wintu.source.time-0 befa5f27-aac3-4d94-9171-77c07036ec75 {format=yyyy-mm-dd hh:mm:ss fixeddelay=1} {code}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Redis 'install-redis' script fails on ubuntu64 the installation script for redis fails on ubuntu64 when trying to untar the redis distribution. the script uses redis_zipname instead of redis_zip_path. this bug will be seen on any linux 64 bits platform and looking at the code even linux 32 bits platform."""" is a not user story because it is most similar to: """"Refactor src/test/resources in dirt * in the testmodules.source ** rename source-config to packaged-source ** rename source-config to packaged-source-no-lib * all xml files should be prefixed with test. i.e. testsource testsink * make sure all tests pass with new configuration"""" and similar to """"Automatic support for --fooexpression style options it would be nice if either one of the two options would come """"for free"""" when you're authoring a module. currently it has been a pain including handling exclusivity of options at the module options level. also it would be nice if xd/s-c-s provided ease of creation of xxexpression style options (ie not having the author have to deal with expressionparser etc)"""" and similar to """"Add definition of serialversionuid to twitter classes add serialversionuid to the objects in package org.springframework.integration.x.twitter: * xdentities * xdurlentity * xdhashtagentity * xdmentionentity * xdmediaentity * xdtickersymbolentity * xdtweet the absence creates warnings during compile time."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Dispatcher has no subscriber error when posting a message to a stream this has been observed intermittently with redis transport by myself and others when sending a message to a valid stream. not sure how to recreate it yet. 11:27:10082 error threadpooltaskscheduler-1 redis.redisqueueinboundchanneladapter:126 - error sending message org.springframework.integration.messagedeliveryexception: dispatcher has no subscribers for channel 'org.springframework.context.support.genericapplicationcontext@3f73865d.input'."""" is a not user story because it is most similar to: """"The ability to route within streams a flow or a processor component may require routing semantics. currently the stream assumes a single input and output for each module. a flow may support multiple outputs - switch routing that is - recipient list is not currently supported (another subtask?). we need to support semantics like: a |[output.foo:coutput.bar:ddefault:e]"""" and similar to """"Make the parser aware of message conversion configuration enhance the stream parser to take message conversion into account in order to validate or automatically configure converters. for example: {noformat:nopanel=true} source --outputtype=my.foo | sink --inputtype=some.other.bar is likely invalid since xd doesn't know how to convert foo->bar. {noformat}"""" and similar to """"Create joblaunchrequest transformer the joblaunchrequest transformer shall accept the following payloads: * file * json string * properties * map * tuple use/migrate some of the logic from *jobparametersbean* e.g. using the *defaultjobparametersconverter*. *special case file* when handling a *file* add special jobparameter *absolutefilepath* populating it with *message.getpayload().getabsolutepath()* * add unit tests"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add paging and sorting to field value counter api see discussion at https://github.com/spring-projects/spring-xd/commit/2f0e80b5e337b71c9c70de510a44d2f050d10fa7"""" is a user story, and is worth 1 story points because it is most similar to: As a module developer i would like the jsonstringtotupleconverter in the spring cloud streams project to maintain the types provided in the json string and not convert everything to a string representation. and similar to """"As a temporary work around to fix xd-1935 make producible media type to 'application/json' for job executions get request endpoints."""" and similar to """"As a user i'd like to have a landing page with higher-order links for sources processors sinks and jobs so i can jump to right section from one place."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update spring-data-hadoop version to 2.0.4 for xd 1.0.3"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Refactor modulefactory to remove direct spark dependency on xd dirt currently the modulefactory needs to know about `sparkstreamingdrivermodule` to create the spark streaming module. it is for this reason the spring-xd-module has direct dependency on spark streaming. we need to refactor this code so that there is no direct dependency on spark streaming for spring-xd-module and subsequently spring-xd-dirt."""" is a not user story because it is most similar to: """"Create xdcontainer class to start stream server provide optional command line arg to embed the container launcher aka - xd-admin server. xdcontainer.sh --embeddadmin"""" and similar to """"Create reactormessagehandler for reactor based xd processor/sink modules the module should be flexible to act as a sink as well as a processor. errorhandling will be considered as part of another jira"""" and similar to """"Xd cluster view: improve hover over capabilities please see the discussion here: https://github.com/spring-projects/spring-xd/pull/1183#issuecomment-55917701"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Sqooprunner should use resource manager scheduler option in sqooprunner we manually set rm address fs address and yarn classpath. yarnconfiguration.rm_scheduler_address is also needed for appmaster to function properly. current workaround is to use config values which gets imported automatically: {code} spring: hadoop: config: yarn.resourcemanager.scheduler.address: <host>:8030 {code}"""" is a not user story because it is most similar to: """"[flo] ui unresponsive after some time the chrome ui interface for flo stream creation stops responding after some time. it starts working once the browser history/ cookies etc. are cleaned up. . the drop down stops working . i'm unable to look at or edit module properties . connecting different modules doesn't work either . drag and drop operations still work . command line stream creation still works is anyone else facing these issues ? thanks !"""" and similar to """"Enforce consistent naming across cli options and command/template/operations method names e.g. see comment on pr #390: https://github.com/spring-projects/spring-xd/pull/390/files#r7563787 in that case it's """"delete"""" in one place and """"destroy"""" in another. there are other cases as well."""" and similar to """"Change inconditionnal thread.sleep() calls in tests to smarter incremental pauses there are a lot of thread.sleep() calls with delays chosen in the 1-2 seconds range. change to a while loop with smaller pauses until a timeout is reached and give up. this applies to verification code (e.g. verifying that a counter has expected value) as well as file setup or http being ready to accept requests etc"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add command for deleting a tap"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have the ability to access the random port (generated by tomcat) of the admin server (via _xd-shell_) so that i can point to the server and continue my interactions. *spike details:* * research whether connecting _xd-shell_ directly to zk is a good approach or have a lb in-charge for the interaction. * how about something other than a pointer to a zk directory in the shell for folks to experiment a bit before getting a lb involved? *note:* on some hadoop/hdfs setups access to zk is mandatory from hdfs client libs. there are some ha and federation setups which would anyway require xd shell to get access to zk if fs shell commands are used."""" is a not user story because it is most similar to: """"Update launcher.xml to have protocol independent beans defined and an import statement to load protocol specific defintiions from a system property defined location. launcher.xml can make use of the system property xd.pipeprotocol inside an import statement. this determines which version of the xd infrastructure to load for example what channelregistry implementation local or redis based or specific message listener containers. file name conventions should be used so if the option passed in from the command line is --pipeprotocol localchannel then the xml filename looked for has the 'protocol' suffix applied e.g. localchannelprotocol and is loaded via the classpath. redis and local will not be the only options other implementations will be provided in the future e.g. rabbit and the user may be able to provide their own implementations of these infrastructure classes (an advanced task)."""" and similar to """"Npe on stream destroy xd:>stream create ticktock --definition """"time | log"""" --deploy true 18:45:13310 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 400 (bad request) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: there is already a stream named 'ticktock' xd:>stream destroy ticktock 18:45:16505 warn spring shell client.resttemplate:524 - delete request for """"http://localhost:8080/streams/ticktock"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: java.lang.nullpointerexception caused by: java.lang.nullpointerexception org.springframework.xd.dirt.module.moduledeployer.undeploy(moduledeployer.java:143) org.springframework.xd.dirt.module.moduledeployer.handlemessageinternal(moduledeployer.java:97)"""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create a spring cloud stream timestamp task module create a timestamp job that will be used a a sample for users to create their own spring boot based jobs."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to rerun _baseline_ _tuple_ and _serialized_ payloads so i can compare the differences in performance between 0.8.1 and 0.8.2 kafka releases. note: 1.1.1 > benched against 0.8.1 1.2 > benched against 0.8.2 and similar to """"As a user i'd like to have the option to supply data partitioning strategy so that i can parallelize ingest of data from rdbms to hdfs."""" and similar to """"As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Defaultcontainermatcher should make a better attempt at round-robin distribution currently the index is used globally but applied to a range of candidates that can differ based on the match criteria per invocation."""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to have the option to specify system properties that will be passed in to the sqoop job which runs in it's own java process. this is needed for defining memory usage and also for defining some options for various connector implementations."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the option of _jmx_ source module so that i can publish/subscribe to jmx notifications. *reference:* [sprint integration jmx support|http://docs.spring.io/spring-integration/reference/html/system-management-chapter.html#jmx]"""" is a user story, and is worth 1 story points because it is most similar to: As a user i'd like to have guidance to create custom modules so that i can align the development practices with recommended approach. 11/20: update: scope of this task is to create an example to demonstrate and document the capability. and similar to """"As a user i'd like to have the option to change the default sqoop _metastore_ so i can implement a db of my choice and not tied to default specifications. refer to this [thread|http://stackoverflow.com/questions/24078668/how-to-change-sqoop-metastore] for more details."""" and similar to """"As a user i logged in with role_create and i get an error while trying job creation from admin_ui. i can create job from the shell successfully. trying the same workflow with role_admin results with the same error as well. i don't see anything in the admin/container logs about the error itself."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Twittersearch: arrayindexoutofboundsexception {noformat} 0:44:30715 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception: 255 groovy.json.internal.charbuf.doaddjsonescapedstring(charbuf.java:525) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:394) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:357) groovy.json.jsonoutput.writecharsequence(jsonoutput.java:309) groovy.json.jsonoutput.writeobject(jsonoutput.java:260) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writeiterator(jsonoutput.java:442) groovy.json.jsonoutput.writeobject(jsonoutput.java:272) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.tojson(jsonoutput.java:204) org.springframework.integration.x.twitter.twittersearchchanneladapter.dosendline(twittersearchchanneladapter.java:137) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:200) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:186) org.springframework.web.client.resttemplate.doexecute(resttemplate.java:549) org.springframework.web.client.resttemplate.execute(resttemplate.java:517) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.readstream(abstracttwitterinboundchanneladapter.java:180) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.run(abstracttwitterinboundchanneladapter.java:158) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:54) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) 20:44:30718 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:31136 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception: 255 groovy.json.internal.charbuf.doaddjsonescapedstring(charbuf.java:525) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:394) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:357) groovy.json.jsonoutput.writecharsequence(jsonoutput.java:309) groovy.json.jsonoutput.writeobject(jsonoutput.java:260) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writeiterator(jsonoutput.java:442) groovy.json.jsonoutput.writeobject(jsonoutput.java:272) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.tojson(jsonoutput.java:204) org.springframework.integration.x.twitter.twittersearchchanneladapter.dosendline(twittersearchchanneladapter.java:137) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:200) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:186) org.springframework.web.client.resttemplate.doexecute(resttemplate.java:549) org.springframework.web.client.resttemplate.execute(resttemplate.java:517) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.readstream(abstracttwitterinboundchanneladapter.java:180) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.run(abstracttwitterinboundchanneladapter.java:158) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:54) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) 20:44:31137 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:31525 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception: 255 groovy.json.internal.charbuf.doaddjsonescapedstring(charbuf.java:525) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:394) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:357) groovy.json.jsonoutput.writecharsequence(jsonoutput.java:309) groovy.json.jsonoutput.writeobject(jsonoutput.java:260) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writeiterator(jsonoutput.java:442) groovy.json.jsonoutput.writeobject(jsonoutput.java:272) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.tojson(jsonoutput.java:204) org.springframework.integration.x.twitter.twittersearchchanneladapter.dosendline(twittersearchchanneladapter.java:137) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:200) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:186) org.springframework.web.client.resttemplate.doexecute(resttemplate.java:549) org.springframework.web.client.resttemplate.execute(resttemplate.java:517) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.readstream(abstracttwitterinboundchanneladapter.java:180) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.run(abstracttwitterinboundchanneladapter.java:158) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:54) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) 20:44:31526 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:31948 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception: 255 groovy.json.internal.charbuf.doaddjsonescapedstring(charbuf.java:525) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:394) groovy.json.internal.charbuf.addjsonescapedstring(charbuf.java:357) groovy.json.jsonoutput.writecharsequence(jsonoutput.java:309) groovy.json.jsonoutput.writeobject(jsonoutput.java:260) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writeiterator(jsonoutput.java:442) groovy.json.jsonoutput.writeobject(jsonoutput.java:272) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.writeobject(jsonoutput.java:270) groovy.json.jsonoutput.writemap(jsonoutput.java:425) groovy.json.jsonoutput.tojson(jsonoutput.java:204) org.springframework.integration.x.twitter.twittersearchchanneladapter.dosendline(twittersearchchanneladapter.java:137) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:200) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask$2.extractdata(abstracttwitterinboundchanneladapter.java:186) org.springframework.web.client.resttemplate.doexecute(resttemplate.java:549) org.springframework.web.client.resttemplate.execute(resttemplate.java:517) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.readstream(abstracttwitterinboundchanneladapter.java:180) org.springframework.integration.x.twitter.abstracttwitterinboundchanneladapter$streamreadingtask.run(abstracttwitterinboundchanneladapter.java:158) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:54) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) 20:44:31949 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:32345 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:32346 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:32727 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:32727 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:33103 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:33104 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:33548 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:33548 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:33935 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:33935 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:34318 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:34318 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:34696 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:34696 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:35060 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:35061 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:35445 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:35445 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:35825 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:35825 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:36221 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:36221 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:36602 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:36602 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:37006 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:37006 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:37396 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:37396 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:37790 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:37790 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:38179 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:38179 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:38559 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:38559 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:38967 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:38967 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:39365 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:39365 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:39747 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:39747 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:40179 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:40179 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:40596 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:40597 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:40978 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:40979 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:41342 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:41342 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:41732 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:41732 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:42125 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:42126 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:42511 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:42512 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:42918 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:42918 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:43309 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:43309 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:43689 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. java.lang.arrayindexoutofboundsexception 20:44:43689 warn task-scheduler-6 twitter.twittersearchchanneladapter:231 - exception while reading stream waiting for 250 ms before restarting 20:44:44071 warn task-scheduler-6 twitter.twittersearchchanneladapter:173 - exception while reading stream. ..."""" and """"Add dynamic addition to module registry as an s-c-d user i'd like to contribute modules that immediately reflects in module registry so i can create stream or task definitions using the shell/rest-api's. currently the registry isn't flexible as it is pretty much [hard-coded at registry bootstrap level|https://github.com/spring-cloud/spring-cloud-dataflow/blob/master/spring-cloud-dataflow-admin/src/main/java/org/springframework/cloud/dataflow/admin/config/moduleregistrypopulator.java#l75]."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Exception consistency favor using custom exceptions instead of using assert.notnull review usage and make changes. eg. if a stream can't be found (or another definition) a 'xyznotfoundexception' instead of assert.null on the return value of a findone method"""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a performance tester i'd like to investigate why there's high cpu startup time for both admin and container servers. perhaps profiling would assist isolating the bottlenecks. *scope:* * identify the bottlenecks * document reasons * list pros/cons"""" and similar to """"As a user i'd like to have an ootb _jdbcgpfdist_ batch job so i can read from jdbc and write to hawq/gpdb using _gpfdist_ protocol. the scope is to reuse the existing gpfdist sink code and adapt it to fit the batch model (_gpfdist_ writer)."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Document jdbc module"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create compositemoduleregistry currently there is no moduleregistry contract for composite modules. the composed module definition is maintained in zookeepermoduledefinitionrepository which delegates to the moduleregistry to define and validate component modules. the repository should be converted to a moduleregistry."""" is a not user story because it is most similar to: """"Ui: list of streams causes """"undefined is not an option"""" see screenshot. the error is caused when loading all stream definitions in method *loadstreamdefinitions*. only 1 or two streams exist in the system."""" and similar to """"Provide xd-shell integration for deploying xd on yarn command such as yarn app list yarn deploy-xd --zipfile /tmp/myapp.zip --config /tmp/myconfig.yml"""" and similar to """"Replace beandefinitionaddingbeanpostprocessor with ordered plugins this will allow us to control the order of plugins and use plugin(s) to manage the common module context replacing beandefinitionaddingbeanpostprocesser"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create an aggregate counter an aggregate counter rolls up counts into discrete time buckets. there is an existing poc implementation in java based off the library https://github.com/thheller/timed-counter the readme there has a good description of the desired feature set."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to bench kafka as message bus using in-built perf-testing producer/consumer utilities so that i can use that as a foundation to build xd use-cases and measure performance. i'd like to reproduce baseline performance metrics as identified by the kafka [engineering team|https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines]. and similar to """"As a user i'd like to have a _r_ processor so i can efficiently perform data computations and statistical analysis in the context of streaming pipeline. investigate the right approach that fits spring xd model. *r java libraries* [rjava|http://rforge.net/rjava/] [renjin|http://www.renjin.org/]"""" and similar to """"As a s-c-d developer i'd like to provide optional key-value pairs as deployment properties so i could leverage them at the runtime to instruct how the modules will be deployed. _the scope of this story is to specifically support {{count}} to represent {{n}} instances of modules that share the same environment variables._"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Create composed job module h2. narrative as an xd developer i need to be able to create a composed job module as xml from the dsl an store it in the module file repository. while the user uses the composed job as if it is a normal job including seeing only the dsl. in the background the jobfactory will deploy the composed job module. * when the user destroys the job the module will be deleted from the file module repository. * when the user creates the job a module will be created in the file module repository. h2. back story for the composed job story we need to create a """"real"""" job module to be expressed in xml so that we can take advantage of the job execution tasklet in xd-3556 so that each job can be executed as a step in the composed job."""" and """"Job launch should throw exception if the job is not deployed in the container while processing the """"job launch"""" request the moduledeployer checks if the job is already deployed if not it deploys the job before launching it. this approach causes issue in case of multiple containers environment where the job is deployed in one container(1) but the """"job launch"""" request is picked up by other container(2). because the container(2) that processes """"job launch"""" request deploys the job again it conflicts with an existing job that is deployed in conatiner(1) with the same name in the jobrepository. initially the idea behind 'deploy before launch' was to enable launch shell command to also deploy. because of the issue mentioned above it is ok to assume that job launch needs to be performed on an existing deployed job."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The ability to override default module path for the plugin or an individual flow currently modules are assumed to be in classpath:/meta-inf/spring/integration/module/${flow}.xml. to reuse modules defined with dirt may require more flexibility. e.g. <int-flow:flow root-path=""""file:///dirt/module""""/>"""" is a not user story because it is most similar to: """"Refactor tests with filesink|filesource to use eventually() matcher some tests (esp. moduleclasspathtests.testmodulewithclasspathafterserverstarted) seem to fail because of a race condition. add a hamcrest matcher that knows how to read the content of a filesink|source and refactor those to read like e.g. assertthat(filesink eventually(hascontent(""""foo)))"""" and similar to """"Update sink's gemfire section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#gemfire"""" and similar to """"Create multi-container single host testing framework use external jvm launch support provided by the oracle tools framework (https://java.net/projects/oracletools)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Sts gradle import broken when importing xd as a gradle project into sts it fails with missing directories spring-xd-hadoop/hdp20 and spring-xd-yarn mkdir on these directories solves the problem. the hdp20 case relates to xd-599 - it is not clear why spring-xd-yarn is needed."""" is a not user story because it is most similar to: """"Improve resilience of route creation/removal the cf implementation requires that a route be created for each new app. this works fine on the happy path but is brittle. for example it will fail if the route required already exists."""" and similar to """"Remove hadoop distro enum options please see the discussion here: https://github.com/spring-projects/spring-xd/pull/655/files#r10892925"""" and similar to """"Create runtimemoduledescriptor that represents runtime module instance see this for more info: https://github.com/spring-projects/spring-xd/pull/1021/files#r14611854"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create design document for implementation strategy for ingesting data from twitter into hdfs that can be analyzed by hawq as part of the hadoop world demonstration work the flow of data using xd from twitter to be analyzed by hawq as done. part of this work had the data going into hdfs that hawq was able to query using external tables. the work for this story is to identify the concrete technical tasks/stories to be created do deliver and document this functionality in xd."""" is a not user story because it is most similar to: """"Improvements to executions tab 1. add quick filter 2. the table should have columns for name | instance | execution id getting the name might require a bit of extra work given some limitations with json serialization and cycles in the current object returned from spring batch. 3. the restart action should appear only if the job is restartable and the status was failed."""" and similar to """"Refactor job deploy to go through xdcontroller.deploy(name) job deployment currently goes through an overloaded version of deploy() that takes 4 parameters. this prohibits job handling code from benefiting from common behavior (and eg currently breaks deployall) given that the 3 additional parameters are in fine handled as module parameters let's push them to the job definition known at creation time rather than at deployment time (as it does not really make sense to change those between deploys)"""" and similar to """"Routing json arrays when i create following stream i am able to route json messages. but if i send same message as an array its not working. is it possible to do something about it? stream create --name reference-data-import --definition """"rabbit --outputtype=text/plain | router --expression=#jsonpath(payload'$.rejected').contains('true')?'queue:rejected':'queue:accepted'"""" --deploy"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Integration tests for """"dsl reference"""" examples"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Deleting a stream with reference to named channel disconnects channel from all streams the following sequence results in """"dispatcher has no subscribers"""" error (stack trace below) because deleting stream2 disconnects stream1 from the foo channel. current work on xd-685 has infrastructure for disconnecting just the channels involved in a stream so should make it easier to fix this issue once merged. stream create stream1 --definition """"time > :foo"""" stream create stream2 --definition """"http > :foo"""" stream create stream3 --definition """":foo > file"""" stream destroy stream2 // expect file sink to still get time but instead blows up b/c // deleteoutbound(""""foo"""") killed links b/w foo and both local output channels server stack trace: 10:47:11921 error task-scheduler-6 handler.logginghandler:140 - org.springframework.integration.messagedeliveryexception: dispatcher has no subscribers for channel 'simplemodule [name=time type=source group=stream1 index=0].output'. org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:81) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.endpoint.sourcepollingchanneladapter.handlemessage(sourcepollingchanneladapter.java:97) org.springframework.integration.endpoint.abstractpollingendpoint.dopoll(abstractpollingendpoint.java:199) org.springframework.integration.endpoint.abstractpollingendpoint.access$000(abstractpollingendpoint.java:51) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:143) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:141) org.springframework.integration.endpoint.abstractpollingendpoint$poller$1.run(abstractpollingendpoint.java:273) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) org.springframework.core.task.synctaskexecutor.execute(synctaskexecutor.java:49) org.springframework.integration.util.errorhandlingtaskexecutor.execute(errorhandlingtaskexecutor.java:49) org.springframework.integration.endpoint.abstractpollingendpoint$poller.run(abstractpollingendpoint.java:268) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:53) org.springframework.scheduling.concurrent.reschedulingrunnable.run(reschedulingrunnable.java:81) java.util.concurrent.executors$runnableadapter.call(executors.java:439) java.util.concurrent.futuretask$sync.innerrun(futuretask.java:303) java.util.concurrent.futuretask.run(futuretask.java:138) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$301(scheduledthreadpoolexecutor.java:98) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:206) java.util.concurrent.threadpoolexecutor$worker.runtask(threadpoolexecutor.java:895) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:918) java.lang.thread.run(thread.java:680) caused by: org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:109) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) ... 24 more 10:47:12924 error task-scheduler-6 handler.logginghandler:140 - org.springframework.integration.messagedeliveryexception: dispatcher has no subscribers for channel 'simplemodule [name=time type=source group=stream1 index=0].output'. org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:81) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.endpoint.sourcepollingchanneladapter.handlemessage(sourcepollingchanneladapter.java:97) org.springframework.integration.endpoint.abstractpollingendpoint.dopoll(abstractpollingendpoint.java:199) org.springframework.integration.endpoint.abstractpollingendpoint.access$000(abstractpollingendpoint.java:51) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:143) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:141) org.springframework.integration.endpoint.abstractpollingendpoint$poller$1.run(abstractpollingendpoint.java:273) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) org.springframework.core.task.synctaskexecutor.execute(synctaskexecutor.java:49) org.springframework.integration.util.errorhandlingtaskexecutor.execute(errorhandlingtaskexecutor.java:49) org.springframework.integration.endpoint.abstractpollingendpoint$poller.run(abstractpollingendpoint.java:268) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:53) org.springframework.scheduling.concurrent.reschedulingrunnable.run(reschedulingrunnable.java:81) java.util.concurrent.executors$runnableadapter.call(executors.java:439) java.util.concurrent.futuretask$sync.innerrun(futuretask.java:303) java.util.concurrent.futuretask.run(futuretask.java:138) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$301(scheduledthreadpoolexecutor.java:98) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:206) java.util.concurrent.threadpoolexecutor$worker.runtask(threadpoolexecutor.java:895) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:918) java.lang.thread.run(thread.java:680) caused by: org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:109) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) ... 24 more 10:47:13926 error task-scheduler-4 handler.logginghandler:140 - org.springframework.integration.messagedeliveryexception: dispatcher has no subscribers for channel 'simplemodule [name=time type=source group=stream1 index=0].output'. org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:81) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.endpoint.sourcepollingchanneladapter.handlemessage(sourcepollingchanneladapter.java:97) org.springframework.integration.endpoint.abstractpollingendpoint.dopoll(abstractpollingendpoint.java:199) org.springframework.integration.endpoint.abstractpollingendpoint.access$000(abstractpollingendpoint.java:51) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:143) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:141) org.springframework.integration.endpoint.abstractpollingendpoint$poller$1.run(abstractpollingendpoint.java:273) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) org.springframework.core.task.synctaskexecutor.execute(synctaskexecutor.java:49) org.springframework.integration.util.errorhandlingtaskexecutor.execute(errorhandlingtaskexecutor.java:49) org.springframework.integration.endpoint.abstractpollingendpoint$poller.run(abstractpollingendpoint.java:268) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:53) org.springframework.scheduling.concurrent.reschedulingrunnable.run(reschedulingrunnable.java:81) java.util.concurrent.executors$runnableadapter.call(executors.java:439) java.util.concurrent.futuretask$sync.innerrun(futuretask.java:303) java.util.concurrent.futuretask.run(futuretask.java:138) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$301(scheduledthreadpoolexecutor.java:98) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:206) java.util.concurrent.threadpoolexecutor$worker.runtask(threadpoolexecutor.java:895) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:918) java.lang.thread.run(thread.java:680) caused by: org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:109) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) ... 24 more 10:47:14928 error task-scheduler-4 handler.logginghandler:140 - org.springframework.integration.messagedeliveryexception: dispatcher has no subscribers for channel 'simplemodule [name=time type=source group=stream1 index=0].output'. org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:81) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.endpoint.sourcepollingchanneladapter.handlemessage(sourcepollingchanneladapter.java:97) org.springframework.integration.endpoint.abstractpollingendpoint.dopoll(abstractpollingendpoint.java:199) org.springframework.integration.endpoint.abstractpollingendpoint.access$000(abstractpollingendpoint.java:51) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:143) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:141) org.springframework.integration.endpoint.abstractpollingendpoint$poller$1.run(abstractpollingendpoint.java:273) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) org.springframework.core.task.synctaskexecutor.execute(synctaskexecutor.java:49) org.springframework.integration.util.errorhandlingtaskexecutor.execute(errorhandlingtaskexecutor.java:49) org.springframework.integration.endpoint.abstractpollingendpoint$poller.run(abstractpollingendpoint.java:268) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:53) org.springframework.scheduling.concurrent.reschedulingrunnable.run(reschedulingrunnable.java:81) java.util.concurrent.executors$runnableadapter.call(executors.java:439) java.util.concurrent.futuretask$sync.innerrun(futuretask.java:303) java.util.concurrent.futuretask.run(futuretask.java:138) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$301(scheduledthreadpoolexecutor.java:98) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:206) java.util.concurrent.threadpoolexecutor$worker.runtask(threadpoolexecutor.java:895) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:918) java.lang.thread.run(thread.java:680) caused by: org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:109) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) ... 24 more 10:47:15930 error task-scheduler-1 handler.logginghandler:140 - org.springframework.integration.messagedeliveryexception: dispatcher has no subscribers for channel 'simplemodule [name=time type=source group=stream1 index=0].output'. org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:81) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.endpoint.sourcepollingchanneladapter.handlemessage(sourcepollingchanneladapter.java:97) org.springframework.integration.endpoint.abstractpollingendpoint.dopoll(abstractpollingendpoint.java:199) org.springframework.integration.endpoint.abstractpollingendpoint.access$000(abstractpollingendpoint.java:51) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:143) org.springframework.integration.endpoint.abstractpollingendpoint$1.call(abstractpollingendpoint.java:141) org.springframework.integration.endpoint.abstractpollingendpoint$poller$1.run(abstractpollingendpoint.java:273) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) org.springframework.core.task.synctaskexecutor.execute(synctaskexecutor.java:49) org.springframework.integration.util.errorhandlingtaskexecutor.execute(errorhandlingtaskexecutor.java:49) org.springframework.integration.endpoint.abstractpollingendpoint$poller.run(abstractpollingendpoint.java:268) org.springframework.scheduling.support.delegatingerrorhandlingrunnable.run(delegatingerrorhandlingrunnable.java:53)"""" and """"Filejdbc job throws exception during acceptance tests currently the testfilejdbcjobmultipleinvocations fails on line 156 stating data is different in table that what is expected. currently this is failing on the single admin/container deployment using redis as a transport. also seeing the following exception in the attached log: {noformat} 2.0.0.snap error xdbus.job:ec2job3.0.requests-1 step.abstractstep - encountered an error executing step step1 in job ec2job3 org.springframework.batch.item.itemstreamexception: failed to initialize the reader ... caused by: java.lang.illegalstateexception: input resource must exist (reader is in 'strict' mode): url [file:/tmp/xd/output/filejdbctest/filejdbctest1.out] {noformat} the file is should be present and data present for the test. at least according to the checker on ec2 and local deployments."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Make job names unique across tests that use the same jobrepository the job names used by the tests should be unique across the tests when use the same jobrepository."""" is a not user story because it is most similar to: """"Generate asciidoc doc from module options generate asciidoc fragments for each module's options this way it is always up to date."""" and similar to """"Permgen errors after running for a long time leaving the runtime running (e.g. as singlenode) ends up in permgen errors"""" and similar to """"Version info not available when security enabled when security is enabled the versioncontroller rest endpoint isn't visible."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-s developer i'd like to setup ci infrastructure for {{spring-cloud-stream-modules}} (s-c-s-m) repo so i can build the project continuously on every commits."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a spring xd developer i'd like to self-register {{xd-admin}} server with {{eureka}} so i could have admin server exposed as discoverable endpoint."""" is a not user story because it is most similar to: """"Add test to start/stop stream server in additional to existing tests that check for redis connection we need to add tests that start/stop stream server."""" and similar to """"Make redis/rabbit @rules conditional dependent servers should be required on the ci server but optional on developer systems."""" and similar to """"Streamscontroller to return paged results for list() see implementation used for steams and apply to jobs taps triggers."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Acceptance tests for labels and taps"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Map column names with underscore to camelcase style keys for jdbc sink we need to add support for matching column names with underscores like """"user_name"""" and map them to camel case style keys like """"username"""" in the jdbcmessagepayloadtransformer."""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a s-c-s user i'd like to have the modules self-register itself with {{eureka}} whenever they're installed so i can also discover the same modules using spring xd admin spi and reuse them to create data pipelines."""" and similar to """"As a user i'd like to have direct shell commands to scale up/down a given module instance so i can avoid spi specific cli commands that needs run outside of data flow."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have an option to have the hdfs sink not use a temporary inusesuffix like .tmp. instead we should write using the filename specified directly. this could be useful if we use """"syncable"""" writes and the sink fails while the file is open. without this new option the user would have to explicitly rename the file."""" is a not user story because it is most similar to: """"Split richgauge in 2 support of the alpha parameter is awkward and can confuse people who are expecting a simple average mean. consider splitting richgauge in two flavors: arithmetic and exponential. involves quite some work at the repository handler and rest level though..."""" and similar to """"Defaultcontainermatcher - improve logging and mention affected module when deploying a definition with a container match criteria specified and no container could be selected - the logging is ambiguous and should mention the affected module: {code} 11:58:24089 warn deploymentsupervisorcachelistener-0 cluster.defaultcontainermatcher - no currently available containers match criteria 'somecriteria' {code}"""" and similar to """"Create ootb batch job that uses the hadoop shell to copy multiple files from hdfs to a local directory this is the inverse of xd-986 and will require creating a custom tasklet but with the input/output reversd."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add support for deploying a batch job with partitioning across multiple xd nodes. this is a very big story needs some planning/discussion before starting work. should be able to be implemented as a plugin."""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to have the option to specify system properties that will be passed in to the sqoop job which runs in it's own java process. this is needed for defining memory usage and also for defining some options for various connector implementations."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Improve the enforcement of meta-properties being set in build.gradle last sync errors: invalid pom: /org/springframework/xd/spring-xd-module-parent/1.1.1.release/spring-xd-module-parent-1.1.1.release.pom: developer information missing invalid pom: /org/springframework/xd/spring-xd-module-plugin/1.1.1.release/spring-xd-module-plugin-1.1.1.release.pom: project name missing project description missing project url missing license information missing scm url missing developer information missing missing: no javadoc jar found in folder '/org/springframework/xd/spring-xd-module-plugin/1.1.1.release' missing: no sources jar found in folder '/org/springframework/xd/spring-xd-module-plugin/1.1.1.release' dropping existing partial staging repository."""" and """"Change default date formats to be 'yyyy-mm-dd' we have some places where we us a default data format specified as 'yyyy/mm/dd'. in spring for apache hadoop we use 'yyyy-mm-dd' for partitioning path expressions. this seems more in line with iso standard date format. for consistency we should have both shdp and xd use the same default format."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Example hashtag-count mr job fails when running xd on yarn with phd 3.0 running xd on yarn on phd 3.0 ambari install. uploading and submitting a custom job fails with the following: {code} 2015-06-02 16:54:15580 info [asyncdispatcher event handler] org.apache.hadoop.mapreduce.v2.app.job.impl.taskattemptimpl: diagnostics report from attempt_1433273561345_0009_m_000000_0: error: java.lang.runtimeexception: java.lang.classnotfoundexception: class org.springframework.xd.examples.hadoop.hashtagcount$tokenizermapper not found org.apache.hadoop.conf.configuration.getclass(configuration.java:2076) org.apache.hadoop.mapreduce.task.jobcontextimpl.getmapperclass(jobcontextimpl.java:186) org.apache.hadoop.mapred.maptask.runnewmapper(maptask.java:742) org.apache.hadoop.mapred.maptask.run(maptask.java:341) org.apache.hadoop.mapred.yarnchild$2.run(yarnchild.java:163) java.security.accesscontroller.doprivileged(native method) javax.security.auth.subject.doas(subject.java:415) org.apache.hadoop.security.usergroupinformation.doas(usergroupinformation.java:1628) org.apache.hadoop.mapred.yarnchild.main(yarnchild.java:158) caused by: java.lang.classnotfoundexception: class org.springframework.xd.examples.hadoop.hashtagcount$tokenizermapper not found org.apache.hadoop.conf.configuration.getclassbyname(configuration.java:1982) org.apache.hadoop.conf.configuration.getclass(configuration.java:2074) ... 8 more {code} same example jar works fine when submitted from xd cluster."""" and """"Temporary race condition between deployment and """"runtime modules"""" command the """"runtime modules"""" command can show a failure between the deployment command and the actual deployment on the container node especially if there is a network hop. this clears up once the module is fully deployed. {code} xd:>stream create --name trois3 --definition """"time | jdbc"""" --deploy created and deployed new stream 'trois3' xd:>runtime modules command failed org.springframework.xd.rest.client.impl.springxdexception: java.lang.runtimeexception: org.apache.zookeeper.keeperexception$nonodeexception: keepererrorcode = nonode for /xd/deployments/modules/bc95653e-9da5-4738-beb2-f215e4003318/trois3.source.time-0/metadata xd:>runtime modules module container id options -------------------- ------------------------------------ ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- trois3.source.time-0 bc95653e-9da5-4738-beb2-f215e4003318 {format=yyyy-mm-dd hh:mm:ss fixeddelay=1} wintu.sink.jdbc-1 bc95653e-9da5-4738-beb2-f215e4003318 {tablename=${xd.stream.name} url=jdbc:hsqldb:hsql://carbon:9102/xdjob columns=payload driverclassname=org.hsqldb.jdbc.jdbcdriver initializedatabase=false initializerscript=init_db.sql username=sa} trois3.sink.jdbc-1 d0ad8eda-be27-46ac-86be-e43b5d9921af {tablename=${xd.stream.name} url=jdbc:hsqldb:hsql://carbon:9102/xdjob columns=payload driverclassname=org.hsqldb.jdbc.jdbcdriver initializedatabase=false initializerscript=init_db.sql username=sa} wintu.source.time-0 befa5f27-aac3-4d94-9171-77c07036ec75 {format=yyyy-mm-dd hh:mm:ss fixeddelay=1} {code}"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Package up the ui code when building the distribution so that it can be shown by xd-admin the ui code will be sitting in one or more top level directories in the repository this story will address the need to 1) copy over the ui code into a location so that it can be picked up by the embedded servlet container when the distribution zip is 'unzipped'. after running ./xd-admin or ./xd-singlenode one should be able to hit the ui at http://localhost:8999/xd (just an example)"""" is a not user story because it is most similar to: """"Wordcount failed to run in cloudera vm 5.7 i download the spring xd example projects and run through the steps acccording the readme file for the project. i tried to change the hadoop-site.xml server.yml and wordcount.xml files but i failed get the . i am blocked by this issue. thank you very much in advance for help. best regards."""" and similar to """"Add the dependencies required to use #xpath in streams thanks to gary i found this little gem of documentation to be able to use xpath expression in xd. only hiccup is that i had to also add the spring-xml.jar to the classpath (otherwise it is missing xpathexception class). http://stackoverflow.com/questions/29110757/spring-xd-work-with-xml-payload"""" and similar to """"Support map payloads in field-value-counter the {{fieldvaluecounterhandler}} handles {{pojo}} {{tuple}} and {{json}}. {{#jsonpath}} emits a {{linkedhashmap}}. the handler should natively support a {{map}}. see http://stackoverflow.com/questions/33270926/springxds-field-value-counter-doesnt-work-after-splitting-json-object-array-in/33281783#33281783"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Better classloader strategy for xd admin/container this is in reference to the investigation done as part of xd-2548"""" is a not user story because it is most similar to: """"Create tcp sink module based off si tcp inbound adapter. this will allow for event fowarding."""" and similar to """"Documentation for use of conversion service and creating custom processing modules that use the tuple data structure."""" and similar to """"Run all shell integration tests also with enabled security apply the same strategy for the module command tests also to all other shell integration tests."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Close hdfs file when batch job ends the file to hdfs batch job will not close the file being written to in hdfs when the job completes. the itemwriter for hdfs needs to incorporate functionality that is present in the standard flatfilewriter perhaps inheriting from abstractitemstreamitemwriter"""" is a not user story because it is most similar to: """"Classloading interaction issue between messagebus and modules see discussion at http://stackoverflow.com/questions/28551506/spring-xd-jms-message-bus-with-jms-sink"""" and similar to """"Deploy multiple instances of a module currently we deploy a single instance and ignore the moduledeploymentrequest instances setting. it is easy to change this in the moduledeployer but there is no guarantee this will work in the modulelauncher so we hold off until that can be verified."""" and similar to """"Obtain username and password credentials for cloudfoundry as part of moving to a bespoke restoperations application we will need credentials to access cloudfoundry. these will need to be supplied from the new xd admin app at runtime."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have latest spring boot snapshot pulled as a dependency so that i can inherit and implement the ootb security features."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Fix xd modules parameters with """"-"""" to use camel case xd-482 addresses the use of camel case in 'fixed-delay' job module parameter name. and we need to fix the same for other module parameters wherever '-' is being used."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to """"As a user i want to configure docker xd containers using service discovery so that i can have tools to manage how processes and services in a cluster can find and talk to one another."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to move {{stdout}} module from xd to s-c-s repo so i can use it as source to build streaming pipeline."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to move {{cassandra}} module from xd to s-c-s repo so i can use it as {{sink}} to build streaming pipeline. and similar to """"As a spring-bus lead i'd like to review the current spring-bus architecture and the design specs so i can address any foundation level gaps."""" and similar to """"As a developer i'd like to have a maintenance branch so that i can commit minor release _(ex: 1.0.2)_ code changes instead of committing to master."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix anchor links so that they work in both the wiki and generated docs part of the issue is likely with the build script https://github.com/spring-projects/spring-xd/blob/master/build.gradle#l1859 we should also add a link checker to the ci build."""" is a not user story because it is most similar to: """"Fix error handling in jdbchdfs job the jdbchdfs job keeps the output stream open in case of error writing to hdfs. we should improve this and close it plus throw an exception. we should also make sure the step is marked as failed instead of complete when an exception is thrown in the writer."""" and similar to """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Investigate module classloader leakage see report at https://github.com/spring-projects/spring-xd/issues/661 this should not happen as the module holds the classes that hold the classloader but who knows. an integration test that verifies this would be nice albeit tricky."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have the ootb _gpfdist_ sink module so i can use this module to do ultra fast data movement from various sources into gpdb/hawq."""" is a not user story because it is most similar to: """"Final review of rest api structure document for streams taps and jobs get closure on open discussion points for rest api wrt to streams taps and jobs."""" and similar to """"Mixins need to use property placeholders instead of hard coded values where possible many attributes in mixins use hard coded values instead of using property placeholders. jdbcconnectionmixin jdbcconnectionpoolmixin mqttconnectionmixin..."""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create config support for redis we would like to have redis driven from a config property file under xd_home."""" is a not user story because it is most similar to: """"Remove spring-xd-codec from spring xd source tree and build replace with spring-cloud-streams (or spring-cloud-streams-codec) dependency"""" and similar to """"Shell - 'makeunique' job parameter is true by default currently the shell assumes that the 'makeunique'job parameter is by default *false*. that is not true. as a consequence the parameter has currently no impact/does not work."""" and similar to """"Add junit @rule so tests fail fast with clear messaging if redis not available"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Gradle based multi-project build multi project build. - look to spring framework for source of starting point."""" is a not user story because it is most similar to: """"Shell - 'makeunique' job parameter is true by default currently the shell assumes that the 'makeunique'job parameter is by default *false*. that is not true. as a consequence the parameter has currently no impact/does not work."""" and similar to """"Add eclipse target to ec2 build.gradle. so that the code format matches that of the xd project."""" and similar to """"User wants ability to create a in-process sink or tap so that we can validate the message content in the stream"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have the option to provide ldap based security configurations so that i can access the endpoints in a secured manner. ideally all the listed *endpoints* (http://localhost:9393/) needs to be encapsulated within ldap based security layer. reference: [authentication using ldap|https://spring.io/guides/gs/authenticating-ldap/]"""" is a not user story because it is most similar to: """"Implement a spark streaming driver application that can be controlled as an xd module instance this should include lifecycle management so that when the module's stream is undeployed the spark streaming application should be stopped etc. deploying a number of module instances should result in multiple receiver tasks and those should bind to the bus using the consumer side partitioning metadata."""" and similar to """"Rename """"node"""" references to """"container"""" this applies to a few places (when addressing the issue a search should be done to uncover any others) e.g.: containerserverapplication: public static final string node_profile = """"node"""" *options classes: """"the transport to use for data messages (from node to node)"""" """"the transport to use for control messages (between admin and nodes)"""""""" and similar to """"Improve itemwriter in ootb jdbchdfs to use datastorewriter the current jdbchdfs job does not take advantage of all the features available to write into hdfs provided by spring hadoop's datastorewriter implementations such as partitioning. update the jdbchdfs job to use <int-hadoop:store-writer/> (similar to the hdfs sink) inside a new itemwriter implementation"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Parameterizable streams"""" is a not user story because it is most similar to: """"Writing to hdfs - 1.x"""" and similar to """"Twitterstream is broken"""" and similar to """"Channel registry"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Investigate skipped tests in build enable or remove. we have 13 skipped tests now..."""" is a not user story because it is most similar to: """"Port load-generator & throughput modules to scs-modules migrate load-generator and throughput to scs."""" and similar to """"Add message source for error messages returned to users"""" and similar to """"Ui: the user should be able to view metrics about an executed job."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Cannot undeploy stream that was created and deployed with a """"."""" in the name eserrano-mbp:spring-xd-1.0.0.m5 eserrano$ ./shell/bin/xd-shell _____ __ _______ / ___| (-) \ \ / / _ \ \ `--. _ __ _ __ _ _ __ __ _ \ v /| | | | `--. \ '_ \| '__| | '_ \ / _` | / ^ \| | | | /\__/ / |_) | | | | | | | (_| | / / \ \ |/ / \____/| .__/|_| |_|_| |_|\__ | \/ \/___/ | | __/ | |_| |___/ extreme data 1.0.0.m5 | admin server target: http://localhost:9393 welcome to the spring xd shell. for assistance hit tab or type """"help"""". xd:>stream list stream name stream definition status ------------- --------------------------------------------------------- -------- eesstream.log http | transform --expression=payload.touppercase() | log deployed httptest http | file tictac time | log xd:>stream stream all stream create stream deploy stream destroy stream list stream undeploy xd:>stream undeploy --name stream undeploy --name required --name: the name of the stream to un-deploy no default value xd:>stream undeploy --name eesstream.log command failed org.springframework.xd.rest.client.impl.springxdexception: the stream named 'eesstream' is not currently deployed xd:>"""" and """"Large number of required options in jdbc sink definition i'd like to use the following command to define a stream in our spring xd for pivotalcf test environment: {code} stream create --name test --definition """"http --port=9999 | jdbc --username=spring-xd --password=spring-xd --driverclassname=org.postgresql.driver --url=jdbc:postgresql://1.2.3.4:5432/spring-xd"""" {code} i have to add the following options to the definition to make it work (otherwise i get exceptions and a failed deploy): {code} -validationquery='' --validatorclassname='#{null}' --connectionproperties='' --initsql='' --jdbcinterceptors='' --initializerscript='' {code} given that they're empty anyway it seems like some or all of these should not be necessary. _notes_ * the validatorclassname cannot be '' like the others it needs the null. * without initsql='' stream creation fails because it can't find init_db.sql (a file i don't have in my environment) even though it won't be run anyway."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a gauge module spring config for simple gauge plus message handler to process message. there is some code common to richgaugehandler to coerce the payload to a double that should be refactored for reuse."""" is a not user story because it is most similar to: """"Add job rdbms config in ambari plugin spring xd ambari plugin only supports hdb as job db. hdb is not good in production environment. it will be great if we can specify rdb in spring xd installation/config process."""" and similar to """"Obtain username and password credentials for cloudfoundry as part of moving to a bespoke restoperations application we will need credentials to access cloudfoundry. these will need to be supplied from the new xd admin app at runtime."""" and similar to """"Classloading interaction issue between messagebus and modules see discussion at http://stackoverflow.com/questions/28551506/spring-xd-jms-message-bus-with-jms-sink"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Message conversion support for spark streaming module the spark streaming module needs to support inputtype (for both processor and sink module) and outputtype (for processor module) so that message conversion can happen at the messagebusreceiver and messagebussender."""" is a user story, and is worth 5 story points because it is most similar to: As a s-c-d developer i'd like to create foundation to support _processor_ as ootb modules so i can use the processor modules from {{s-c-s-m}} repo to build streaming pipeline. and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" and similar to """"As a s-c-d user i'd like to have {{runtime info}} as shell command so i can use this to list the details about the module such as {{host}} {{port}} and the like."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a qa i'd like to include acceptance test coverage for _sftp_ source module so that i can validate the functionality as part of every ci build."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create required infrastructure to easily perform integration testing of shell commands"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Error message for """"missing job description"""" needs to be updated when using the rest interface to create a job with an empty description used to generate the following exception """"definition can not be empty"""". now generates """"xd112e:(pos 0): unexpectedly ran out of input^"""". the correct error should be """"definition cannot be blank or null"""""""" is a not user story because it is most similar to: """"Batch notification sample fails to execute * payment_with_error.txt is not present in the project * --makeunique is not available for this command anymore * syntax for http post needs to be updated * need to add a job deploy command or --deploy * throws exception when deployed (stacktrace attached)."""" and similar to """"Rpm upgrades should not to wipe-out previous installation configs/settings as an operator i'd like to upgrade to the latest releases of spring xd and yet not lose the older installation {{dirs}}/{{files}} so i can copy and reuse the previously used {{servers.yml}} configurations."""" and similar to """"Create ootb batch job that uses the hadoop shell to copy multiple files from hdfs to a local directory this is the inverse of xd-986 and will require creating a custom tasklet but with the input/output reversd."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add documentation for gemfire cache-listener source need some sample usage docs for https://github.com/spring-projects/spring-xd/tree/master/modules/source/gemfire"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally. and similar to """"As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd."""" and similar to """"As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have _paging_ support so that i can scroll through the list of streams jobs and containers. currently the following error is thrown when we cross >20 rows: http://localhost:9393/jobs/definitions.json json response: {code:xml} [ { links: [ ] logref: """"illegalstateexception"""" message: """"not all instances were looked at"""" } ] {code} stack trace: {code} 15:51:21931 error http-nio-9393-exec-9 rest.restcontrolleradvice - caught exception while handling a request java.lang.illegalstateexception: not all instances were looked at org.springframework.util.assert.state(assert.java:385) {code}"""" is a not user story because it is most similar to: """"Create design document for implementation strategy to support message conversion in channelregistry the conversion should be based on content-type headers similar to the way spring's httpmessageconverters work (with mime types). also the map of available converters should be extensible while including the most common defaults (for json xml etc). we most likely want to add a few of our own content types also (e.g. for tuples). most likely this logic and the configuration methods for extending the converter map belong in abstractchannelregistry since it should be common across all implementations (i.e. the logic should be the same regardless of the transport used after-serialization/before-deserialization)."""" and similar to """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Documentation on the module system and how to contribute new modules for people who are familiar with spring/spring integration provide documents that show how to add additional input sources/sinks."""" is a not user story because it is most similar to: """"Remove hadoop distro enum options please see the discussion here: https://github.com/spring-projects/spring-xd/pull/655/files#r10892925"""" and similar to """"Documentation for """"http | file"""" processing put on the guide as a section in an 'input sources' wiki page. https://github.com/springsource/spring-xd/wiki/guidegettingstarted"""" and similar to """"Create runtimemoduledescriptor that represents runtime module instance see this for more info: https://github.com/spring-projects/spring-xd/pull/1021/files#r14611854"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Implement kryo serialization for tuple currently tuplecodec uses json for serialization/deserialization. it should use kryo. this will require some customization and potentially changes to tuple to address the tuple's conversionservice field."""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to isolate the hadoop tests in a different project so that the dirt project doesn't have to depend upon thus eliminating the incorrect cp file generation in eclipse. and similar to """"As a developer i'd like to add {{undeployed}} status for yarn spi so i can represent the correct status instead of the current {{unknown}} state."""" and similar to """"As a user i'd like to enable ha on {{namenode}} without having to enable custom configuration. more details [here|https://github.com/spring-projects/spring-xd-ambari/issues/6]."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Stream documentation review"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to upgrade to 2.0.3 release of reactor so i can inherit the latest optimizations to further improve xd performance characteristics."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add a test for ${xd.stream.name} inside the dsl definition of a stream"""" is a not user story because it is most similar to: """"Command for creating a job optional --autostart switch to also deploy the job"""" and similar to """"The xd build breaks with gradle 1.8 the xd build breaks with gradle 1.8 due to some changes in dependency resolution."""" and similar to """"Update yarn deployment classpath settings for hdp 2.2 and phd 3.0 need to update classpath settings for phd 3.0 and hdp 2.2"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add more """"hands on"""" example to mqtt doco not everyone may be familiar with mqtt or esp. with mqtt inside rabbit"""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to create a tuple _load-generator_ so i can use it to measure {{tuple}} based payload performance. and similar to """"As a developer i'd like to create separate repo for lattice spi so i don't have to bundle all spi variants under one admin project."""" and similar to """"As a developer i'd like to create separate repo for cf spi so i don't have to bundle all spi variants under one admin project."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Comm protocol for appmaster we need to be able to talk to appmaster which will control the whole xd yarn app. 1. choose the implementation? thrift? spring int? something else?"""" is a user story, and is worth 5 story points because it is most similar to: As a user i'd like to have direct shell commands to scale up/down a given module instance so i can avoid spi specific cli commands that needs run outside of data flow. and similar to """"As a s-c-d developer i'd like to experiment how do we resolve and then add module dependent jar's to boot loader so i have an approach to handle external libraries required by ootb modules."""" and similar to """"As a user i'd like to type the _username_ and _password_ to gain access to admin server so that i don't have to add it in some file hence i don't have to worry about having the password getting logged somewhere."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update to spring integration 4.0.1 add messages store optimization to the `hdfs-dataset`"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Standardize xd logging to align with spring boot in xd today we use commons-logging or slf4j apis bound to log4j at runtime (configured with log4j.properties). boot uses slf4j apis backed by logback. this causes some build incompatibilities building a component that depends on spring-xd-dirt and spring-boot requiring specific dependency exclusions. in order to simplify building and troubleshooting log dependencies xd should standardize on slf4j apis (replace any commons-logging loggers with slf4j). this is internal only and would not impact users who are used to seeing log4j.properties. an additional step is to replace log4j with logback. this change would be visible to end users but will provide us greater affinity with boot and improve the developer experience. if we make this change it should go into 1.2 ga."""" is a not user story because it is most similar to: """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" and similar to """"Allow easy integration with other types of message transports - remove enums for transport layers if a third party messaging solution wants to be the transport layer in springxd they must currently fork the springxd code base and change the enums. example: commondistributedoptions.controltransport currently limits to the following options (rabbit redis). so if a third party like messaging system like zeromq wanted to plug-in they would have to add to the enum. here is another example where gemfire was used as the messaging system: https://github.com/charliemblack/spring-xd/blob/master/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/commondistributedoptions.java#l38 all messaging enums should be removed for an extensible model."""" and similar to """"Assess if gemfirejsonserver & gemfireserver sinks should close the client cache * os - mac * xd deployment type - singlenode * sha - bb4dd58 * required software - xd gemfire sample server [description] after creating and destroying 3 streams with gemfirejsonserver sink the 4th will fail with this error: * 44707 refused connection: the number of clients 4 exceeded the limit of 3 allowed by the default evaluation license. [steps to reproduce] * from your shell execute the following 4 times: ** stream create --name stocks --definition """"http --port=9090 | gemfire-json-server --regionname=stocks --host=ec2-54-221-32-82.compute-1.amazonaws.com --port=40404 --keyexpression=payload.getfield('symbol')"""" --deploy ** stream destroy stocks"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-d user i'd like to have the option to support passing definition parameters into yarn container so i can effectively use those _params_ within the module running inside the container."""" is a not user story because it is most similar to: """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" and similar to """"Mixins need to use property placeholders instead of hard coded values where possible many attributes in mixins use hard coded values instead of using property placeholders. jdbcconnectionmixin jdbcconnectionpoolmixin mqttconnectionmixin..."""" and similar to """"Remove the expiry of keys in redis based repositories there is duplicated code in redis based repositories that related to expiry behavior move into a common shared helper class and/or base class."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to troubleshoot the performance issues with rabbit as message bus implementation so i can isolate the bottleneck and fix as appropriate."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Define developer-facing interfaces for spark streaming modules"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create rest api for getting information on all steps of a given job execution adopted functionality from spring batch admin should include springmvc test framework style tests get /batch/jobs/executions/{executionid}/steps - get information on all steps of a given job execution"""" is a not user story because it is most similar to: """"Create documentation for how module properties are resolved. the ordering of the lookup should be described in particular detail on how environment variables can overrride properties. some details will necessarily change based on outcome of current discussion but the overall ordering is going to remain."""" and similar to """"Have the rest info about a module advertise enum properties when a moduleoption is backed by an enum change the (currently string) type representation to be the possible values ie java.lang.string -> string but traffic.light -> red | green | orange"""" and similar to """"Design and document desired high level dsl for configuring data processing in xd start to explore how the dsl can cover both advanced (non-linear) spring integration flows as well as spring batch jobs."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Investigate running camus as a batch job similar to sqoop where we move data from rdbms to hdfs we should look at integrating with camus to load data from kafka to hdfs."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Investigate failing localsinglenodestreamdeploymentintegrationtests investigate the failing test localsinglenodestreamdeploymentintegrationtests.modulechannelsregisteredwithmessagebus: {noformat} java.lang.assertionerror: expected:<3> but was:<0> org.junit.assert.fail(assert.java:88) org.junit.assert.failnotequals(assert.java:743) org.junit.assert.assertequals(assert.java:118) org.junit.assert.assertequals(assert.java:555) org.junit.assert.assertequals(assert.java:542) org.springframework.xd.dirt.stream.abstractsinglenodestreamdeploymentintegrationtests.modulechannelsregisteredwithmessagebus(abstractsinglenodestreamdeploymentintegrationtests.java:270) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.junit.runners.model.frameworkmethod$1.runreflectivecall(frameworkmethod.java:47) org.junit.internal.runners.model.reflectivecallable.run(reflectivecallable.java:12) org.junit.runners.model.frameworkmethod.invokeexplosively(frameworkmethod.java:44) org.junit.internal.runners.statements.invokemethod.evaluate(invokemethod.java:17) org.junit.internal.runners.statements.runafters.evaluate(runafters.java:27) org.junit.runners.parentrunner.runleaf(parentrunner.java:271) {noformat} this can be most easily reproduced on ubuntu."""" and """"Deleting a job and then re-adding a new definition with the same name fails using single-node deployment of spring xd 1.0 ga we needed to redefine several batch jobs. we deleted the jobs (""""job destroy all""""). when attempting to re-add we received an error that a job with the name already exists. performing """"job list"""" confirms the jobs were gone. to workaround i needed to terminate the instance (server) of spring xd and restart it. since this was the single-node deployment without a live stream of data coming in this was okay but would have been a major problem if bouncing the spring xd server was not acceptable (i.e. live data being actively received)."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Improve acceptance testing coverage the scope is to address the sub-tasks linked with this story."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add log config file to gemfire in final distro the changes for xd-144 mean that log4j files are no longer in the library jars. the admin server already has a logging configuration which should be activated by the startup scripts but the separate gemfire app doesn't."""" is a not user story because it is most similar to: """"The use of labelled modules and taps needs more explanation https://github.com/spring-projects/spring-xd/wiki/taps mentions this but the explanation needs more elaboration and example e.g. mystream -> """"http | flibble: transform --expression=payload.touppercase() | file"""" """"tap:stream:mystream.flibble > transform --expression=payload.replaceall('a''.') | log"""")"""" and similar to """"Add aliases concept to module options and use in composed modules following merge of https://github.com/spring-projects/spring-xd/pull/601 allow a module option to be known by several names and elect a short name in composed module options when there is no ambiguity"""" and similar to """"Replace usage of 'raw' curl with shell command to post http data in documentation e.g. http://localhost:8080:>post httpsource --target http://localhost:9090 --data 10 i believe this will also help to avoid ugly syntax to escaping quotes for json as in the gemfire example."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Adminserver fails on hdp 2.3 submitting xd on yarn for hdp 2.3 fails due to some solr issue in boot - https://github.com/spring-projects/spring-boot/issues/2795 the xd-admin sysout is: {code} started : adminserverapplication documentation: https://github.com/spring-projects/spring-xd/wiki 02:51:36624 error main boot.springapplication - application startup failed java.lang.illegalstateexception: error processing condition on org.springframework.boot.autoconfigure.solr.solrautoconfiguration.solrserver org.springframework.boot.autoconfigure.condition.springbootcondition.matches(springbootcondition.java:58) org.springframework.context.annotation.conditionevaluator.shouldskip(conditionevaluator.java:102) org.springframework.context.annotation.configurationclassbeandefinitionreader.loadbeandefinitionsforbeanmethod(configurationclassbeandefinitionreader.java:178) org.springframework.context.annotation.configurationclassbeandefinitionreader.loadbeandefinitionsforconfigurationclass(configurationclassbeandefinitionreader.java:140) org.springframework.context.annotation.configurationclassbeandefinitionreader.loadbeandefinitions(configurationclassbeandefinitionreader.java:116) org.springframework.context.annotation.configurationclasspostprocessor.processconfigbeandefinitions(configurationclasspostprocessor.java:333) org.springframework.context.annotation.configurationclasspostprocessor.postprocessbeandefinitionregistry(configurationclasspostprocessor.java:243) org.springframework.context.support.postprocessorregistrationdelegate.invokebeandefinitionregistrypostprocessors(postprocessorregistrationdelegate.java:273) org.springframework.context.support.postprocessorregistrationdelegate.invokebeanfactorypostprocessors(postprocessorregistrationdelegate.java:98) org.springframework.context.support.abstractapplicationcontext.invokebeanfactorypostprocessors(abstractapplicationcontext.java:673) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:519) org.springframework.boot.springapplication.refresh(springapplication.java:686) org.springframework.boot.springapplication.run(springapplication.java:320) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:139) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:129) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:129) org.springframework.xd.dirt.server.admin.adminserverapplication.run(adminserverapplication.java:95) org.springframework.xd.dirt.server.admin.adminserverapplication.main(adminserverapplication.java:79) caused by: java.lang.illegalargumentexception: @conditionalonmissingbean annotations must specify at least one bean (type name or annotation) org.springframework.util.assert.istrue(assert.java:68) org.springframework.boot.autoconfigure.condition.onbeancondition$beansearchspec.<init>(onbeancondition.java:223) org.springframework.boot.autoconfigure.condition.onbeancondition.getmatchoutcome(onbeancondition.java:92) org.springframework.boot.autoconfigure.condition.springbootcondition.matches(springbootcondition.java:45) ... 17 more 02:51:36628 warn main annotation.annotationconfigapplicationcontext - exception thrown from lifecycleprocessor on context close java.lang.illegalstateexception: lifecycleprocessor not initialized - call 'refresh' before invoking lifecycle methods via the context: org.springframework.context.annotation.annotationconfigapplicationcontext@1cf1df22: startup date [fri oct 02 02:51:31 utc 2015] root of context hierarchy org.springframework.context.support.abstractapplicationcontext.getlifecycleprocessor(abstractapplicationcontext.java:414) org.springframework.context.support.abstractapplicationcontext.doclose(abstractapplicationcontext.java:966) org.springframework.context.support.abstractapplicationcontext.close(abstractapplicationcontext.java:925) org.springframework.boot.springapplication.run(springapplication.java:342) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:139) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:129) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:129) org.springframework.xd.dirt.server.admin.adminserverapplication.run(adminserverapplication.java:95) org.springframework.xd.dirt.server.admin.adminserverapplication.main(adminserverapplication.java:79) 02:51:36642 error main admin.adminserverapplication - error processing condition on org.springframework.boot.autoconfigure.solr.solrautoconfiguration.solrserver {code}"""" and """"Applicationcontext id generation applicationcontext id generation is difficult in general. cloud foundry solves this problem for us by providing unique instance ids to all running instances of an app. i don't suppose that helps much in the general case though and we need something (a rule of thumb) that is unique and preferably deterministic so that nodes retain their id across process and connector restarts. in cloud foundry the instance id plays a vital role (and will be automatically picked up by the app and applied - need to look at how that plays in a context hierarchy). user can set the context id manually using {{spring.application.name}} and {{spring.application.index}}."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to resolve remaining gaps wrt ci pipelines for data flow and the family so i can continuously evaluate functionalities on every commit."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Stream deployment race condition when a container is started the leader admin will scan the deployed streams to determine if any have modules that need to be deployed on the new container. when a stream is deployed the leader admin will select containers to deploy modules to. if a new container and stream are deployed at the same time there is the window for a race condition where both attempt to deploy a module to a container. this can be solved by (at least one) of the following: * consider using a single thread in the admin leader to handle all zookeeper updates. this means that the handling of new containers and stream deployment requests will not happen concurrently. * trap the {{nodeexists}} exception when creating the {{/xd/deployments/modules/...}} node in zookeeper"""" and """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a qa i'd like to include acceptance test coverage for _gauge_ sink module so that i can validate the functionality as part of every ci build."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Improve shell connection diagnostics when a problem occurs connecting to admin we just get {{unable to contact data flow admin}} even if the connection is successful and some problem occurs when interpreting the result. the exception is eaten. log an error including the exception. currently investigating an npe in dataflowtemplate @ line 77."""" is a not user story because it is most similar to: """"Retrieve information for a gauge todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Create shared server context create a shared server context to the container hierarchy. this is a child of global beans which contains beans that are only shared by the admin and container contexts but not modules. the zookeeper components go here to support the zk deployment architecture. the messagebus also goes here to support a clean way to launch jobs from the admin process."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Type conversion should set content-type header see http://stackoverflow.com/questions/30714828/spring-xd-http-client-processor-sends-text-plain-instead-of-application-json"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1 and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" and similar to """"As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Investigate increased size of xd distribution."""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Support named taps (or similar) provide some syntax allowing multiple tap points to be directed to a named channel. e.g. tap foo.4 > namedtap tap bar.2 > namedtap or :tap.foo > counter"""" is a not user story because it is most similar to: """"Convert remaing filesink assertions to eventually() constructs see discussion at https://github.com/spring-projects/spring-xd/pull/362"""" and similar to """"Rename moduledeployer for more info please see here: https://github.com/spring-projects/spring-xd/pull/1021/files#r14617723"""" and similar to """"Add option to xd-admin and xd-container yarn scripts to allow copying ot hdfs and no execution."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add http delete stream operation"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a follow-up from [xd-3613|https://jira.spring.io/browse/xd-3629] we would want to fix this experience for kafka message bus."""" is a not user story because it is most similar to: """"Spring xd docker hub site needs to have images for all xd versions currently admin & container only support latest 1.0.x and 1.1.0 while singlenode only has tags for 1.0.x and latest. we need to have a tags for 1.1.0 1.2.0 1.2.1 for all xd docker images."""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" and similar to """"Mixins need to use property placeholders instead of hard coded values where possible many attributes in mixins use hard coded values instead of using property placeholders. jdbcconnectionmixin jdbcconnectionpoolmixin mqttconnectionmixin..."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add https support to the http source"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to see the 'date' in logs so that i can troubleshoot issues that had occurred on a specific day and time. property that needs adjusted: https://github.com/spring-projects/spring-xd/blob/master/config/xd-container-logger.properties#l11"""" is a not user story because it is most similar to: """"Filesourcetest needs to apply label to source and sink * currently acceptance filesource acceptance tests are failing ** this is because the sink that tests the result for the file source test is a filesink. both use the """"file"""" token. thus causing a failure * simplefilesource and simplefilesink needs to support a label method. * update testfilesource to use the labels."""" and similar to """"Create a dedicated plugin for ${xd.stream.name} and similar the setting of the xd.stream.name property is currently duplicated in streamplugin and jobplugin etc moreover there is no strong string constant to reference it create a plugin dedicated to those matters (namely making bits of deploymentmetadata available to the module environment)"""" and similar to """"The hdfs sink should support compressing files as they are copied get a java.io.file and copy it into hdfs. could be text or binary. write compressed with hadoop and third party codecs see: (xd-277 xd-279) should initially support: - bzip2 - lzo"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Ugly error messages in shell when not connected should go thru the list of all commands available and make sure that a simple """"not connected"""" message is returned instead of something like this: {code} org.springframework.web.client.resourceaccessexception: i/o error on get request for """"http://localhost:8080"""":unexpected end of file from server nested exception is java.net.socketexception: unexpected end of file from server at org.springframework.web.client.resttemplate.doexecute(resttemplate.java:498) .... {code}"""" is a not user story because it is most similar to: """"Cors issue when trying to use http in singlenode when i'm trying to send a json object to spring-xd i get the following error even though i opened up requests to allow all. xmlhttprequest cannot load http://localhost:9000/. no 'access-control-allow-origin' header is present on the requested resource. origin 'http://localhost:3000' is therefore not allowed access. config: spring: profiles: singlenode xd: transport: local ui: allow_origin: """"*"""""""" and similar to """"Create java client lib over rest api so that clients (e.g. shell or custom user program) are insulated from rest details (ala cloud foundry). may go even further if we want a java dsl for stream definitions (that may reuse batch command pojos btw): difference between: xdclient.createstream(""""mystream"""" """"http --port=9000 | file"""") and import static stuff.* streamdef stream = http().port(9000).pipe(file()) xdclient.createstream(""""mystream"""" stream)"""" and similar to """"When there are no wiretap listeners don't publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be """"serialized + transported + deserialized"""" to other members even if there is no one listening. this """"serialized + transported + deserialized"""" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Harmonize common deployer runtime properties applied to modules most if not all of the deployers have some concept of customization of the deployed modules: be it memory or cpu disk etc. this ticket is about harmonizing the handling of such properties with the assumption that we want a per-deployer set of defaults and overridability at deployment time."""" is a not user story because it is most similar to: """"Enhance """"module upload"""" to support exploded dirs (on the shell side) would be nice to have the shell zip the contents of a directory if not already in zipped form. this way the development cycle (if one decided to use upload) is quicker and edits can be done in place."""" and similar to """"Https source configuration issues 1. the sample {{httpsslproperties}} file that is included in the distribution contains the line: {quote} keystore.passphrase=secret {quote} the correct key value is {{keystore.passphrase}}. this issue causes https sources to deploy but not bind to the port. 2. the password is always defaulting to """"secret"""""""" and similar to """"Optimize jobservice queries and batch domain object usages based on the discussion from here: https://github.com/spring-projects/spring-xd/pull/849#issuecomment-43215168 we need a better strategy to handle some of the queries and updates to the batch domain objects."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Make sqoop job and mapreduce samples work with hortonworks hdp 2.2 single-node cluster having problems testing against the sandbox 2.2. we need to set the following properties: yarn.application.classpath yarn.app.mapreduce.am.command-opts mapreduce.application.classpath mapreduce.application.framework.path"""" is a not user story because it is most similar to: """"Improve itemwriter in ootb jdbchdfs to use datastorewriter the current jdbchdfs job does not take advantage of all the features available to write into hdfs provided by spring hadoop's datastorewriter implementations such as partitioning. update the jdbchdfs job to use <int-hadoop:store-writer/> (similar to the hdfs sink) inside a new itemwriter implementation"""" and similar to """"Local control channels enabled in singlenodeapplication when alternate transport is selected. this causes intermittent test failures when testing streams with other transports since moduledeployer receives duplicate requests from multiple threads. fix is to check for local transport before invoking setupcontrolchannels()"""" and similar to """"Allow end users to configure rabbit mq properties on the messagebus (for acks txs etc). this requires exposing properties to the listenercontainer. probably cleaner to inject the listenercontainer into the rabbitmessagebus and expose property placeholders on the lc. maybe do the same for rabbitadmin as well."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the option of _kerberized_ hdfs sink so that i can leverage kerberos (open source distributed authentication system) for secured data writes into hadoop."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a user i need a """"production-ready' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x"""" and similar to """"As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Enable configuration of replication factor on the kafka message bus the field exists and it is referred to in application.yml but it does not have a setter and the bus will always use the configured default which is 1."""" is a not user story because it is most similar to: """"Adapt springone 2012 ui code from keynote demo of election results to use xd existing code: https://github.com/ghillert/springone2012"""" and similar to """"Add server runtime info to banner standalone admin currently has no shiny banner as container has. more importantly it does not say which port it's listening on the transport used etc."""" and similar to """"Design and budget perf env for xd on rackspace provide design for how we are going to run xd and kafka on rackspace. this includes the base design for the kafka perf tests environment. this will be used to provide a budget for the cloud resources for the performance environment."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add service activator processor would be nice to have a serviceactivator processor available so that if one had an existing spring bean they could simply describe the bean id and method name - without going through the full complexity of creating a processing module."""" is a not user story because it is most similar to: """"Modify rest controller to obtain stream/job state see the [design document|https://docs.google.com/a/gopivotal.com/document/d/1kwtoh_xef1wmklzq8azaiuhbzwilpcdi8g9_hap8fgc/edit#heading=h.2rk74f16ow4i] for more details. the rest controller needs to be modified to obtain stream/job state once it is available in zookeeper. this depends on xd-1847."""" and similar to """"Not able to connect a pubsub channel to spark streaming module if a spark streaming module is setup to connect to a pub/sub channel (a topic or a tap channel) then it doesn't bind to it. for instance if i have a stream """"ingest"""" with a definition """"http | log"""" and want to create another stream as """"tap:stream:ingest > spark-processor | count"""" then this stream doesn't work."""" and similar to """"Create splunk sink module this would be based off the spring-integration-extenstions splunk project. the use of this adapter for storing tweet data is in https://github.com/markpollack/springone we should be able to reproduce the use case as done in that demo"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update docs for separate control and data transport"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The hdfs sink should support a file naming strategy to distinguish between file currently being written and completed files a file that is in the process of being written to should have a customized suffix added to the name e.g. 'temp'. once the file is closed the suffix is removed and replaced with another value - default value can be dependent on the serialization format used but can be customized"""" is a not user story because it is most similar to: """"Move decision logic for directbinding out of bus to deployer as the decision for directbinding may become more complicated (see eg xd-2946) move the *decision* part out of the bus leaving only the *application* there (leveraging a pre-computed property such as directbind=true). the computation of that property is to be moved at the deployer level"""" and similar to """"Add code coverage to gradle build build should be able to generate code coverage reports. after a quick tour of the intertubes it seems that jacoco is a well maintained project and has first class support inside gradle. http://www.gradle.org/docs/current/userguide/jacoco_plugin.html"""" and similar to """"Resolve classloading issues for custom hadoop based batch jobs there are several issues making it hard to impossible to create batch jobs that use pig hive hbase or other technologies supported by spring for apache hadoop project. we need to make the corresponding dependencies available on the hadoop classpath."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add infrastructure support for admin ui as an user i'd like to have the ability to setup infrastructure to develop/enhance ui functionality. this is including but not limited to: - ui designs (mockup's) - unit testing - ci - js 'minification'"""" is a not user story because it is most similar to: """"Research adding support for 'spring-cloud-config' to configure modules please refer to the gh issue reported here: https://github.com/spring-projects/spring-xd/issues/1218"""" and similar to """"Profile / improve performance of tuplebuilder see discussion at https://github.com/spring-projects/spring-xd/pull/1311 1) there seems to be unused simpledateformat in tuplebuilder which hurst perf 2) more generally should take some time to profile / micro-benchmark tuplebuilder"""" and similar to """"Clean shutdown of redis in xd-container need to shutdown cleanly no exception messages are shown. order of components in the stream should be shut down from 'first to last' (opposite of creation)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Sqooptasklet doesn't use keytab configuration from hadoop.properties file hey guys i have been using the sqooptasklet for a while but i found an unexpected problem. basically i'm not able to configure kerberos authentication from hadoop.properties file as follow: <util:properties id=""""hadoopproperties"""" location=""""${xd.config.home}/hadoop.properties"""" /> <bean id=""""sqooptasklet"""" class=""""org.springframework.xd.sqoop.sqooptasklet""""> <property name=""""arguments""""> <list> <value>import</value> <value>--connect otheroptions</value> </list> </property> <property name=""""hadoopproperties"""" ref=""""hadoopproperties"""" /> </bean> hadoop.properties file: fs.defaultfs=hdfs://hdfshost:8020 yarn.resourcemanager.hostname=host001 yarn.resourcemanager.address=host001:8032 yarn.resourcemanager.scheduler.address=host001:8030 mapreduce.jobhistory.address=host003:10020 yarn.application.classpath=$hadoop_client_conf_dir$hadoop_conf_dir$hadoop_common_home/*$hadoop_common_home/lib/*$hadoop_hdfs_home/*$hadoop_hdfs_home/lib/*$hadoop_yarn_home/*$hadoop_yarn_home/lib/*$hadoop_mapred_home/*$hadoop_mapred_home/lib/* mapreduce.framework.name=yarn spring.hadoop.security.authmethod=kerberos spring.hadoop.security.userprincipal=user1@company.com spring.hadoop.security.userkeytab=/home/user1/user1.keytab spring.hadoop.security.namenodeprincipal=hdfs/_host@company.com spring.hadoop.security.rmmanagerprincipal=yarn/_host@company.com spring.hadoop.security.jobhistoryprincipal=mapred/_host@company.com or fs.defaultfs=hdfs://hdfshost:8020 yarn.resourcemanager.hostname=host001 yarn.resourcemanager.address=host001:8032 yarn.resourcemanager.scheduler.address=host001:8030 mapreduce.jobhistory.address=host003:10020 yarn.application.classpath=$hadoop_client_conf_dir$hadoop_conf_dir$hadoop_common_home/*$hadoop_common_home/lib/*$hadoop_hdfs_home/*$hadoop_hdfs_home/lib/*$hadoop_yarn_home/*$hadoop_yarn_home/lib/*$hadoop_mapred_home/*$hadoop_mapred_home/lib/* mapreduce.framework.name=yarn security.authmethod=kerberos security.userprincipal=user1@company.com security.userkeytab=/home/user1/user1.keytab security.namenodeprincipal=hdfs/_host@company.com security.rmmanagerprincipal=yarn/_host@company.com security.jobhistoryprincipal=mapred/_host@company.com running the job i'm getting the following error: encountered ioexception running import job: org.apache.hadoop.security.accesscontrolexception: simple authentication is not enabled. available:[token kerberos so it means the sqooptasklet isn't setting the kerberos authentication this basically because in the sqooptasklet class is adding some prefix to the configurations (spring_hadoop_config_prefix) https://github.com/spring-projects/spring-xd/blob/master/extensions/spring-xd-extension-sqoop/src/main/java/org/springframework/xd/sqoop/sqooptasklet.java really doesn't make sense for me add those prefix and remove it later in the next call in the sqooprunner class. https://github.com/spring-projects/spring-xd/blob/master/extensions/spring-xd-extension-sqoop/src/main/java/org/springframework/xd/sqoop/sqooprunner.java if i inject the security.* configurations directly to the list arguments it works. i'm sure you guys have a good reason to add the prefix but i don't see why. unfortunately is annoying when you are developing in a local vm where you can test the simple authentication and after move the job to dev/prod environments with kerberos auth the above because you must change your sqooptasklet configuration injecting the new parameters. if the sqooptasklet allows inject those parameters directly from the hadoop.properties file you don't need change tasklet configurations to run your jobs with different authentication methods. thanks in advance. héctor"""" and """"As a user i'd like to have the option to delete the queues/topics so that we can include an _optional_ attribute as part of the stream destroy command to also clean-up the associated queues/topics. *notes:* * spring-amqp {{rabbitadmin}} now has a {{getqueueproperties()}} method which returns the number of consumers so it may be possible to use it for this purpose. * consider the possibility of _producers_ and/or _queues_ still containing data * consider the scenario even after the topics/queues are cleaned-up what to do with fanout exchange? *some further thoughts* * consider using the upcoming spring amqp rest api {{rabbitmanagementtemplate}} if the timing is not right we could temporarily invoke the rabbit rest api directly. * should be optional perhaps via {{stream destroy foo --clean}} * should this be done by the admin? or via a new plugin handling module undeployments - in the rabbit case undeploying a consumer would check for us being the last consumer and remove the queue/binding/exchange since we undeploy left->right everything can be cleaned up on the consumer side. * third option would be new methods on the bus {{cleanconsumer}} etc invoked by the {{streamplugin}} * down side of doing it on the admin is that he wouldn't necessarily know which rabbit cluster a stream was deployed to - so it probably has to happen on the container - even so we'd need the admin url(s) for the cluster."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Minification of xd admin ui js files with requirejs r.js and ngmin we need to make sure the xd admin js files are appropriately minified. currently the js files are not minified."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to port {{analytic-pmml}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline. and similar to """"As a user i'd like to have the option of reliable hdfs writes (for stream pipelines) so i can get acknowledgement of actual hdfs _commits_ as opposed to just from the message bus."""" and similar to """"As a developer i'd like to add support for dynamic partition subscription for the kafka source module so i can consume the payload from dynamic partitions."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update to spring shell 1.1.0.m1 release"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add binding information to application definition moduledefinition contains bindings that need to be passed to the modulerunner app. it appears these can be included in the application's environment."""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to have the option of _cassandra_ sink so i can leverage the nosql database to write high volumes of variable data segments in high velocity. and similar to """"As a user i'd like to have the option of _hawq_ sink so that i can write data directly into hawq via pxf extensions through avro/parquet format."""" and similar to """"As a qa i'd like to include acceptance test coverage for _mail_ sink module so that i can validate the functionality as part of every ci build."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Weird behavior of the transform module when trying some of the examples of xd-159 came up with weird behavior of the transform module. this boils down to: {noformat} stream create foo --definition """"http |transform --expression='new java.lang.integer(payload)' | transform --expression=payload.getclass() | log"""" http post --data 42 ==> integer (ok) http post --data wth => wth (!) {noformat} seems that when the expression can not be evaluated the incoming payload is transmitted as is"""" is a not user story because it is most similar to: """"Fix filejdbc batch job filejdbc throws an exception: {code} java.lang.illegalargumentexception: could not resolve resource location pattern [/mycsvdir/*.csv]: class path resource [mycsvdir/] cannot be resolved to url because it does not exist {code} this can be solved by using a file:// prefix maybe just update the docs?"""" and similar to """"Error when removing hdfs files in shell i get this: {code} xd:>hadoop fs rm /xd/test/time-3.log error: run hdfs shell failed. message is: org.apache.hadoop.fs.filestatus.isdirectory()z {code} so far i have seen this with --hadoopdistro hdp13 and hadoop12 same command works fine using shell from m5 release"""" and similar to """"[flo] ui unresponsive after some time the chrome ui interface for flo stream creation stops responding after some time. it starts working once the browser history/ cookies etc. are cleaned up. . the drop down stops working . i'm unable to look at or edit module properties . connecting different modules doesn't work either . drag and drop operations still work . command line stream creation still works is anyone else facing these issues ? thanks !"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Refactor/simplify jobplugin currently the jobplugin extends abstractplugin and the abstractplugin has got lots of unused code (like it doesn't do anything with preprocesssharedcontext()) in there."""" is a not user story because it is most similar to: """"User should be able to provide job deployment properties at the job definitions page user should be able to provide the job deployment manifest (module count criteria etc.)"""" and similar to """"Refactor spark and sqoop tasklets to use systemcommandtasklet the sqoop tasklet introduced an abstractprocessbuildertasklet implementation in xd-2430. we are now adding similar support to batch systemcommandtasklet in batch-2329 batch-2330 and batch-2331. we should refactor sqoop and spark tasklets to use the systemcommandtasklet as base."""" and similar to """"Provide job repository creation schema for additonal databases oracle gemfire xd (derby should be the dialect) and sybase"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Modify acceptance tests to give a pause time for deployment different than default kafka deployments take nearly 4 times as long as other transports because of the creation of the topic an partitions. currently all test use the same wait time whether it is for waiting for connections or file writes. so to get a ci build for kafka build would take a long period of time. the goal of the story is to allow deployments to have a different pause_time to give kafka bus the extra time it needs but not affect the timeout for other stages of the tests."""" is a not user story because it is most similar to: """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Vary consumers size (ecb-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Vary consumers size (db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-d user i'd like to have the option to choose hadoop distribution of choice so i can load the right hadoop libraries in the cp."""" is a user story, and is worth 3 story points because it is most similar to: As a s-c-d developer i'd like to add support for hadoop commands in shell so i can use it to query the hadoop file system. and similar to """"As a spring xd user i'd like to create streaming pipelines so i can take advantage of latest specs from both xd and spark/spark streaming."""" and similar to """"As a developer i'd like to certify spring xd against phd 3.0 so i can synchronize with the latest odp based bits."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Automate provisioning story for xd"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Tail file channel adapters"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Publish spring xd final distribution zip as part of bamboo artifactory plugin currently bamboo's gradle artifactory plugin has the artifacts configured to projects target(build) directory 'archives'. we need to have a way to set the final distribution archive as one of the gradle 'configurations' in our build.gradle and refer it inside bamboo artifacts."""" is a not user story because it is most similar to: """"Improve itemwriter in ootb jdbchdfs to use datastorewriter the current jdbchdfs job does not take advantage of all the features available to write into hdfs provided by spring hadoop's datastorewriter implementations such as partitioning. update the jdbchdfs job to use <int-hadoop:store-writer/> (similar to the hdfs sink) inside a new itemwriter implementation"""" and similar to """"Add directory to classpath in server startup scripts so groovy based processors can be easily referenced by name without a resource uri prefix a stream such as time | filter --script=oddminutefilter.groovy | file would load the groovy script 'oddminutefilter.groovy' that is located in the directory modules/processor or perhaps in modules/processor/scripts. not sure the benefit of having a subdirectory below processor just for scripts."""" and similar to """"Fix error handling in jdbchdfs job the jdbchdfs job keeps the output stream open in case of error writing to hdfs. we should improve this and close it plus throw an exception. we should also make sure the step is marked as failed instead of complete when an exception is thrown in the writer."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add ability to inject delimiter on pre-packaged jobs that deal with files."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Documentation for """"http | hdfs"""" processing put on the guide as a section in an 'input-stream' wiki page."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Hadoop distro option hdp20 is broken starting the shell with --hadoopdistro hdp20 causes this: exception in thread """"main"""" org.springframework.beans.factory.parsing.beandefinitionparsingexception: configuration problem: unable to locate spring namespacehandler for xml schema namespace [http://www.springframework.org/schema/hadoop] offending resource: url [jar:file:/users/trisberg/demo/spring-xd-1.0.0.build-snapshot/shell/lib/spring-xd-shell-1.0.0.build-snapshot.jar!/meta-inf/spring/spring-shell-plugin.xml] creating a stream """"time | hdfs"""" in xd-singlenode started with --hadoopdistro hdp20 causes this: java.lang.illegalstateexception: can't find class used for type of option 'codec': org.springframework.data.hadoop.store.codec.codecs"""" is a not user story because it is most similar to: """"Embed local message bus in dirt as default for singlenode currently all message bus implementations are removed from the runtime classpath and loaded on demand from the file system according to the transport setting. custom module projects that include in container testing must install messagebus-local on the local file system. this is currently configured as a task for module build scripts. this is also a dependency for testing in the ide and developers need to execute the build task or configure the messagebus manually. embedding the local mb for the singlenode application (local is not a valid transport for distributed) eliminates this step."""" and similar to """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"Ui - launch a job with parameters use a modal dialog to specify runtime parameters. there should be a little text are that gives hints as to the spring batch parameter key/value conventions e.g. for type. might be a good idea to have a checkbox that lets you select to 'auto increment' job instance number. 4 columns key value type identifying and an 'add parameter' button that adds a new row. this would appear as a modal dialog box polling of the state of the deployments would be suspended while the job parameter modal dialog box is shown."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Upgrade scsm hdfs sink to shdp 2.3.0.m3"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Running gradle idea creates project configured with source 1.6 the gradle idea task creates a project configured with source 1.6 this results in compile failures on java 7 specific code"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The parser should be able to handle a parameter name with a '-' hyphen embedded. right now it treats it as a new parameter start and fails."""" is a not user story because it is most similar to: """"Move shell integration tests to spring-cloud-data shell this could focus only on the subset (stream operations)"""" and similar to """"Design the foundation to port xd modules to s-c-s as an s-c-s developer i'd like to brainstorm and design the foundation to port xd modules as s-c-s modules so i can use it as the base and start migrating the modules."""" and similar to """"Use kryo instance pooling to reduce instantiation overhead https://github.com/esotericsoftware/kryo#pooling-kryo-instances"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i would like to be able disable snappy compression when using hdfs-dataset sink with avro files. i'd also like to be able to provide a different codec."""" is a not user story because it is most similar to: """"Handle adminserver shutdown cleanly the admin server's tomcat is not shutdown properly. there is an existing method shutdowncleanly() on adminserver but the spring-xd-shell tests hang when we use this method to shutdown the admin server."""" and similar to """"Investigate and create moduleid class for modulemetadata the id field in modulemetadata is using module id that is derived from module parameters which varies between stream and job modules. we can come up with moduleid class that applies for both stream/job modules and can be used in modulemetadata."""" and similar to """"Enable/disable boot and integration mbeans when jmx is enabled/disabled spring integration mbeans are enabled by default even though xd_jmx_enabled is set to false. we need to disable jmx on these mbeans as well as spring boot mbeans."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd-container and xd-admin should log to a file out of the box we should have an externally editable log4j config file in a conf dir and the default should log to a file (presumably in a logs dir)"""" is a not user story because it is most similar to: """"Abstractshellintegrationtests should start and stop server once. e.g. make application static and check for initialization. need to ensure each test restores the initial state of the server"""" and similar to """"Ui: add support for stoppable notifications * update angular growl to v2 * allowing for stoppable notifications (in case you want to see it for longer than 5 secs)"""" and similar to """"Fix compilation errors after moving singlenodeapplication package samples including singlenode tests need to update for package changes"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Set default hadoop name node for shell currently you have to set the default name node every time your start the shell. we should do 2 things: - provide a default name node set default hadoop name node for shell: hdfs://localhost:8020 - should we provide some form of persistence? it kind of sucks that you have to re-specify the name node every time the shell starts up {code} xd:>hadoop fs ls / you must set fs url before run fs commands {code}"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to provide optional key-value pairs as deployment properties so i could leverage them at the runtime to instruct how the modules will be deployed. _the scope of this story is to specifically support {{count}} to represent {{n}} instances of modules that share the same environment variables._ and similar to """"As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing"""" and similar to """"As a user i'd like to have a _r_ processor so i can efficiently perform data computations and statistical analysis in the context of streaming pipeline. investigate the right approach that fits spring xd model. *r java libraries* [rjava|http://rforge.net/rjava/] [renjin|http://www.renjin.org/]"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Default option values broken for composed modules may want to fix """"properly"""" when tackling the module options for composed modules but this is currently broken (and wasn't at some point): module compose upperhttp --definition """"http | transform --expression=payload.touppercase()"""" stream create foo --definition """"upperhttp | log"""" this will fail saying that ${port} can't be resolved this will work though: module compose upperhttp --definition """"http --port=9000 | transform --expression=payload.touppercase()"""" stream create foo --definition """"upperhttp | log"""" note that stream create foo --definition """"upperhttp --port=xxx | log"""" should work too wut won't but that's another bug (will create after this one)"""" is a not user story because it is most similar to: """"Elk - log analysis we would like to experiment with “elk” stack. it’s the combination of elasticsearch logstash and kibana to extract end-to-end real-time insights from structured and unstructured data source. possibly provide integration endpoints to some of the components. features: * search and analyze in real-time * scrub parse and enrich data * visualization website -> http://www.elasticsearch.org/overview/ github -> http://www.elasticsearch.org/overview/elkdownloads/"""" and similar to """"Container process id's still showing after shutting them down in my test case i have security enabled. i tested this on distributed mode. i have a few streams deployed. * started 3 xd containers. * issue *shutdown* from ui * the containers don't show up on the ui any more * jps lists the process id of 2 containerserverapplication(there should be none listed) i have noticed different test results every time like at times 2 out of 3 containers are terminated and at times 1 out of 3 are terminated. please let me know if you have issues replicating this."""" and similar to """"Change inconditionnal thread.sleep() calls in tests to smarter incremental pauses there are a lot of thread.sleep() calls with delays chosen in the 1-2 seconds range. change to a while loop with smaller pauses until a timeout is reached and give up. this applies to verification code (e.g. verifying that a counter has expected value) as well as file setup or http being ready to accept requests etc"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Exception thrown when accessing jolokia via the management context path when trying to access jolokia via the management/jolokia (http://localhost:9393/management/jolokia) i get the following exception. {""""error_type"""":""""java.lang.illegalargumentexception""""""""error"""":""""java.lang.illegalargumentexception : no type with name 'management' exists""""""""status"""":400""""stacktrace"""":""""java.lang.illegalargumentexception: no type with name 'management' exists\n\tat org.jolokia.util.requesttype.gettypebyname(requesttype.java:69)\n\tat org.jolokia.request.jmxrequestfactory.creategetrequest(jmxrequestfactory.java:94)\n\tat org.jolokia.http.httprequesthandler.handlegetrequest(httprequesthandler.java:78)\n\tat org.jolokia.http.agentservlet$3.handlerequest(agentservlet.java:298)\n\tat org.jolokia.http.agentservlet.handle(agentservlet.java:229)\n\tat org.jolokia.http.agentservlet.doget(agentservlet.java:194)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:621)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:728)\n\tat org.springframework.web.servlet.mvc.servletwrappingcontroller.handlerequestinternal(servletwrappingcontroller.java:158)\n\tat org.springframework.web.servlet.mvc.abstractcontroller.handlerequest(abstractcontroller.java:154)\n\tat org.springframework.boot.actuate.endpoint.mvc.jolokiamvcendpoint.handle(jolokiamvcendpoint.java:120)\n\tat sun.reflect.nativemethodaccessorimpl.invoke0(native method)\n\tat sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)\n\tat sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)\n\tat java.lang.reflect.method.invoke(method.java:606)\n\tat org.springframework.web.method.support.invocablehandlermethod.invoke(invocablehandlermethod.java:215)\n\tat org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:132)\n\tat org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:104)\n\tat org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:749)\n\tat org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:689)\n\tat org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:83)\n\tat org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:938)\n\tat org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:870)\n\tat org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:961)\n\tat org.springframework.web.servlet.frameworkservlet.doget(frameworkservlet.java:852)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:621)\n\tat org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:837)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:728)\n\tat org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:305)\n\tat org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210)\n\tat org.springframework.boot.actuate.trace.webrequesttracefilter.dofilter(webrequesttracefilter.java:115)\n\tat org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243)\n\tat org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210)\n\tat org.springframework.boot.actuate.autoconfigure.endpointwebmvcautoconfiguration$applicationcontextfilterconfiguration$1.dofilterinternal(endpointwebmvcautoconfiguration.java:137)\n\tat org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108)\n\tat org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243)\n\tat org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210)\n\tat org.springframework.web.filter.hiddenhttpmethodfilter.dofilterinternal(hiddenhttpmethodfilter.java:77)\n\tat org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108)\n\tat org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243)\n\tat org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210)\n\tat org.springframework.web.filter.httpputformcontentfilter.dofilterinternal(httpputformcontentfilter.java:88)\n\tat org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108)\n\tat org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243)\n\tat org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210)\n\tat org.springframework.boot.actuate.autoconfigure.metricfilterautoconfiguration$metricsfilter.dofilterinternal(metricfilterautoconfiguration.java:85)\n\tat org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108)\n\tat org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243)\n\tat org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210)\n\tat org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:222)\n\tat org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:123)\n\tat org.apache.catalina.authenticator.authenticatorbase.invoke(authenticatorbase.java:472)\n\tat org.apache.catalina.valves.remoteipvalve.invoke(remoteipvalve.java:680)\n\tat org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:171)\n\tat org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:99)\n\tat org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:118)\n\tat org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:407)\n\tat org.apache.coyote.http11.abstracthttp11processor.process(abstracthttp11processor.java:1004)\n\tat org.apache.coyote.abstractprotocol$abstractconnectionhandler.process(abstractprotocol.java:589)\n\tat org.apache.tomcat.util.net.nioendpoint$socketprocessor.run(nioendpoint.java:1680)\n\tat java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145)\n\tat java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615)\n\tat java.lang.thread.run(thread.java:724)\n""""}"""" and """"Jmx shouldn't register taps or streams if the creation fails there's a lifecycle problem when a tap creation fails (e.g. because the dsl syntax is wrong). subsequent attempts to create the tap will fail with an error: [{""""links"""":[]""""logref"""":""""messagehandlingexception""""""""message"""":""""org.springframework.context.applicationcontextexception: failed to start bean 'org.springframework.integration.monitor.integrationmbeanexporter#0#92e27d20-4c48-4131-866c-91b6cb642ca2' nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=nullchannel sends=0 receives=0]] with key 'xd.tap1:type=messagechannelname=nullchannelindex=1module=log' nested exception is javax.management.instancealreadyexistsexception: xd.tap1:type=messagechannelname=nullchannelindex=1module=log""""}] disabling jmx solves the issue. reproduce create a bad stream definition name 'bad' try to recreate with the same name but correct stream definitions. the system will report that the stream already exists."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-d developer i'd like to enhance integration test coverage for {{cc}} spi so i can continuously evaluate functionalities via ci pipeline."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update xd-ec2 deployer to use xd_transport xd-ec2 must use environment variable xd_transport instead of --transport to declare data-transport for xd."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to use spring-cloud-config server for spring-bus modules so i can centrally manage external properties. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Investigate throwing of exception in batchjobregistrybeanpostprocessor the condition that leads to this exception does not seem like it would ever occur namely the bpp processing a job deployment for a job that was already deployed to the same container."""" is a not user story because it is most similar to: """"Ui - setup sauce labs integration we should have a facility to easily test the e2e protractor tests against a variety of common browsers including ie. sauce labs seems to be the service to use."""" and similar to """"Fix mqtt module properties use of dot in property name prevents the user from specifying a value in stream definition also defaults are repeated at .xml and .properties level"""" and similar to """"Avoid use of module name twice in location when using a custom modules see https://github.com/springsource/spring-xd/pull/240#discussion_r6045724"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Support exponential moving average in richgauge this could easily be supported in the existing gauge by adding a setalpha method to richgaugeservice and adding the extra parameter """"alpha"""" to the gauge data (https://en.wikipedia.org/wiki/exponential_moving_average). if not set it would default to the current behaviour (simple mean) otherwise it would calculate the exponential moving average in place of the mean."""" is a not user story because it is most similar to: """"Fix mapreduce job submission on cloudera cdh5 submitting jobs that submit yarn mr tasks on cloudera 5.3.0 - job fails when submitting the yarn app java.lang.noclassdeffounderror: com/google/common/io/limitinputstream - this is from guava and that class was removed starting with v. 15.0 - i can get around this by including guava-14.0.1.jar in lib/cdh5 (not sure if this breaks something else)"""" and similar to """"Change inconditionnal thread.sleep() calls in tests to smarter incremental pauses there are a lot of thread.sleep() calls with delays chosen in the 1-2 seconds range. change to a while loop with smaller pauses until a timeout is reached and give up. this applies to verification code (e.g. verifying that a counter has expected value) as well as file setup or http being ready to accept requests etc"""" and similar to """"Jsonstringtoobjecttransformertests fail on mac if local machine name is not in /etc/hosts when running the gradlew build the jsonstringtoobjecttransformertests unit test failed. the cause is enumerated below: caused by: com.gemstone.gemfire.internal.tcp.connectionexception: while creating serversocket and stub on port 0 with address glenns-mbp/192.168.1.254 if i added 127.0.0.1 glenns-mbp to my /etc/hosts the tests succeeded."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Install-redis script should not use relative path to determine redis source dist currently the install-redis script uses relative path to determine redis source dist file. since this is error prone we need to fix it."""" is a user story, and is worth 8 story points because it is most similar to: As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics. and similar to """"As a user i need to have the ability to create docker images via ci build so that i can build all the components/configurations i need into a docker image test it and deploy the image to various environments."""" and similar to """"As a field engineer i'd like to have reference architectures built on spring xd so that i can use that as reference building pocs. the scope is to get the raw domain specific ideas captured as first step."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Kafka message bus maxwait property is not set up the maxwait property from server.yml in the message bus section for kafka is not propagated through the code it is ignored."""" is a user story, and is worth 8 story points because it is most similar to: As a pm i'd like to have the smart grid demo (from s1-2014) ported into spring xd samples repo. and similar to """"As a developer i'd like to build _spark_ batch job sample so that we can demonstrate some of the distributed data computation capabilities."""" and similar to """"As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Change xd.sink logging level to info the log sink is not writing information to the log. not the solution but when log4j.rootlogger is set to info the log sink information is written to the log."""" is a not user story because it is most similar to: """"Ensure job definitions are escaped in ui if using the definition <aaa || bbb> where the definition starts with a """"<"""" and ends with a """">"""" the definition for the composed job does not appear on the definition page."""" and similar to """"Add caching to moduleoptionsmetadataresolver will likely involve having the module identity (type+name) be part of the optionsmetadata identity/cache key"""" and similar to """"Ui: ability to deploy stream with deployment properties admin ui currently allows job to be deployed with deployment properties we need similar way to deploy stream with the deployment properties (module count container matching criteria)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade lettuce and netty upgrade lettuce to 2.3.3 and subsequently netty to 3.6.6"""" is a not user story because it is most similar to: """"Create ci build for sctm"""" and similar to """"Update base ami to be a hvm"""" and similar to """"Add command for tap creation"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Enhance jdbc sink test to include more options to enrich acceptance test i'd like to add coverage to jdbc sink by including *-- driverclass* and *-- url* options."""" is a not user story because it is most similar to: """"Change springsource references in pom.xml to spring/spring.io this is currently in the m6 pom: <organization> <name>springsource</name> <url>http://springsource.org</url> </organization>"""" and similar to """"Document router processor module for an example see comments here: https://jira.springsource.org/browse/xd-671"""" and similar to """"Gauge and counter hash and equals should not depend on values the value is mutable so this causes problems if storing metrics in a hashset for example."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to handle the non-default {{configurableconversionservice}} tuples in an uniform manner so they're not reset after deserialization."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Hdfs sink should honor --fileextension parameter for bzip2 compressed files looks like the --fileextension isn't used when compressing files with bzip2 some use cases requirer bz2 instead of bzip2 as the extension. also '.bz2' should be the default extension. at the same time we should change the default gzip extension to '.gz'."""" is a not user story because it is most similar to: """"Prevent submiting jobs that are not currently deployed using admin ui job modules """"launch"""" and """"schedule"""" command buttons are active even if the job module isn't deployed or has been destroyed. get errors like: """"yikes something bad happened while launching job myjob4"""" """"the job named 'myjob4' is not currently deployed"""""""" and similar to """"Documentation for file source http://static.springsource.org/spring-xd/docs/1.0.0.build-snapshot/reference/html/#sources should have 'file' added to the list and also the corresponding section that shows some basic usage."""" and similar to """"Return the step execution information in the current job execution controller related to https://jira.springsource.org/browse/batch-2109 distributedjobservice#listjobexecutionsforjob overrides simplejobservice#listjobexecutionsforjob and does not include the *stepexecution*s. this is due to serializion issues with jackson. in order to fix this we need to add a jackson mixin."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" is a not user story because it is most similar to: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" and similar to """"Update creating a sink module section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.x-snapshot/reference/html/#_test_the_deployed_module_3"""" and similar to """"Update sources twitter search section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#twittersearch"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i want to be able to provide the partitioning logic for a named destination so that i can control the ordering of outbound messages."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Cli error when not specifying module type in module commands is cryptic an not helpful all of the cli module commands that require the module name (e.g. 'module display source:mqtt') require that you preface the name with the module type. if you forget to do this e.g. 'module display mqtt' you get a fairly cryptic exception which can confuse end users. the exception is: java.lang.stringindexoutofboundsexception: failed to convert 'mqtt' to type qualifiedmodulename for option 'name' string index out of range: -1"""" is a not user story because it is most similar to: """"Remove %l from log4j patternlayout the xd-dirt log4j.properties includes the calling line number {{%l}} which is not recommended for production. https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/patternlayout.html {{warning generating caller location information is extremely slow and should be avoided unless execution speed is not an issue.}}"""" and similar to """"Container server does not log a message that it has started or stopped successfully $ ./xd-container processing module 'module [name=file type=sink]' from group 'tailtest' with index: 1 processing module 'module [name=tail type=source]' from group 'tailtest' with index: 0 logging of 'processing module' should have log level time.."""" and similar to """"Unable to define port on rabbitmq streams the documentation for rabbitmq says to use the --address option to specify a port. we've tried --address=1.2.3.4:5678 (and also --port=5678 just in case) but have been unable to get a successful deployment. running the same stream definition on a default port (i.e. without specifying a port) does work."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update spring integration / spring amqp versions 4.1.4 and 1.4.5 respectively."""" is a not user story because it is most similar to: """"Implement mesos spi as an s-c-d user i'd like to deploy s-c-d on mesos."""" and similar to """"Fix #jsonpath evaluation following jsonpath version upgrade"""" and similar to """"Set up a project for xd shell set up a basic spring shell project for xd shell"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Ui: when launching a job - required parameters should be indicated and their names prepopulated"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to move {{mail}} module from xd to s-c-s repo so i can use it as source to build streaming pipeline."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to move {{cassandra}} module from xd to s-c-s repo so i can use it as {{sink}} to build streaming pipeline. and similar to """"As a spring-bus lead i'd like to review the current spring-bus architecture and the design specs so i can address any foundation level gaps."""" and similar to """"As a developer i'd like to have a maintenance branch so that i can commit minor release _(ex: 1.0.2)_ code changes instead of committing to master."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Library support changes at shell level following merge of https://github.com/spring-cloud/spring-cloud-dataflow/commit/5cb81c49a240304be14bcf5d724cfd36df403d39 the following changes need to happen at shell/rest level: {{module list}} should not show libraries {{library list}} should be added to show libs {{module register}} should not accept type=library {{library register}} should be added {{module info}} should not accept libs {{library info}} should be added"""" is a not user story because it is most similar to: """"Streamline command-line arg management command line arguments (and especially their default values) are currently scattered around different places. the aim is to regroup those in a common place (*options classes make sense). also not very happy with how system properties are used as a vehicle for options.transport / options.home"""" and similar to """"Document how to specify custom-modules location via environment variable. it is possible to specify the location of custom modules via the environment variable {{xd_custommodule_home}} which is provided by spring boot property key derivation mechanism (in this case derived from {{xd.custommodule.home}}). this allows a user to specify a custom modules location that survives a complete wipe of spring-xd installations."""" and similar to """"Remove use of system property xd.home to define location for install location rely on environment variable xd_home this is in the adminmain and containermain. can get the environment property directly in java code unless provided explicitly on the command line using --xdhomedir."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a shell command to post data to an http port for use with the http source module the current streams chapter http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#streams shows using curl to post some data to a http source module curl -d """"hello"""" http://localhost:9000 create a shell command so curl doesn't have to be used. https://github.com/springsource/rest-shell has a command already developed for this."""" is a not user story because it is most similar to: """"Strict flag for jdbchdfs h2. narrative as a developer when using jdbchdfs's incremental imports i need to be notified that something went wrong in a previous run of the jdbchdfs job so that i can take the appropriate actions based on the data previously imported. h2. back story as the incremental import currently works if the job fails half way through there is no check on the next run to see if the last run failed or not and how to address partially imported data."""" and similar to """"Fix classpath and servlet container issues several issues with 1.3.0.m1 staged version - we now use tomcat instead of jetty which prevent s xd-admin from starting on yarn - we now have guava 18.0 on classpath instead of 16.0.1 - xd-yarn push doesn't work hadoop client for 2.7.1 needs servlet api - updating hadoop to 2.7.1 instead of 2.6.0 -- this causes curator to also update to 2.7.1 which throws exception on startup"""" and similar to """"Move --deletefiles out of resourcesintojdbcjobmoduleoptionsmetadata currently the filedeletion listeners are added to filepollhdfs and filejdbc ootb job modules so that the files are deleted after successful completion of jobs that write the file into hdfs/jdbc. we have """"--deletefiles"""" option in resourcesintojdbcjobmoduleoptionsmetadata (from https://github.com/spring-projects/spring-xd/pull/562) which makes it available for hdfsjdbc job module as well. but it is not supported yet as it involves deletion of hdfs files. we need the file deletion listeners for the hdfsjdbc and hdfsmongodb job modules so that if opted to delete files it can be supported."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create documentation on the general dsl syntax the asciidoc wiki should have a section (included in the _sidebar.asciidoc as well) that describes the general usage of the dsl syntax."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance. and similar to """"As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time."""" and similar to """"As a continuation we would like to further investigate spark develop poc and identify the best appropriate design and implementation for xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Failure in writing to hdfs when undeploying and redeploying a stream with numbers in directory and/or file name"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create documentation for composed modules"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update spring-data-hadoop version to 2.0.0.rc4 update spring-data-hadoop version to 2.0.0.rc4 and make necessary changes to the yarn configuration."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" and similar to """"As a s-c-d developer i'd like to create {{moduleregistry}} implementation so i can use this infrastructure to lookup module coordinates by name."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Document kafka message bus properties for example how to specify the partition count for topics that are created by the message bus."""" is a not user story because it is most similar to: """"Create jdk6 ci build maybe only have it run after the publish build instead of triggering builds directly from jdk6->7->8."""" and similar to """"When a tap is re-deployed after undeploy it doesn't work when a tap on a stream is undeployed and re-deployed it stops working. to make it work the main stream associated with the tap needs to be undeployed and re-deployed."""" and similar to """"Documentation for using a specific hadoop distribution show how to select a specific hadoop distribution when starting embedded/standalone xdcontainer."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to upgrade to {{0.6.0}} release of lattice so i can demonstrate data flow on the latest lattice improvements."""" is a user story, and is worth 3 story points because it is most similar to: As a users i would to be able to execute sql statement/script via a processor or job statement. and similar to """"As a s-c-d developer i'd like to move the external library to its own project so we have a clear separation of functionalities in s-c-d repo."""" and similar to """"As a developer i'd like to add load receiving _sink_ module so that i can measure received throughput"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create shell integration tests for stream lifeycle create delete deploy streams..."""" is a not user story because it is most similar to: """"Splunk sink - add option to write to index add option to write to splunk named index as an alternative to tcp."""" and similar to """"Fix package tangle between org.springframework.xd.dirt.plugins.job and org.springframework.xd.dirt.job"""" and similar to """"The hdfs sink should support writing pojos to hdfs using parquet writing pojos using kite sdk"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Composed modules destination binding order incorrect created a stream with definition: {code} mysourcemodule | myprocessormodule | log {code} this stream worked fine but when created composed module with definition {code} mysourcemodule | myprocessormodule {code} then stream definition {code} mycomposedmodule | log {code} get an error stating that the output channel of mysourcemodule has no subscribers. looking at previous bugs this appears to be a module binding order in which the source is started before the processor has subscribed to the output channel of the source."""" is a not user story because it is most similar to: """"Provide ability to disable tab completion for specific module options not all module options are born equal. some are more important/useful than others and having the more """"expert"""" ones show up e.g. in tab completion is very noisy (esp. given how jline2 currently presents the whole stream definition typed so far when doing completion as opposed to just the last bit)"""" and similar to """"Hdfs sink should provide rollovertime option not only idletiemout when using hdfs sink with ildetimeout and rollover options in stream definition we have noticed that idletimeout does not give you a flexibility when you would prefer a file to rollover after specific time regardless of the activity/inactivity of the file. proposed option: rollovertimeout timeout after file will be automatically closed link: #xd-2413"""" and similar to """"Add support to start apps in yarn automatically by type as an s-c-d developer i'd like to add support to negotiate with the resourcemanager rest-apis to deploy modules by groups. so i can build instrumentation to start the app instances automatically. perhaps also take into account of the app specifics such as {{apptype=clouddata}} and {{appname=spring-cloud-data-yarn-app}}."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The user needs the ability to set up a misfire policy for a trigger 2 options are: 1) fire the trigger immediate - launch the job when trigger can gather the resources necessary start the job 2) do nothing - ignore this job fire time and catch this scenario can occur if xd is down or resources (threads) are not available at the time a job is to be launched."""" is a not user story because it is most similar to: """"Doc generation accesses http://docbook.sourceforge.net when generating docs the build tries to access http://docbook.sourceforge.net/release/images/draft.png you will observe output like: {code} error with opening url 'http://docbook.sourceforge.net/release/images/draft.png': docbook.sourceforge.net background image not available: http://docbook.sourceforge.net/release/images/draft.png background image not available: http://docbook.sourceforge.net/release/images/draft.png background image not available: http://docbook.sourceforge.net/release/images/draft.png background image not available: http://docbook.sourceforge.net/release/images/draft.png background image not available: http://docbook.sourceforge.net/release/images/draft.png background image not available: http://docbook.sourceforge.net/release/images/draft.png {code}"""" and similar to """"Update doc about trigger changes trigger has been changed to be one single modules taking params (as opposed to 3 before) update doc at https://github.com/spring-projects/spring-xd/wiki/batch-jobs also arguably the module could be advertised as a source itself (it is only mentioned in the context of batch)"""" and similar to """"Create separate doc sections for reactor-ip's tcp and udp functionality it isn't obvious from looking through the table of contents on the left hand side that reactor-ip does both tcp and udp. breaking up the section into two would make it more clear - even though they would still use the same module."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Use the tuple data structure to process data in a spring batch step do not require a pojo in order to do end-to-end processing in a batch step."""" is a user story, and is worth 8 story points because it is most similar to: As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a continuation we would like to further investigate spark develop poc and identify the best appropriate design and implementation for xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Kafkamessagebustests#testcompression failing intermittent. reported on ubuntu and os/x"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add options for supporting compression on the message bus with rabbitmq https://jira.spring.io/browse/amqp-453 added support for compression with rabbitmq. xd should expose configuration options to enable and configure compression on the message bus. note some options may be specific for brokers or require additional functionality in xd. this issue should not address adding additional functionality to make the feature set as common as possible across msg bus implementations but expose what makes sense with the current code base for rabbitmq as an example kafka supports compressed.topics which lets you pick a subset of topics to be compressed."""" is a not user story because it is most similar to: """"Add """"http get"""" command to shell this will allow for some easy demonstration of how 'hateos' works via links in our rest api. there are probably some quite useful commands here that could be used from the spring data rest shell longer term but a good place to take a look at now. goal is to show how metrics such as counters are accessible w/o having to switch tabs to use wget. the pretty printing of the returned json is an important feature to help understand the response this functionality can be taken from/reused from the spring data rest shell"""" and similar to """"Update launcher.xml to have protocol independent beans defined and an import statement to load protocol specific defintiions from a system property defined location. launcher.xml can make use of the system property xd.pipeprotocol inside an import statement. this determines which version of the xd infrastructure to load for example what channelregistry implementation local or redis based or specific message listener containers. file name conventions should be used so if the option passed in from the command line is --pipeprotocol localchannel then the xml filename looked for has the 'protocol' suffix applied e.g. localchannelprotocol and is loaded via the classpath. redis and local will not be the only options other implementations will be provided in the future e.g. rabbit and the user may be able to provide their own implementations of these infrastructure classes (an advanced task)."""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create tests for stream/job deployments path data verification based on the discussion here: https://github.com/spring-projects/spring-xd/pull/852#issuecomment-43356579 we would like to have tests created for verifying the stream/job deployments path """"data"""""""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Document how to create a custom processor module. the use case is to write custom code that does processing on a specific domain class (perhaps from twitter adapter) or a tuple. need to package up this code so that it can be used inside xd."""" is a not user story because it is most similar to: """"Update processors filter & json filed value filter section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#filter http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#json-value-filter"""" and similar to """"Spark streaming module executor use getmessagebuilderfactory(beanfactory) we need to use getmessagebuilderfactory(beanfactory) to initialize messagebuilder in spark streaming module executor. please see the discussion: https://github.com/spring-projects/spring-xd/pull/1454/files#r24367825"""" and similar to """"Refactor tests with filesink|filesource to use eventually() matcher some tests (esp. moduleclasspathtests.testmodulewithclasspathafterserverstarted) seem to fail because of a race condition. add a hamcrest matcher that knows how to read the content of a filesink|source and refactor those to read like e.g. assertthat(filesink eventually(hascontent(""""foo)))"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Need a way to specify a specific namenode for a given hdfs based job a scenario where i have multiple jobs deployed to one singlenode or distributed instance of springxd that need to use different namenodes can easily exist. the ability to specify a namenode much the same way i can specify a directory would solve this problem. the desired behavior would be to specify a namenode that wasn't set using 'hadoop config fs <namenode>' in the job description and have that value used instead of the value set at the springxd global level."""" is a not user story because it is most similar to: """"Jobplugin should not add properties that are not needed if you create a simple """"http | log"""" stream and list the modules you'll see that jobplugin adds its numberformat makeunique etc properties. even though they do no harm it's really strange for users. plus it could conflict with e.g. activation of profiles given present properties"""" and similar to """"Add documentation for a 'stdin' source module in order to support ingestion from stdin the suggested approach is to do the following. xd:>stream create --definition """"tcp --decoder=lf | log"""" --name foo $ cat my.log | netcat localhost 1234 so while this is really a tcp based ingestion case once can use pipe or redirect of stdin/err in order to achieve the same goal. it should appear as a source module in the docs on par with other source modules in its own section."""" and similar to """"Make doc generation part of the standard build following the recent move of the doco to the main repo it makes sense to have the doc generation be part of the """"main"""" build at an early stage as an incentive for developers to push doc changes as soon as they change the code."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Reduce amount of logging at server startup info main zookeeper.zookeeper:100 - client environment:java.class.path produces a huge amount of output and is rather distracting if that specific entry could be at a log level of debug it would make the startup of the server look cleaner."""" is a not user story because it is most similar to: """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Retrieve information for a gauge todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Allow for late-binding of module options defaults this is about computing the value to support expressions such as ${xd.stream.name} as a default. initial discussion suggested to leverage the work done in xd-1175 by having a custom @latevalue (or @deploytimevalue etc) be resolved at deployment time"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Batch job's step execution count is always '0' the batch job's step execution count is retrieved from org.springframework.batch.admin.web.jobexecutioninfo in batch job repository. but the jobexecutioninfo always have the stepexecutioncount set to '0'."""" is a not user story because it is most similar to: """"Create a perfsink module create a sink that can capture the results of the messages sent and log the number of messages received per a configured interval in seconds."""" and similar to """"Export of data from hdfs to a relational database based on a single process running a spring batch job support the etl of data from hdfs to a rdbms"""" and similar to """"Add authentication information to twittersearch source doc since the changes for xd-202 twittersearch requires authentication. need to update the docs to reflect this."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a cf user i'd like to have the ability to override the hdfs location so that i can change where the custom module _uber-jar_ can be stored and retrieved."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Ui: the user should provide username/password to gain access to the ui secure admin ui to challenge users to enter username and password to gain access."""" is a not user story because it is most similar to: """"The shell introduced a fundamental new way to interact with the system all use of curl in examples needs to change to use the shell."""" and similar to """"Rename reactor-tcp module to reactor-ip since it also supports udp the --transport option allows 'udp' as well as 'tcp/"""" and similar to """"Create abstractstreamintegrationtest that will destory streams that were created during test method execution keep track of named streams that were create and use @after to destroy them."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-d developer i'd like to setup {{gh_pages}} branch for s-c-d and s-c-s-m repos so i can start pushing documentation with pr commits."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Review abstract base classes used in test cases to ensure proper resource cleanup."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Documentation for """"syslog | file"""" processing put on the guide as a section in an 'input-stream' wiki page."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Provided modules should be integration tested i don't see that we have automated tests for the modules we provide out-of-the-box. we could make the modules folder an eclipse project (which would also help solve xd-198) and add some integration tests similar to those documented here: https://github.com/springsource/spring-xd/wiki/creating-custom-modules"""" is a not user story because it is most similar to: """"Remove %l from log4j patternlayout the xd-dirt log4j.properties includes the calling line number {{%l}} which is not recommended for production. https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/patternlayout.html {{warning generating caller location information is extremely slow and should be avoided unless execution speed is not an issue.}}"""" and similar to """"Documentation for jms source http://static.springsource.org/spring-xd/docs/1.0.0.build-snapshot/reference/html/#sources should have 'jms' added to the list and also the corresponding section that shows some basic usage."""" and similar to """"Unable to define port on rabbitmq streams the documentation for rabbitmq says to use the --address option to specify a port. we've tried --address=1.2.3.4:5678 (and also --port=5678 just in case) but have been unable to get a successful deployment. running the same stream definition on a default port (i.e. without specifying a port) does work."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create ec2 ami for single-node install of cloudera cdh 4.5.0"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-d developer i'd like to move {{kafka}} module from xd to s-c-s repo so i can use it as {{source}} to build streaming pipeline."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Sqooprunner class not found errror we have installed the springxd 1.2 m1 release via the rpm and it seems that the sqoop-1.4.5-hadoop200.jar file are not part of the rpm. the sqoop jar file are not in the xd/lib directory. this is causing a problem during customer module development if we include the sqoop-1.4.5-hadoop200 dependency as part of the pom file and forces us to redeploy the our jar as separate deployment. should we be referencing different dependencies or have or should the sqoop-1.4.5-hadoop200.jar be part of the rpm definition so it part of the xd/lib? i have currently the following dependency in the pom file: {code} <!-- sqoop --> <dependency> <groupid>org.apache.sqoop</groupid> <artifactid>sqoop</artifactid> <version>1.4.5</version> <classifier>hadoop200</classifier> </dependency> {code} it would be great be great if the sqoop jar are part of rpm so we don't have to do any additional jar deployment. thanks"""" and """"Hdfs storemessagehandlers are not very resilient there are cases where hdfs-outbound-channel-adapter (from spring-xd-hadoop module) will keep a broken datawriter's stream open. for example if the underlying hdfs stream throws a remoteexception (ie. some hadoop error occurred) there's no mitigation. subsequent writes will always fail. the messagehandler could potentially try to close and re-open the stream or trigger a rollover strategy to occur (creating a new stream)."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Job creation fails saying it exists (there isn't any job with that jobname) running spring-xd in singlenode using pivotal hd 2.1 as the hadoop distribution. xd-singlenode --hadoopdistro phd21 i was testing jdbchdfs job definitions. i am seeing this error that the job exists when in reality there is no job with that jobname. xd:>job create testemployeejobagain1 --definition """"jdbchdfs --sql='select employee_id employee_name employer from employee' --url=jdbc:oracle:thin:@//localhost:1521/orcl --driverclassname=oracle.jdbc.oracledriver --username=springxd --password=xdpwd --testonborrow=false --directory=/usr/swatest1"""" command failed org.springframework.xd.rest.client.impl.springxdexception: batch job with the name testemployeejobagain1 already exists xd:>job list job name job definition status -------- -------------- ------"""" and """"Spike for transformation of the parsed stream/job definition to a physical deployment model taking into account a deployment manifest the initial parsing of a stream/job definitions into a list of moduledeploymentrequests needs to be transformed into a physical deployment model that takes into account 1) module co-location 2) partitioning 3) number of instances 4) node assignment an potentially other data related to the runtime properties of a module (e.g. concurrency settings) the an external deploymentmanifest will be used to capture this information. a deployment of a stream or job will then need to optionally provide a reference to deployment manifest."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update streams chapter to use shell commands instead of curl the current streams chapter http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#streams shows creation and deleting streams using curl - switch to use shell. also add listing of a stream. there is also an example of creating a stream this should be replaced as well."""" is a not user story because it is most similar to: """"Create documentation section for the shell create a new section in the docs regaring shell usage in particular how to represent single and double quotes. include some discussion of basic commands to manipulate streams jobs and list modules. how to pass in a file that can be executed when the shell starts up. also point to spring-shell ref docs for extensibility in terms of adding custom commands."""" and similar to """"Support completion proposals of processors after a named channel due to the way the heuristics for module type guessing work we can't currently support completions of the like: """"queue:foo > s<tab>"""" that would yield valid processor names we need to add non-determinism (list of types instead of single type) to the type guessing heuristic"""" and similar to """"Add documentation for a 'stdin' source module in order to support ingestion from stdin the suggested approach is to do the following. xd:>stream create --definition """"tcp --decoder=lf | log"""" --name foo $ cat my.log | netcat localhost 1234 so while this is really a tcp based ingestion case once can use pipe or redirect of stdin/err in order to achieve the same goal. it should appear as a source module in the docs on par with other source modules in its own section."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Composed modules not working on yarn from https://github.com/spring-projects/spring-xd/issues/1704 i am trying to use composed modules when running on yarn. in zk each child module definition of the composed module gets serialized as follows: ``` {""""@class"""":""""org.springframework.xd.module.simplemoduledefinition""""""""name"""":""""transform""""""""type"""":""""processor""""""""location"""":""""file:/tmp/hadoop-hduser/nm-local-dir/usercache/hduser/appcache/application_1433789137218_0001/filecache/17/spring-xd-yarn-1.1.2.release.zip/modules/processor/transform/""""} ``` when i try to use the composed module on yarn it may be deployed to a different container where the """"location"""" file path is not valid. in this case i get the following exception: ``` java.lang.illegalargumentexception: file must exist org.springframework.boot.loader.data.randomaccessdatafile.<init>(randomaccessdatafile.java:67) org.springframework.boot.loader.data.randomaccessdatafile.<init>(randomaccessdatafile.java:51) org.springframework.boot.loader.jar.jarfile.<init>(jarfile.java:95) org.springframework.boot.loader.archive.jarfilearchive.<init>(jarfilearchive.java:61) org.springframework.boot.loader.archive.jarfilearchive.<init>(jarfilearchive.java:57) org.springframework.xd.module.support.moduleutils.createmoduleclassloader(moduleutils.java:54) org.springframework.xd.module.support.moduleutils.createmoduleclassloader(moduleutils.java:47) org.springframework.xd.module.options.defaultmoduleoptionsmetadataresolver.resolvenormalmetadata(defaultmoduleoptionsmetadataresolver.java:186) org.springframework.xd.module.options.defaultmoduleoptionsmetadataresolver.resolve(defaultmoduleoptionsmetadataresolver.java:164) org.springframework.xd.module.options.delegatingmoduleoptionsmetadataresolver.resolve(delegatingmoduleoptionsmetadataresolver.java:44) org.springframework.xd.module.options.environmentawaremoduleoptionsmetadataresolver.resolve(environmentawaremoduleoptionsmetadataresolver.java:127) org.springframework.xd.module.options.defaultmoduleoptionsmetadataresolver.resolvecomposedmodulemetadata(defaultmoduleoptionsmetadataresolver.java:175) org.springframework.xd.module.options.defaultmoduleoptionsmetadataresolver.resolve(defaultmoduleoptionsmetadataresolver.java:167) org.springframework.xd.module.options.delegatingmoduleoptionsmetadataresolver.resolve(delegatingmoduleoptionsmetadataresolver.java:44) org.springframework.xd.module.options.environmentawaremoduleoptionsmetadataresolver.resolve(environmentawaremoduleoptionsmetadataresolver.java:127) org.springframework.xd.dirt.stream.xdstreamparser.parse(xdstreamparser.java:174) ``` i think the issue may be related to the following line in archivemoduleregistry: ``` string filename = resource.getfile().getcanonicalfile().getname() ```"""" and """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to move {{syslog}} module from xd to s-c-s repo so i can use it as source to build streaming pipeline."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to move {{cassandra}} module from xd to s-c-s repo so i can use it as {{sink}} to build streaming pipeline. and similar to """"As a spring-bus lead i'd like to review the current spring-bus architecture and the design specs so i can address any foundation level gaps."""" and similar to """"As a developer i'd like to have a maintenance branch so that i can commit minor release _(ex: 1.0.2)_ code changes instead of committing to master."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Fix incorrect ip address associated with containers the xd container ip address displayed on both 'singlenode' and distributed modes are incorrect both on _shell_ as well as _admin-ui_. *example:* noticed ip address as 10.10.10.* following function in [runtimeutils|http://docs.spring.io/autorepo/docs/spring-xd/1.0.1.release/api/org/springframework/xd/dirt/util/runtimeutils.html] could be flawed: {code} public static string getipaddress() { try { for(enumeration<networkinterface> enumnic = networkinterface.getnetworkinterfaces() enumnic.hasmoreelements()) { networkinterface ifc = enumnic.nextelement() if (ifc.isup()) { for (enumeration<inetaddress> enumaddr = ifc.getinetaddresses() enumaddr.hasmoreelements() ) { inetaddress address = enumaddr.nextelement() if (address instanceof inet4address && !address.isloopbackaddress()) { return address.gethostaddress() } } } } } catch (ioexception e) { // ignore } return """"unknown"""" } {code}"""" and """"Clarify api or syntax for managing deployment parameters suppose we have 3 environements of spring xd : - dev environment - test environment - prod environement ( suppose whe develop the script bellow: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// stream1 = http | filter --expression=payload.contains('toto') | file --dir=/tmp/toto stream2 = http | filter --expression=payload.contains('titi') | file --dir=/tmp/titi ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// when we need to deploy the script in test and prod environements we must modify """"dir"""" option of """"file"""" sink. this is very easy when there is not a lot of options and when we have a small factory team. but in a big factory environment this will be problematic. in order to industrialize deployment it would be convenient to implement in dsl a directory interface api or something equivalent like below: suppose we call this directory interface xddi ... like """"xd directory interface"""" :-) the script can be like that: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// stream1 = http | filter --expression=payload.contains('toto') | file --dir=xddi('totokey') stream2 = http | filter --expression=payload.contains('titi') | file --dir=xddi('titikey') ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// the xddi keys are defined in a centralized directory interface (admin console or xddi.properties) the xddi keys/values in dev environment: ///////////////////////////////////// totokey=/tmp/toto titikey=/tmp/titi ///////////////////////////////////// the xddi keys/values in test environment: ////////////////////////////////////////// totokey=/tartempion/toto titikey=/petaouchnok/titi ///////////////////////////////////////// the xddi keys/values in prod environment: ///////////////////////////////////////////////////// totokey=/vavoirlabasijysuis/toto titikey=/vavoirlabasijysuis/titi ///////////////////////////////////////////////////// when the script is deployed in test or prod environement if the script contain a key that is not defined in centralized directory the deployment fail. this will reduce errors risks in a big factory environnement (several hundred parameters and signifiant team turnover)."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Clean up publishing to maven repositories of empty module projects see the various module.xyz directories here https://repo.spring.io/libs-snapshot/org/springframework/xd/"""" is a not user story because it is most similar to: """"Saving a metric (counter gauge..) with an existing name should throw an exception the difference between saving a new metric and updating an existing one needs to be defined. suggest that if we try to save when an existing counter is already in the database to throw exception such as dataintegrityviolationexception."""" and similar to """"Simple ootb job for testing similar to {{time | log}} we should ship a simple batch job that appends a timestamp to a file. this will make it much easier to validate job functionality especially in automated tests."""" and similar to """"Module option validation not happening anymore it seems that no option validation (being spring or jsr 303) is happening anymore at stream creation time. eg {noformat} stream create foo --definition """"http --port=bar | log"""" {noformat}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to run the sqoop jobs against secured hdfs cluster so i can restrict access to only authorized users."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Spike for writing to hdfs see epic https://jira.springsource.org/browse/xd-234"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add json conversion to tuple support tostring() to emit json by default. should be backed by a simple strategy to allow the possibility of other representations. also provide totuple(string json). this supports seamless mapping json<->tuple in xd"""" is a not user story because it is most similar to: """"Add spring-xd-hadoop distro specific sub-projects we need to modify build adding two sub-projects for spring-xd-hadoop: one for hadoop 1.1.2 and one for phd1 (pivotal hd) to pull in transitive dependencies for correct hadoop distro"""" and similar to """"Rename """"node"""" references to """"container"""" this applies to a few places (when addressing the issue a search should be done to uncover any others) e.g.: containerserverapplication: public static final string node_profile = """"node"""" *options classes: """"the transport to use for data messages (from node to node)"""" """"the transport to use for control messages (between admin and nodes)"""""""" and similar to """"Add server runtime info to banner standalone admin currently has no shiny banner as container has. more importantly it does not say which port it's listening on the transport used etc."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to stream ingest audio and video data so that i can apply predictive analytics algorithms for facial detection. *spike scope:* * research the feasibility of implementing [motion-jpeg|http://en.wikipedia.org/wiki/motion_jpeg] * design specs on motion-jpeg format *note:* [opencv|http://docs.opencv.org/trunk/doc/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html] although having ootb support it is not platform compatible."""" is a not user story because it is most similar to: """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"When there are no wiretap listeners don't publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be """"serialized + transported + deserialized"""" to other members even if there is no one listening. this """"serialized + transported + deserialized"""" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Copy spring-xd-codec to scs as spring-cloud-streams-codec create the equivalent library in spring-cloud-streams"""" is a not user story because it is most similar to: """"Create one xd-yarn shell script that encompases the functionality of seperate shell scripts"""" and similar to """"Update https://github.com/spring-guides/gs-spring-xd/ for new release"""" and similar to """"Change springsource references in pom.xml to spring/spring.io this is currently in the m6 pom: <organization> <name>springsource</name> <url>http://springsource.org</url> </organization>"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Modules utilizing jdbc data source need to offer connection pool configurations externally. currently jdbcsink hdfsjdbc& filejdbc offer only driverclassname url user name & password. they need to offer a full range of configurations offered by the tomcat jdbc connection pool."""" is a not user story because it is most similar to: """"Investigate jmx object naming of deployed modules and inbound/outbound channel adapters. the object naming is still not ideal for xd since si conventions add some noise. likely need to design and implement a custom naming strategy"""" and similar to """"Create rest api for getting information on the progress of a given step execution there is a npe in the current spring batch admin functionality. should be springmvc test framework style tests. get /batch/jobs/executions/{jobexecutionid}/steps/{stepexecutionid}/progress"""" and similar to """"Create rest api for getting information on a job execution for a given execution id adopted functionality from spring batch admin should include springmvc test framework style tests get /batch/jobs/executions/{executionid} - get information on all executions of a given job name."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove 'substream' from the documentation this will come back in m3 once we iron out the issues."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Remove hadoop from admin classpath not sure why the hadoop classes are on the admin servers classpath. there is no way to select the distro and the hadoop classes shouldn't be needed except for module info for hdfs sink (see xd-1701)"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-s user i'd like to investigate the possibility of s-c-s modules self-registering themselves to service discovery so i could use spring xd runtime (running on cf) to discover and orchestrate such modules through streams. and similar to """"As a user i want to configure docker xd containers using service discovery so that i can have tools to manage how processes and services in a cluster can find and talk to one another."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Provide a way to debug the http source the http source does not provide debug logging to see information such as http headers and requests in particular if a non ok response is returned. i updated the log4j config for org.jboss.netty but it had no effect. i suspect this is due to the need to configure the netty logging system via internalloggerfactory.setdefaultfactory(new log4jloggerfactory())."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the module/app specific metrics consumed directly from boot actuator [export()|https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/metricrepositoryautoconfiguration.java] api so i can have insight on how it is performing being used and that it works etc. and similar to """"As a developer i'd like to create an annotation ({{@enablemodule}}) driven programming model for modules so instead of explicitly defining i/o channels as beans on the module for classes annotated with {{@enablemodule}} the application would be responsible for creating the actual channel beans and channel adapters vs. the developer creating concrete channel instance types. the {{@input}} and {{@output}} annotations will be used to indicate the input and output channels of the module."""" and similar to """"As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Run javascript tests (jasmine) as part of the build process we probably need to look into some options to run our javascript tests (jasmine) as part of the build process - some possibilities: * jasmine gradle plugin https://github.com/dzhaughnroth/jasmine-gradle-plugin * saga - http://timurstrekalov.github.io/saga/ looks like maven has slightly better support: http://searls.github.io/jasmine-maven-plugin/index.html see also: xd-865"""" is a not user story because it is most similar to: """"Prevent accidental pickup of env var as module option typical case is with a module that contains {noformat} ... user=""""${username}"""" ... /> {noformat} (say as part of a jdbc connection configuration) and no value has been given at deployment time. the module may pickup a value from the environment by mistake (typically from an environment variable of the same name). this was even more problematic when ordering of property sources was unclear but should be prevented entirely anyway."""" and similar to """"Routing json arrays when i create following stream i am able to route json messages. but if i send same message as an array its not working. is it possible to do something about it? stream create --name reference-data-import --definition """"rabbit --outputtype=text/plain | router --expression=#jsonpath(payload'$.rejected').contains('true')?'queue:rejected':'queue:accepted'"""" --deploy"""" and similar to """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have an optional _trace_ as inline deployment properties for _stream_ so that i can declare which _module_ in the stream needs to be traced for logging or notifications. this gives the flexibility to track the stage progress between individual modules. *example:* {code:xml} xd:> stream create foo """"http | log"""" xd:> stream deploy foo --properties """"module.http.tracemodule.log.trace"""" (or) xd:> stream deploy foo --properties """"module.*.trace"""" {code} wildcard wiretap config: http://docs.spring.io/spring-integration/reference/html/messaging-channels-section.html#channel-global-wiretap"""" is a not user story because it is most similar to: """"Riemann - measure based alerts we would like to experiment with “riemann” a clojure library to aggregate events from servers and applications through stream processing. features: * tracking latency distribution * email for exceptions * memory and cpu statistics this will help understand the behavior of critical components to eventually orchestrate workflows to proactively monitor and notify important contacts/groups as needed. webiste -> http://riemann.io/ github -> https://github.com/aphyr/riemann"""" and similar to """"Unnecessary format enforcement on module short description what is the functional justification for enforcing this validation on modules? is it really necessary to enforce that the short description must start with a capitol letter and end with a period? seems a bit unnecessary and opinionated to me. caused by: org.springframework.validation.bindexception: org.springframework.validation.beanpropertybindingresult: 1 errors field error in object 'info' on field 'shortdescription': rejected value [...snip...] codes [pattern.info.shortdescriptionpattern.shortdescriptionpattern.java.lang.stringpattern] arguments [org.springframework.context.support.defaultmessagesourceresolvable: codes [info.shortdescriptionshortdescription] arguments [] default message [shortdescription][ljavax.validation.constraints.pattern$flag@3984374e^\p{isuppercase}.*\.$] default message [short description must start with a capital letter and end with a dot]"""" and similar to """"[flo] ui unresponsive after some time the chrome ui interface for flo stream creation stops responding after some time. it starts working once the browser history/ cookies etc. are cleaned up. . the drop down stops working . i'm unable to look at or edit module properties . connecting different modules doesn't work either . drag and drop operations still work . command line stream creation still works is anyone else facing these issues ? thanks !"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Hdfsjdbc acceptance test"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Exception during moduleredeployer causes additional modules to not deploy if an exception occurs during the deployment of a module within the moduleredeployer.redeploymodule the exception will cause the process to break out of the for loops in departingcontainermoduleredeployer and containermatchingmoduleredeployer leaving other failed/undeployed modules still undeployed. this is particularly bad for containermatchingmoduleredeployer as a module with an issue deploying will be retried next time a container starts breaking all modules after it."""" is a not user story because it is most similar to: """"Leverage gradle plugin for provided/optional deps see https://github.com/spring-projects/gradle-plugins/blob/master/propdeps-plugin/readme.md this would allow us to reduce the distribution size further maybe"""" and similar to """"Create rpm for distribution package springxd into an rpm install path = /opt/pivotal/spring-xd-1.0.0.m5 with symlink /opt/pivotal/spring-xd -> current version init.d scripts to start/stop/status service springxd-admin start|stop|status service springxd-container start|stop|status user/group = springxd/pivotal host springxd rpm in pivotal repo yum install springxd support rhel/centos version 5 and 6? (tested on latest updates) support for 32 and 64 bits support java 1.6 and 1.7"""" and similar to """"Create a receptor partitionhandler and related stepexecutionrequesthandler h2. narrative as a developer i need to be able to create a partitioned batch job that uses diego tasks for partition slaves. h2. back story a new partition handler should be created that uses the receptor api to launch tasks for each of the slaves (configurable via grid size)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Array class names cannot be parsed to mimetype messagebussupport creates an 'original content type' message header to support serialization for remote transports. the form of the header application/x-java-objecttype=<classname>. for java array types the """"["""" prefix causes an error when converting this value to a mimetype. this can be avoided by quoting the classname. however a further complication is if the array element is an object. in this case the classname is '[l<classname>'. the trailing colon causes a parse exception even in a quoted string. a simple fix is to check for the trailing colon remove it and add it back if mimetype.getparameter(""""type"""").contains(""""[l""""). see http://docs.oracle.com/javase/7/docs/api/java/lang/class.html#getname for more info. preliminary testing indicates primitive array and multi-dimensional arrays will work fine with quoting but tests should be added for these cases."""" and """"Assess if gemfirejsonserver & gemfireserver sinks should close the client cache * os - mac * xd deployment type - singlenode * sha - bb4dd58 * required software - xd gemfire sample server [description] after creating and destroying 3 streams with gemfirejsonserver sink the 4th will fail with this error: * 44707 refused connection: the number of clients 4 exceeded the limit of 3 allowed by the default evaluation license. [steps to reproduce] * from your shell execute the following 4 times: ** stream create --name stocks --definition """"http --port=9090 | gemfire-json-server --regionname=stocks --host=ec2-54-221-32-82.compute-1.amazonaws.com --port=40404 --keyexpression=payload.getfield('symbol')"""" --deploy ** stream destroy stocks"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add spring/integration mbean exporters to module applicationcontexts global option? override for individual modules? module types?"""" is a user story, and is worth 3 story points because it is most similar to: As a s-c-s developer i'd like to fix the {{kafka}} binder so i can create messaging microservices apps and successfully bind them to an operational kafka broker. and similar to """"As a user i'd like to have a shell command so that i can point to the custom-built _module_ archive and push it to the runtime for immediate usage."""" and similar to """"As a user i'd like to have spring 'core' upgraded to 4.1.1 (_milestone_ ) so that i can benefit from performance improvements associated with 'compiled' spel and other enhancements."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Springxd logs error and large stack trace when metric can't be found. distracting. when a rest client of springxd (i.e. a dashboard) attempts to query (get) a metric (e.g. counter gauge etc.) that does not exist the admin sever logs an error and a large stack trace (attached). in usage of spring xd we see this frequently because a dashboard is running but the streams and counters have not been created quite yet or initialized by messages flowing through the streams. with a polling dashboard this results in a lot of distracting and large stack traces in the logs that are not actually issues. i would suggest logging a one line warning or info message instead of the error and stack trace."""" is a not user story because it is most similar to: """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" and similar to """"When there are no wiretap listeners don't publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be """"serialized + transported + deserialized"""" to other members even if there is no one listening. this """"serialized + transported + deserialized"""" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted."""" and similar to """"Controllers - disallow negative pagesize values currently you can specify negative pagesize values - the controllers should validatate that. right now an internal exception is being return leaking internal details to the caller - e.g.: **http://localhost:9393/batch/executions?pagesize=-1** results in: {code} <errors> <error logref=""""badsqlgrammarexception""""> <message> statementcallback bad sql grammar [select top -1 e.job_execution_id e.start_time e.end_time e.status e.exit_code e.exit_message e.create_time e.last_updated e.version i.job_instance_id i.job_name from batch_job_execution e batch_job_instance i where e.job_instance_id=i.job_instance_id order by e.job_execution_id desc] nested exception is java.sql.sqlsyntaxerrorexception: user lacks privilege or object not found: top </message> </error> </errors> {code}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Batch-hive module from spring-xd-samples project is not working ***version spring xd version : spring-xd-1.3.0.release spring-xd-1.3.0.release-yarn os & version: linux 2.6.32-431.29.2.el6.x86_64 java version: java version """"1.7.0_65"""" ***description the batch-hive job in the spring-xd-samples project (link: https://github.com/spring-projects/spring-xd-samples/tree/master/batch-hive ) is failing with inline error message. ***steps to recreate the problem 1. created a jar for batch-hive job. 2. once the final jar was ready uploaded using """"module upload --name test_hive_module --type job --file /home/user/jar/batch_hive.jar"""" 3. after that created and deployed job using """"job create --name test_hive_job --definition test_hive_module --deploy"""" 4. finally launched using """"job launch test_hive_job"""" which failed with inline error. ***describe xd deployment : distributed deployment type : distributed - yarn ( on aws ec2 cloud ) number of xd-admin’s and xd-container’s : 1 admin and 3 containers ***describe other components transport: redis 3.0.1 zookeeper: version 3.4.6.2.3.2.0-2950 hadoop deployment data platform : hortonworks hdp 2.3.2.0-2950 rdbms: mysql ***error message: ***************************************************** info deploymentsupervisor-0 zk.zkjobdeploymenthandler - deployment status for job 'test_hive_job': deploymentstatus{state=failederror(s)=org.springframework.beans.factory.beancreationexception: error creating bean with name 'hive': cannot resolve reference to bean 'hive-tasklet' while setting bean property 'tasklet' nested exception is org.springframework.beans.factory.beancreationexception: error creating bean with name 'hive-tasklet': initialization of bean failed nested exception is java.lang.noclassdeffounderror: org/apache/hadoop/hive/service/hiveclient at org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvereference(beandefinitionvalueresolver.java:359) at org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:108) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.applypropertyvalues(abstractautowirecapablebeanfactory.java:1481) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.populatebean(abstractautowirecapablebeanfactory.java:1226) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:543) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:482) at org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:305) at org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) at org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:301) at org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:196) at org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:753) at org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:835) at org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:537) at org.springframework.boot.springapplication.refresh(springapplication.java:686) at org.springframework.boot.springapplication.run(springapplication.java:320) at org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:139) at org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:213) at org.springframework.xd.dirt.module.moduledeployer.dodeploy(moduledeployer.java:217) at org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:200) at org.springframework.xd.dirt.server.container.deploymentlistener.deploymodule(deploymentlistener.java:365) at org.springframework.xd.dirt.server.container.deploymentlistener.deployjobmodule(deploymentlistener.java:291) at org.springframework.xd.dirt.server.container.deploymentlistener.onchildadded(deploymentlistener.java:181) at org.springframework.xd.dirt.server.container.deploymentlistener.childevent(deploymentlistener.java:149) at org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:509) at org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:503) at org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92) at com.google.common.util.concurrent.moreexecutors$samethreadexecutorservice.execute(moreexecutors.java:297) at org.apache.curator.framework.listen.listenercontainer.foreach(listenercontainer.java:83) at org.apache.curator.framework.recipes.cache.pathchildrencache.calllisteners(pathchildrencache.java:500) at org.apache.curator.framework.recipes.cache.eventoperation.invoke(eventoperation.java:35) at org.apache.curator.framework.recipes.cache.pathchildrencache$10.run(pathchildrencache.java:762) at java.util.concurrent.executors$runnableadapter.call(executors.java:511) at java.util.concurrent.futuretask.run(futuretask.java:266) at java.util.concurrent.executors$runnableadapter.call(executors.java:511) at java.util.concurrent.futuretask.run(futuretask.java:266) at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) at java.lang.thread.run(thread.java:745) caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name 'hive-tasklet': initialization of bean failed nested exception is java.lang.noclassdeffounderror: org/apache/hadoop/hive/service/hiveclient at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:553) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:482) at org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:305) at org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) at org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:301) at org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:196) at org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvereference(beandefinitionvalueresolver.java:351) ... 37 more caused by: java.lang.noclassdeffounderror: org/apache/hadoop/hive/service/hiveclient at java.lang.class.getdeclaredmethods0(native method) at java.lang.class.privategetdeclaredmethods(class.java:2701) at java.lang.class.getdeclaredmethods(class.java:1975) at org.springframework.util.reflectionutils.getdeclaredmethods(reflectionutils.java:606) at org.springframework.util.reflectionutils.dowithmethods(reflectionutils.java:518) at org.springframework.util.reflectionutils.dowithmethods(reflectionutils.java:504) at org.springframework.beans.factory.annotation.autowiredannotationbeanpostprocessor.determinecandidateconstructors(autowiredannotationbeanpostprocessor.java:241) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.determineconstructorsfrombeanpostprocessors(abstractautowirecapablebeanfactory.java:1069) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1042) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:510) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:482) at org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:305) at org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) at org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:301) at org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:196) at org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvereference(beandefinitionvalueresolver.java:351) at org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:108) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.applypropertyvalues(abstractautowirecapablebeanfactory.java:1481) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.populatebean(abstractautowirecapablebeanfactory.java:1226) at org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:543) ... 43 more caused by: java.lang.classnotfoundexception: org.apache.hadoop.hive.service.hiveclient at java.net.urlclassloader.findclass(urlclassloader.java:381) at java.lang.classloader.loadclass(classloader.java:424) at sun.misc.launcher$appclassloader.loadclass(launcher.java:331) at java.lang.classloader.loadclass(classloader.java:357) ... 63 more } *****************************************************"""" and """"Basic security makes xd-shell throw 403 forbidden error after enabling admin endpoint security in servers.yml using basic authentication and single user {code} spring: profiles: admin security: basic: enabled: true # false to disable security settings (default) realm: springxd user: # valid only if security.basic.enabled=true name: myadmin password: myadmin {code} spring xd ui is secured however xd-shell commands are resulting in a 403 error: {code} server-unknown:>admin config server --uri http://localhost:9393 --username myadmin --password myadmin successfully targeted http://localhost:9393 xd:>admin config info ------------- ------------------------------------------- credentials [username='myadmin password=****'] result successfully targeted http://localhost:9393 target http://localhost:9393 timezone used greenwich mean time (utc 0:00) ------------- ------------------------------------------- xd:>stream list command failed org.springframework.web.client.httpclienterrorexception: 403 forbidden xd:>stream create --name """"t1"""" --definition """"time | log"""" command failed org.springframework.web.client.httpclienterrorexception: 403 forbidden {code} this can be fixed by adding configuration explained in """"file based authentication"""" docs section: {code} xd: security: authentication: file: enabled: true users: myadmin: myadmin role_view role_admin role_create {code} following is the problem: # configuration explained in """"single user authentication"""" chapter should work out of the box without additional role setup # docs should be more clear on authorization"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to create separate repo for k8s spi so i don't have to bundle all spi variants under one admin project."""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to create separate repo for cf spi so i don't have to bundle all spi variants under one admin project. and similar to """"As a developer i'd like to create separate repo for lattice spi so i don't have to bundle all spi variants under one admin project."""" and similar to """"As a developer i'd like to create separate repo for mesos spi so i don't have to bundle all spi variants under one admin project."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Rabbit sink with explicit routingkey as 'string' spel literal expression fails following stream fails to work: tream create s3 --definition """"http | rabbit --routingkey='mytest1'"""" --deploy created and deployed new stream 's3' xd:>http post --data """"testing"""" > post (text/plaincharset=utf-8) http://localhost:9000 testing > 500 internal_server_error > 500 internal_server_error error sending data 'testing' to 'http://localhost:9000' the exception at the container log is: 07:24:57245 error pool-18-thread-4 http.nettyhttpinboundchanneladapter:171 - error sending message org.springframework.messaging.messagehandlingexception: expression evaluation failed: mytest1 org.springframework.integration.util.abstractexpressionevaluator.evaluateexpression(abstractexpressionevaluator.java:126) org.springframework.integration.handler.expressionevaluatingmessageprocessor.processmessage(expressionevaluatingmessageprocessor.java:76) org.springframework.integration.amqp.outbound.amqpoutboundendpoint.handlerequestmessage(amqpoutboundendpoint.java:196) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:170) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.simplemessagehandlermetrics.handlemessage(simplemessagehandlermetrics.java:106) org.springframework.integration.monitor.simplemessagehandlermetrics.invoke(simplemessagehandlermetrics.java:86) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy109.handlemessage(unknown source) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) sun.reflect.generatedmethodaccessor100.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.directchannelmetrics.monitorsend(directchannelmetrics.java:113) org.springframework.integration.monitor.directchannelmetrics.doinvoke(directchannelmetrics.java:97) org.springframework.integration.monitor.directchannelmetrics.invoke(directchannelmetrics.java:91) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy54.send(unknown source) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:93) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:260) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:241) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:205) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:199) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:177) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:93) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:260) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:241) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:205) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:199) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:177) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:116) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) sun.reflect.generatedmethodaccessor100.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.aop.support.aoputils.invokejoinpointusingreflection(aoputils.java:317) org.springframework.aop.framework.reflectivemethodinvocation.invokejoinpoint(reflectivemethodinvocation.java:190) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:157) org.springframework.integration.monitor.directchannelmetrics.monitorsend(directchannelmetrics.java:113) org.springframework.integration.monitor.directchannelmetrics.doinvoke(directchannelmetrics.java:97) org.springframework.integration.monitor.directchannelmetrics.invoke(directchannelmetrics.java:91) org.springframework.aop.framework.reflectivemethodinvocation.proceed(reflectivemethodinvocation.java:179) org.springframework.aop.framework.jdkdynamicaopproxy.invoke(jdkdynamicaopproxy.java:207) com.sun.proxy.$proxy111.send(unknown source) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:93) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:98) org.springframework.integration.x.http.nettyhttpinboundchanneladapter.access$300(nettyhttpinboundchanneladapter.java:69) org.springframework.integration.x.http.nettyhttpinboundchanneladapter$handler.messagereceived(nettyhttpinboundchanneladapter.java:168) org.jboss.netty.channel.simplechannelupstreamhandler.handleupstream(simplechannelupstreamhandler.java:70) org.jboss.netty.channel.defaultchannelpipeline.sendupstream(defaultchannelpipeline.java:564) org.jboss.netty.channel.defaultchannelpipeline$defaultchannelhandlercontext.sendupstream(defaultchannelpipeline.java:791) org.jboss.netty.handler.execution.channelupstreameventrunnable.dorun(channelupstreameventrunnable.java:43) org.jboss.netty.handler.execution.channeleventrunnable.run(channeleventrunnable.java:67) org.jboss.netty.handler.execution.orderedmemoryawarethreadpoolexecutor$childexecutor.run(orderedmemoryawarethreadpoolexecutor.java:314) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) caused by: org.springframework.expression.spel.spelevaluationexception: el1008e:(pos 0): property or field 'mytest1' cannot be found on object of type 'org.springframework.messaging.support.genericmessage' - maybe not public? org.springframework.expression.spel.ast.propertyorfieldreference.readproperty(propertyorfieldreference.java:215) org.springframework.expression.spel.ast.propertyorfieldreference.getvalueinternal(propertyorfieldreference.java:85) org.springframework.expression.spel.ast.propertyorfieldreference.getvalueinternal(propertyorfieldreference.java:78) org.springframework.expression.spel.ast.spelnodeimpl.gettypedvalue(spelnodeimpl.java:114) org.springframework.expression.spel.standard.spelexpression.getvalue(spelexpression.java:111) org.springframework.integration.util.abstractexpressionevaluator.evaluateexpression(abstractexpressionevaluator.java:159) org.springframework.integration.util.abstractexpressionevaluator.evaluateexpression(abstractexpressionevaluator.java:119) ... 91 more"""" and """"Temp files for stream create not being cleaned during testing for spring xd for pivotalcf we create deploy use undeploy and destroy many streams. each stream generates {{tmp}} directories (i think 2 one for source one for sink) in the xd-admin vm's {{/tmp}} directory e.g. {noformat} dummy-module4635787551932601017sinkredis dummy-module252960009195893204sourcehttp {noformat} these {{tmp}} directories are not being cleared up so our system has hit the inode limit of 32768 files for a volume: {noformat} filesystem inodes iused ifree iuse% mounted on /dev/loop0 32768 32768 0 100% /tmp {noformat} this causes a java {{ioexception}} the immediately relevant part of which appears to be: {noformat} [caught] exception while handling a request feb 18 09:06:06 10.85.30.142-2 xd-admin-partition-default_az_guid-0: [java.lang.runtimeexception] java.io.ioexception: no space left on device feb 18 09:06:06 10.85.30.142-2 xd-admin-partition-default_az_guid-0: [] at org.springframework.xd.module.moduledefinitions.dummy(moduledefinitions.java:81) {noformat} this causes the test system to fail entirely."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Test recent hadoop distro changes test basic functionality (hdfs sink jdbchdfs job) on hadoop26 hdp22 cdh5 phd21 test xd on yarn on hadoop26 hdp22 cdh5 and phd21"""" is a user story, and is worth 1 story points because it is most similar to: As a module developer i would like the jsonstringtotupleconverter in the spring cloud streams project to maintain the types provided in the json string and not convert everything to a string representation. and similar to """"As a user i'd like to have a landing page with higher-order links for sources processors sinks and jobs so i can jump to right section from one place."""" and similar to """"As a temporary work around to fix xd-1935 make producible media type to 'application/json' for job executions get request endpoints."""" (which are all user stories with a worth of 1 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-d developer i'd like to establish the foundation to expose rest-apis to interact with the {{xd-admin}} and likewise perform crud operations to maneuver streaming and batch pipelines."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to """"As a s-c-d developer i'd like to add support for having different binder types for module's channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Composed of composed fails at stream deployment time although composition of a module out of an already composed module seems to work at the 'module compose' level trying to deploy a stream with that more complex module fails with org.apache.coyote.abstractprotocol$abstractconnectionhandler.process(abstractprotocol.java:589) org.apache.tomcat.util.net.jioendpoint$socketprocessor.run(jioendpoint.java:312) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:724) caused by: java.lang.illegalargumentexception: each module before the last must provide 'output' org.springframework.util.assert.notnull(assert.java:112) org.springframework.xd.module.compositemodule.initialize(compositemodule.java:132) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:234) org.springframework.xd.dirt.module.moduledeployer.deploymodule(moduledeployer.java:224) org.springframework.xd.dirt.module.moduledeployer.handlecompositemoduledeployment(moduledeployer.java:180) org.springframework.xd.dirt.module.moduledeployer.handlemessageinternal(moduledeployer.java:129) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) ... 63 more"""" and """"Re-deployment of stream/job modules upon container departure doesn't choose appropriate container candidates upon container departure the containerlistener's onchildleft() event triggers redeployment of stream/job modules that were deployed into the leaving container. during the redeployment it happens that the container candidates from the defaultcontainermatcher *sometimes* (based on the subset from distributeforrequestedcount(list<container> candidates int count)) includes the container which already have the module of the *same* stream/job definition deployed. this causes the re-deployment silently swallowing the nodeexistsexception and the module being re-deployed doesn't actually get deployed."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Fix hdfsjdbc batch job hdfsjdbc throws an exception: {code} org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'itemreader' defined in url [file:/users/trisberg/projects/spring-xd/build/dist/spring-xd/xd/modules/job/hdfsjdbc/config/hdfsjdbc.xml]: could not resolve placeholder 'columns' in string value """"${columns}"""" {code} the hdfsjdbc job uses 'columns' instead of 'names' as the parameter for the column-names. should we make this usage consistent between jobs? there is a comment in the docs - """"there is also a limitation in that the database table must be created manually. this is due to a bug in spring hadoop and will be fixed in the future."""" think this is this solved in spring hadoop now? initializedatabase should default to false now to be consistent with jdbc sink rename batch-jdbc/mongo-import.properties to batch-jdbc/mongo.properties since these aren't just for import"""" and """"Create a packaging model for custom modules like just discussed after the spring one session it would be nice to have a packaging model for custom modules. instead of putting all libs in one directory and an xml in another it could be a fat jar including some metadata file pointing to either an xml or to a javaconfig configuration class inside the jar. some more words why i think it's important to have something like that: spring xd can be very well used in the enterprise and at least for job modules it's likely to have some dependencies. so what do you have to do now to deploy such a module? build a jar with your build process then get it from your repository unpack it and somehow find the relevant xml to copy it into the appropriate folder then inspect the pom to find out what all the dependencies are direct and transient and get them from your repository to copy them into the appropriate folder. and of course copy the jar. and when using spring xd in distributed mode you have to do it several times. with the approach mentioned above you just build your fat jar with your build process and distribute it to all your nodes nothing complicated. and if you implement it like that it's easy to have a javaconfig support that's almost the same."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Module count value at module deployments path in case of module count > 1 the module deployments path for each deployed module always has: {""""count"""":""""1""""} for a scenario: the stream test1: """"http | log"""" with the deployment manifest: module.log.count=3module.log.criteria=groups.contains('test') get /xd/deployments/streams/test1 module.log.count=3module.log.criteria=groups.contains('test') get /xd/deployments/modules/9ecaf59a-a1f5-4ed9-984d-f5dff8cc9b57/test1.sink.log-1 {""""count"""":""""1""""} get /xd/deployments/modules/1bbdb2dd-97ed-48a2-a3cd-3633c3e82f52/test1.sink.log-1 {""""count"""":""""1""""}"""" and """"Update data partitioning functionality to use murmur hash function https://github.com/addthis/stream-lib/blob/master/src/main/java/com/clearspring/analytics/hash/murmurhash.java"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd scripts need to have spring-integration milestone versions updated spring-integration version is changed to 3.0.0.m2 and since we manually create the xd scripts they still point to the 3.0.0.build-snapshot version. as discussed we also need to have a better strategy on updating the lib directory inside the xd scripts."""" is a not user story because it is most similar to: """"Inconsistent handling of inherited servers.yml properties some modules inherit {{application.yml}} / {{servers.yml}} via a properties file in {{/config/modules}} others have the values defined in the {{...optionsmetadata}} classes. switch all modules to use the latter technique for consistency."""" and similar to """"Provide an xd starter pom for module projects provide a maven pom to support module projects that will declare the spring xd dependencies as provided configure the boot plugin for 'module' layout and other boilerplate build configuration. this should include a similar feature for gradle."""" and similar to """"Rest endpoints xml response is broken when xml response is requested from the rest clients the server has xml serialization errors. for example: the endpoint /jobs/configurations from the web browser has: nested exception is javax.xml.bind.marshalexception - with linked exception: [com.sun.istack.saxexception2: unable to marshal type """"org.springframework.xd.rest.domain.detailedjobinforesource"""" as an element because it is not known to this context.]"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Can't compose script processor consider this simple stream which works out of the box because {{transform.groovy}} is shipped with spring xd: {code} stream create --name """"stream1"""" --definition """"time | script --script='transform.groovy' | log"""" --deploy {code} composing {{time}} and {{script}} modules like that {code} module compose --name """"cmp-time"""" --definition """"time | script --script='transform.groovy'"""" stream create --name """"stream2"""" --definition """"cmp-time | log"""" --deploy {code} will throw following exception in xd-shell: {code} apr 29 2015 11:28:57 am org.springframework.shell.core.abstractshell handleexecutionresult info: successfully created module 'cmp-time' with type source apr 29 2015 11:28:57 am org.springframework.shell.core.simpleexecutionstrategy invoke severe: command failed org.springframework.xd.rest.client.impl.springxdexception: error with option(s) for module cmp-time of type source: valid: 'script' cannot be null or empty {code} and following exception in xd-container: {code} 2015-04-29 11:28:57263 1.1.1.release error qtp616131272-35 rest.restcontrolleradvice - caught exception while handling a request org.springframework.xd.dirt.plugins.moduleconfigurationexception: error with option(s) for module cmp-time of type source: valid: 'script' cannot be null or empty org.springframework.xd.dirt.plugins.moduleconfigurationexception.frombindexception(moduleconfigurationexception.java:55) org.springframework.xd.dirt.stream.xdstreamparser.parse(xdstreamparser.java:180) org.springframework.xd.dirt.stream.abstractdeployer.save(abstractdeployer.java:95) org.springframework.xd.dirt.rest.xdcontroller.save(xdcontroller.java:235) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.web.method.support.invocablehandlermethod.doinvoke(invocablehandlermethod.java:221) org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:137) org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:110) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:777) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:706) org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:85) org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:943) org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:877) org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:966) org.springframework.web.servlet.frameworkservlet.dopost(frameworkservlet.java:868) javax.servlet.http.httpservlet.service(httpservlet.java:755) org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:842) javax.servlet.http.httpservlet.service(httpservlet.java:848) org.eclipse.jetty.servlet.servletholder.handle(servletholder.java:684) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1496) org.springframework.boot.actuate.autoconfigure.endpointwebmvcautoconfiguration$applicationcontextheaderfilter.dofilterinternal(endpointwebmvcautoconfiguration.java:291) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:107) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467) org.springframework.web.filter.hiddenhttpmethodfilter.dofilterinternal(hiddenhttpmethodfilter.java:77) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:107) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467) org.springframework.web.filter.httpputformcontentfilter.dofilterinternal(httpputformcontentfilter.java:87) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:107) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467) org.springframework.boot.actuate.trace.webrequesttracefilter.dofilterinternal(webrequesttracefilter.java:100) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:107) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467) org.springframework.security.web.filterchainproxy.dofilterinternal(filterchainproxy.java:186) org.springframework.security.web.filterchainproxy.dofilter(filterchainproxy.java:160) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467) org.springframework.boot.actuate.autoconfigure.metricfilterautoconfiguration$metricsfilter.dofilterinternal(metricfilterautoconfiguration.java:90) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:107) org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467) org.eclipse.jetty.servlet.servlethandler.dohandle(servlethandler.java:499) org.eclipse.jetty.server.handler.scopedhandler.handle(scopedhandler.java:137) org.eclipse.jetty.security.securityhandler.handle(securityhandler.java:557) org.eclipse.jetty.server.session.sessionhandler.dohandle(sessionhandler.java:231) org.eclipse.jetty.server.handler.contexthandler.dohandle(contexthandler.java:1086) org.eclipse.jetty.servlet.servlethandler.doscope(servlethandler.java:428) org.eclipse.jetty.server.session.sessionhandler.doscope(sessionhandler.java:193) org.eclipse.jetty.server.handler.contexthandler.doscope(contexthandler.java:1020) org.eclipse.jetty.server.handler.scopedhandler.handle(scopedhandler.java:135) org.eclipse.jetty.server.handler.handlerwrapper.handle(handlerwrapper.java:116) org.eclipse.jetty.server.server.handle(server.java:370) org.eclipse.jetty.server.abstracthttpconnection.handlerequest(abstracthttpconnection.java:494) org.eclipse.jetty.server.abstracthttpconnection.content(abstracthttpconnection.java:982) org.eclipse.jetty.server.abstracthttpconnection$requesthandler.content(abstracthttpconnection.java:1043) org.eclipse.jetty.http.httpparser.parsenext(httpparser.java:865) org.eclipse.jetty.http.httpparser.parseavailable(httpparser.java:240) org.eclipse.jetty.server.asynchttpconnection.handle(asynchttpconnection.java:82) org.eclipse.jetty.io.nio.selectchannelendpoint.handle(selectchannelendpoint.java:667) org.eclipse.jetty.io.nio.selectchannelendpoint$1.run(selectchannelendpoint.java:52) org.eclipse.jetty.util.thread.queuedthreadpool.runjob(queuedthreadpool.java:608) org.eclipse.jetty.util.thread.queuedthreadpool$3.run(queuedthreadpool.java:543) java.lang.thread.run(thread.java:745) caused by: org.springframework.validation.bindexception: org.springframework.validation.beanpropertybindingresult: 1 errors field error in object 'target' on field 'valid': rejected value [false] codes [asserttrue.target.validasserttrue.validasserttrue.booleanasserttrue] arguments [org.springframework.context.support.defaultmessagesourceresolvable: codes [target.validvalid] arguments [] default message [valid]] default message ['script' cannot be null or empty] org.springframework.xd.module.options.pojomoduleoptionsmetadata.bindandvalidate(pojomoduleoptionsmetadata.java:205) org.springframework.xd.module.options.pojomoduleoptionsmetadata.interpolate(pojomoduleoptionsmetadata.java:139) org.springframework.xd.module.options.flattenedcompositemoduleoptionsmetadata.interpolate(flattenedcompositemoduleoptionsmetadata.java:152) org.springframework.xd.module.options.environmentawaremoduleoptionsmetadataresolver$moduleoptionsmetadatawithdefaults.interpolate(environmentawaremoduleoptionsmetadataresolver.java:167) org.springframework.xd.module.options.hierarchicalcompositemoduleoptionsmetadata.interpolate(hierarchicalcompositemoduleoptionsmetadata.java:105) org.springframework.xd.module.options.flattenedcompositemoduleoptionsmetadata.interpolate(flattenedcompositemoduleoptionsmetadata.java:152) org.springframework.xd.module.options.environmentawaremoduleoptionsmetadataresolver$moduleoptionsmetadatawithdefaults.interpolate(environmentawaremoduleoptionsmetadataresolver.java:167) org.springframework.xd.dirt.stream.xdstreamparser.parse(xdstreamparser.java:177) ... 61 more {code}"""" and """"Modules do not redeploy properly when zookeeper node is lost. * sha baddfc24b08286a78392d5f565742c9bab5adfea * ec2 environment ** look at zookeeper ec2 deployment test topology.png for a view of the topology h2. the test scenario # bring up a up a 5 container 2 admin xd cluster up using 3 zk server ensemble. # create ticktock stream """"time|log"""" # deploy with --properties """"module.log.count=5"""" # kill one of the zk servers in the ensemble h2. observed behavior. # in this particular scenario 3 containers were affected by killing (sudo kill <pid>) zookeeper 2 # 2 containers did not come back online even though they did show up in the runtime containers h2. timeline # 14:08:21 deployed stream # 14:09:10 kill server in zk ensemble # after waiting a few seconds ran runtime modules (*note:* log2 is undeployed and log5 is then deployed) : xd:>runtime modules module container id options deployment properties ----------------- ------------------------------------ ------------------------------------------ --------------------- foo.sink.log.1 98a32c62-302a-484b-af9c-d670f2a3cfc2 {name=foo expression=payload level=info} {count=5 sequence=1} foo.sink.log.2 9a3a1846-bac4-4504-81fd-151665d851dc {name=foo expression=payload level=info} {count=5 sequence=2} foo.source.time.1 9a3a1846-bac4-4504-81fd-151665d851dc {fixeddelay=1 format=yyyy-mm-dd hh:mm:ss} {count=1 sequence=1} xd:>runtime modules module container id options deployment properties ----------------- ------------------------------------ ------------------------------------------ --------------------- foo.sink.log.1 98a32c62-302a-484b-af9c-d670f2a3cfc2 {name=foo expression=payload level=info} {count=5 sequence=1} foo.sink.log.5 5c454a39-fc4c-4bd3-b828-08cd837dc4ba {name=foo expression=payload level=info} {count=5 sequence=5} foo.source.time.1 9a3a1846-bac4-4504-81fd-151665d851dc {fixeddelay=1 format=yyyy-mm-dd hh:mm:ss} {count=1 sequence=1} xd:>runtime modules module container id options deployment properties ----------------- ------------------------------------ ------------------------------------------ --------------------- foo.sink.log.1 98a32c62-302a-484b-af9c-d670f2a3cfc2 {name=foo expression=payload level=info} {count=5 sequence=1} foo.sink.log.5 5c454a39-fc4c-4bd3-b828-08cd837dc4ba {name=foo expression=payload level=info} {count=5 sequence=5} foo.source.time.1 9a3a1846-bac4-4504-81fd-151665d851dc {fixeddelay=1 format=yyyy-mm-dd hh:mm:ss} {count=1 sequence=1} xd:>runtime containers container id host ip address pid groups custom attributes ------------------------------------ ---------------- ------------- ---- ------ ----------------- 0ba5e6ce-aedf-429c-b846-1cd4e32836c7 ip-10-2-209-174 10.2.209.174 1045 5c454a39-fc4c-4bd3-b828-08cd837dc4ba ip-10-70-9-57 10.70.9.57 1099 707a968b-15a5-451f-9034-1e7f05cdcf97 ip-10-70-11-185 10.70.11.185 1055 98a32c62-302a-484b-af9c-d670f2a3cfc2 ip-10-110-186-48 10.110.186.48 1056 groupa 9a3a1846-bac4-4504-81fd-151665d851dc ip-10-70-9-153 10.70.9.153 1020 group0 h2. undeploy and redeploy stream # 14:16:42 undeploy and redploy with module.log.count=5 xd:>runtime modules module container id options deployment properties ----------------- ------------------------------------ ------------------------------------------ --------------------- foo.sink.log.1 98a32c62-302a-484b-af9c-d670f2a3cfc2 {name=foo expression=payload level=info} {count=5 sequence=1} foo.sink.log.2 5c454a39-fc4c-4bd3-b828-08cd837dc4ba {name=foo expression=payload level=info} {count=5 sequence=2} foo.sink.log.5 9a3a1846-bac4-4504-81fd-151665d851dc {name=foo expression=payload level=info} {count=5 sequence=5} foo.source.time.1 98a32c62-302a-484b-af9c-d670f2a3cfc2 {fixeddelay=1 format=yyyy-mm-dd hh:mm:ss} {count=1 sequence=1} xd:>runtime containers container id host ip address pid groups custom attributes ------------------------------------ ---------------- ------------- ---- ------ ----------------- 0ba5e6ce-aedf-429c-b846-1cd4e32836c7 ip-10-2-209-174 10.2.209.174 1045 5c454a39-fc4c-4bd3-b828-08cd837dc4ba ip-10-70-9-57 10.70.9.57 1099 707a968b-15a5-451f-9034-1e7f05cdcf97 ip-10-70-11-185 10.70.11.185 1055 98a32c62-302a-484b-af9c-d670f2a3cfc2 ip-10-110-186-48 10.110.186.48 1056 groupa 9a3a1846-bac4-4504-81fd-151665d851dc ip-10-70-9-153 10.70.9.153 1020 group0 # 14:21:06 undeploy foo"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to create a [java client|https://github.com/markfisher/receptor-client] for receptor so i can interact with diego runtime via receptor api calls from xd."""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to isolate the hadoop tests in a different project so that the dirt project doesn't have to depend upon thus eliminating the incorrect cp file generation in eclipse. and similar to """"As a user i'd like to enable ha on {{namenode}} without having to enable custom configuration. more details [here|https://github.com/spring-projects/spring-xd-ambari/issues/6]."""" and similar to """"As a developer i'd like to investigate the increase in warn logs so that i can troubleshoot and fix pmd/sonar violations. consider notifying the violations through sonar configurations. the committer should be notified."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The moduleoptions in modulemetadata should contain type information when querying the *modulemetadatarepository* the *moduleoptions* in class *modulemetadata* are currently only provided as *properties*. this is a problem in cases where i need to determine the type of the property. for instance security sensitive properties should not be exposed verbatim but rather be masked. right now it seems impossible (easily) to determine whether a property is e.g. of type: *org.springframework.xd.module.options.types.password*"""" is a not user story because it is most similar to: """"Admin servers should write streams to and delete them from zookeeper this should also enable removal of any streamdefinitionrepository code. the state should be written as a data node at the stream level (e.g. /xd/streams/mystream {state=...}) for now we at least need to support the boolean --deploy=true|false flag. if that is true then the leader admin will deploy the modules of the stream across available containers (xd-1399)"""" and similar to """"Document json quoting behavior in shell this may be an issue following the search/replace from curl to shell but for example this documentation line does not work: http post --target http://localhost:9000 --data """"{\""""symbol\"""":\""""vmw\""""\""""price\"""":72.04}"""" the backslash prior to quote is left in the payload (and hence jackson chokes on it) we need clear rules about quoting at the shell level"""" and similar to """"Improve module options support note from pr #365 - which has been merged - providing the initial level of support... pending issues (to be addressed in another pr?): - [x] complex case - [x] default values for complex case when option is not surfaced back to the module (eg """"suffix"""" in our canonical example) - [ ] plugin provided options and values - [ ] descriptive defaults instead of actual defaults (e.g. \<use stream name\>) - [ ] jsr303 validation"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the option to _ack_ messages so that i can guarantee that the message/request sent is successful."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add support for update in gpfdist sink currently we can only do plain inserts should follow same logic from native gpfdist sink and add upserts."""" is a user story, and is worth 8 story points because it is most similar to: As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint. and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" and similar to """"As a pm i'd like to have the smart grid demo (from s1-2014) ported into spring xd samples repo."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove retry from tcp sink now that the bus supports retry it is no longer necessary to have the retry advice in the tcp sink."""" is a not user story because it is most similar to: """"Modules need to validate their parameters at create time. we need to fail fast."""" and similar to """"Job executions without deployed job (deleted) shall not be restartable"""" and similar to """"Add support for creating fixed delay/ fixed rate triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Provide missing jars to enable #xpath() spel spring xd should package *spring-integration-xml* jar within distribution so we can invoke *#xpath()* spel from processors e.g. using transformer: {code}... | transform --expression='#xpath(payload """"/*[name()=''datasource'']/*[name()=''row'']/text()"""" | ... {code}"""" is a not user story because it is most similar to: """"Come up with a consistent link consumption scheme on the rest client side see discussion at https://github.com/spring-cloud/spring-cloud-data/pull/37#discussion_r36849117 also relevant: http://docs.spring.io/spring-hateoas/docs/current/reference/html/#client"""" and similar to """"Allow for late-binding of module options defaults this is about computing the value to support expressions such as ${xd.stream.name} as a default. initial discussion suggested to leverage the work done in xd-1175 by having a custom @latevalue (or @deploytimevalue etc) be resolved at deployment time"""" and similar to """"User wants to package and deploy an xd application install a boot uberjar containing custom modules plus stream and job definitions and possibly specific configuration. this potentially includes the ability to export and import all deployable resources defined in an xd environment."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Clean up mbean registration for failed module deployments when a module fails to deploy (for instance an http module configured with a port that is already bound) subsequent attempts to deploy the module fail due to a jmx exception: {noformat} java.lang.runtimeexception: org.springframework.context.applicationcontextexception: failed to start bean 'org.springframework.integration.monitor.integrationmbeanexporter#0#beafb1fc-4423-4e4f-a88c-1655ea0fdcc5' nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=output sends=0]] with key 'org.springframework.integration:type=messagechannelname=output' nested exception is javax.management.instancealreadyexistsexception: xd.foo:module=http.0component=messagechannelname=output org.springframework.xd.dirt.server.containerregistrar.deploystreammodule(containerregistrar.java:447) org.springframework.xd.dirt.server.containerregistrar.onchildadded(containerregistrar.java:346) org.springframework.xd.dirt.server.containerregistrar.access$700(containerregistrar.java:92) org.springframework.xd.dirt.server.containerregistrar$deploymentlistener.childevent(containerregistrar.java:655) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:494) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:488) org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92) com.google.common.util.concurrent.moreexecutors$samethreadexecutorservice.execute(moreexecutors.java:293) org.apache.curator.framework.listen.listenercontainer.foreach(listenercontainer.java:83) org.apache.curator.framework.recipes.cache.pathchildrencache.calllisteners(pathchildrencache.java:485) org.apache.curator.framework.recipes.cache.eventoperation.invoke(eventoperation.java:35) org.apache.curator.framework.recipes.cache.pathchildrencache$11.run(pathchildrencache.java:755) java.util.concurrent.executors$runnableadapter.call(executors.java:511) java.util.concurrent.futuretask.run(futuretask.java:266) java.util.concurrent.executors$runnableadapter.call(executors.java:511) java.util.concurrent.futuretask.run(futuretask.java:266) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java.lang.thread.run(thread.java:744) caused by: org.springframework.context.applicationcontextexception: failed to start bean 'org.springframework.integration.monitor.integrationmbeanexporter#0#beafb1fc-4423-4e4f-a88c-1655ea0fdcc5' nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=output sends=0]] with key 'org.springframework.integration:type=messagechannelname=output' nested exception is javax.management.instancealreadyexistsexception: xd.foo:module=http.0component=messagechannelname=output org.springframework.context.support.defaultlifecycleprocessor.dostart(defaultlifecycleprocessor.java:176) org.springframework.context.support.defaultlifecycleprocessor.access$200(defaultlifecycleprocessor.java:51) org.springframework.context.support.defaultlifecycleprocessor$lifecyclegroup.start(defaultlifecycleprocessor.java:346) org.springframework.context.support.defaultlifecycleprocessor.startbeans(defaultlifecycleprocessor.java:149) org.springframework.context.support.defaultlifecycleprocessor.onrefresh(defaultlifecycleprocessor.java:112) org.springframework.context.support.abstractapplicationcontext.finishrefresh(abstractapplicationcontext.java:773) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:485) org.springframework.boot.springapplication.refresh(springapplication.java:648) org.springframework.boot.springapplication.run(springapplication.java:311) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:240) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:184) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:174) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:164) org.springframework.xd.dirt.server.containerregistrar.deploymodule(containerregistrar.java:227) org.springframework.xd.dirt.server.containerregistrar.deploystreammodule(containerregistrar.java:429) ... 18 more caused by: org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=output sends=0]] with key 'org.springframework.integration:type=messagechannelname=output' nested exception is javax.management.instancealreadyexistsexception: xd.foo:module=http.0component=messagechannelname=output org.springframework.jmx.export.mbeanexporter.registerbeannameorinstance(mbeanexporter.java:610) org.springframework.integration.monitor.integrationmbeanexporter.registerchannels(integrationmbeanexporter.java:837) org.springframework.integration.monitor.integrationmbeanexporter.dostart(integrationmbeanexporter.java:459) org.springframework.integration.monitor.integrationmbeanexporter.start(integrationmbeanexporter.java:410) org.springframework.context.support.defaultlifecycleprocessor.dostart(defaultlifecycleprocessor.java:173) ... 33 more caused by: javax.management.instancealreadyexistsexception: xd.foo:module=http.0component=messagechannelname=output com.sun.jmx.mbeanserver.repository.addmbean(repository.java:437) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registerwithrepository(defaultmbeanserverinterceptor.java:1898) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registerdynamicmbean(defaultmbeanserverinterceptor.java:966) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registerobject(defaultmbeanserverinterceptor.java:900) com.sun.jmx.interceptor.defaultmbeanserverinterceptor.registermbean(defaultmbeanserverinterceptor.java:324) com.sun.jmx.mbeanserver.jmxmbeanserver.registermbean(jmxmbeanserver.java:522) org.springframework.jmx.support.mbeanregistrationsupport.doregister(mbeanregistrationsupport.java:195) org.springframework.jmx.export.mbeanexporter.registerbeaninstance(mbeanexporter.java:663) org.springframework.jmx.export.mbeanexporter.registerbeannameorinstance(mbeanexporter.java:606) ... 37 more {noformat}"""" and """"Getting stuck on hive error. in hadoop while creating table in hive i am getting stuck in below error 15/04/21 12:35:34 info log.perflogger: <perflog method=driver.run from=org.apache.hadoop.hive.ql.driver> 15/04/21 12:35:34 info log.perflogger: <perflog method=timetosubmit from=org.apache.hadoop.hive.ql.driver> 15/04/21 12:35:34 info log.perflogger: <perflog method=acquirereadwritelocks from=org.apache.hadoop.hive.ql.driver> 15/04/21 12:35:34 info lockmgr.dummytxnmanager: creating lock manager of type org.apache.hadoop.hive.ql.lockmgr.zookeeper.zookeeperhivelockmanager 15/04/21 12:35:34 info zookeeper.zookeeper: initiating client connection connectstring=dkhc3013.dcsg.com:2181dkhc3010.dcsg.com:2181dkhc3011.dcsg.com:2181 sessiontimeout=600000 watcher=org.apache.hadoop.hive.ql.lockmgr.zookeeper.zookeeperhivelockmanager$dummywatcher@5b9e1cd4 15/04/21 12:35:34 debug lockmgr.dummytxnmanager: adding /incoming/mkt/gcdb.etl_master_account_pref to list of lock inputs 15/04/21 12:35:34 debug lockmgr.dummytxnmanager: adding database:mkt_incoming to list of lock outputs after restart the zookeeper service i am able to successfully run the query but after some time again facing the same issue/error i am stuck on the same error. is there any solution to overcome this issue or any tuning i can do for resolve this issue. please suggest on this."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Twittersearch module to produce json data as-is from twitter do not convert the data into a spring social tweet object pass along the json as-is from twitter search."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets. and similar to """"As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies."""" and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Standardize date/time/timezone handling we should we centrally standardize on date/time formats so that we don't create inconsistencies and follow iso 8601 internally. internally we should only work with utc (or make that the default config option). ultimately whatever the user sees is just a formatting concern."""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Standardize naming and unit for options across modules we should standardize on the options between modules: idletimeout - timeout rolloversize - rollover also need to standardize on unit used for timeout - should this be s or ms?"""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to add {{undeployed}} status for yarn spi so i can represent the correct status instead of the current {{unknown}} state. and similar to """"As a s-c-d developer i'd like to add test coverage for {{streamcontroller}} so i can verify api contracts at build time."""" and similar to """"As a developer i'd like to identify the kafka configurations so that i could setup infrastructure to perform performance testing."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to migrate the current master branch ci builds to ec2 instances so i can manage them all in one-place reliably."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"On specific shutdown scenarios the stream resumes from the start of the bus topic https://github.com/spring-projects/spring-xd/issues/1727"""" is a not user story because it is most similar to: """"Replace beandefinitionaddingbeanpostprocessor with ordered plugins this will allow us to control the order of plugins and use plugin(s) to manage the common module context replacing beandefinitionaddingbeanpostprocesser"""" and similar to """"Move spel propertyaccessors to module parent context when int-3133 is resolved spel {{propertyaccessor}} s are inherited from parent contexts. instead of adding the {{jsonpropertyaccessor}} to each module's context add it to the parent instead."""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" is a not user story because it is most similar to: """"Fix 'cluster/containers' rest endpoint with security enabled once the container's management server is secured the admin server needs to know which rest template to use to get the message rates from the deployed modules inside the containers."""" and similar to """"Update creating a sink module section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.x-snapshot/reference/html/#_test_the_deployed_module_3"""" and similar to """"Update sources twitter search section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#twittersearch"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-d developer i'd like to add support for _profiles_ to the core {{admin}} application so i can back the stream repository with respective backend strategy. for example: {{local}} profile would use in-memory strategy to store the metadata."""" is a not user story because it is most similar to: """"Spike: research request/reply support to kafka message bus the scope is to research the available options to provide request/reply support for kafka. * document findings * pocs previous desc: the bindrequestor and bindreplier methods of the message bus need to be implemented."""" and similar to """"Remove """"legacy"""" application code following spring bootification see the discussion in https://github.com/spring-projects/spring-xd/pull/370 there are now various superseded classes and tests which we no longer need."""" and similar to """"Spark streaming module executor use getmessagebuilderfactory(beanfactory) we need to use getmessagebuilderfactory(beanfactory) to initialize messagebuilder in spark streaming module executor. please see the discussion: https://github.com/spring-projects/spring-xd/pull/1454/files#r24367825"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Ensure the delete operation can delete a tap while deleting a stream doesn't remove any taps right now we should be able to explicitly delete a tap. determine whether the current delete works and if not make it so."""" is a not user story because it is most similar to: """"Rename channelregistry my current thinking is... channelregistry -> messagebus rabbitchannelregistry -> rabbitmessagebus ... then method names change like so: createinbound -> registerconsumer createoutbound -> registerproducer"""" and similar to """"Rabbit bus: expose channelcachesize on cachingconnectionfactory http://stackoverflow.com/questions/35563064/processing-messages-through-namedchannels-with-prefetch-1/35584333#35584333"""" and similar to """"Develop infrastructure to enable testability of commands this requires to boostrap the singlenode admin server in process submit commands to the shell programmatically and assert on the results of executing the command."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to update to si kafka extension 1.2.0 so i can leverage the latest performance improvements."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Wiretap is applied to outputchannel before the tap channel has been bound to the bus when establishing the tap we create the tap channel and add the wiretap before the tap channel has been bound to the bus. {quote} 17:00:23918 error task-scheduler-8 handler.logginghandler - org.springframework.messaging.messagedeliveryexception: dispatcher has no subscribers for channel 'tap:stream:foo.time.0.tap.bridge'. nested exception is org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:81) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:277) org.springframework.integration.channel.interceptor.wiretap.presend(wiretap.java:129) {quote}"""" and """"Create microbenchmark performance test of reactor syslog adapter vs standard syslog adapter we need to verify that we are seeing improved throughput when using the reactor based syslog adapter. a suggestion on a basic stream to perform a microbenchmark this would be using in-memory counters singlenode with the stream definition """"syslog | counter"""". based on the results of this microbenchmark other stories may need to be created."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a pm i'd like to have the copyright message in the reference guide (pdf) updated to include 2015 instead of 2014."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create pipes and filters dsl for ingestion initial simple handcoded implementation for straight through pipe and filter model e.g. a | b | c"""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Support partitioning/bus properties in the redismessagebus pr: https://github.com/spring-projects/spring-xd/pull/926"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to separate mocks vs. real repository coupling from the test infrastructure so it is easy to test against thin layer of dependencies. and similar to """"As a developer i'd like to investigate channel performance issues in si 4.2 so i can determine the bottlenecks and take corrective actions to improve overall channel performance."""" and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add tasklet to stream from (s)ftp to hdfs"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Incremental jdbcfile process for loading data into isilon cluster users should have the ability to load data from a jdbc source to a file sink pointing to a file location (nfs mount to an isilon cluster) in a particular directory structure. isilon support multiple protocols including nfs and hdfs. by storing data directly into an nfs mount we would eliminate the hdfs overhead. this functionality should be similar to the jdbchdfs job that is currently available in springxd. see jira issue 'xd-2309' for more details."""" is a not user story because it is most similar to: """"Controllers - disallow negative pagesize values currently you can specify negative pagesize values - the controllers should validatate that. right now an internal exception is being return leaking internal details to the caller - e.g.: **http://localhost:9393/batch/executions?pagesize=-1** results in: {code} <errors> <error logref=""""badsqlgrammarexception""""> <message> statementcallback bad sql grammar [select top -1 e.job_execution_id e.start_time e.end_time e.status e.exit_code e.exit_message e.create_time e.last_updated e.version i.job_instance_id i.job_name from batch_job_execution e batch_job_instance i where e.job_instance_id=i.job_instance_id order by e.job_execution_id desc] nested exception is java.sql.sqlsyntaxerrorexception: user lacks privilege or object not found: top </message> </error> </errors> {code}"""" and similar to """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Kafka source and sink headers shouldn't interfere with bus functionality the kafka sink should not make use of the message headers sent by the kafka receivers in the kafka bus. similarly the headers received from the kafka source should not be propagated when sending to the kakfa bus. https://github.com/spring-projects/spring-xd/issues/1804"""" is a not user story because it is most similar to: """"Verify use of jmx managed bean to shutdown cleanly the xd-admin and xd-container servers in both cases there are multiple application contexts that can be running in the process. the jmx managed bean should call 'close' on those application contexts. the more detailed lifecycle of cleanly shutting down components within those application contexts is another story."""" and similar to """"Increase performance of query to determine job restartability in batchjobexecutionscontroller's list all job executions for each given job execution it needs to be evaluated against all the job executions of a given job instance to see if the job execution is restarted. the rule is: for a given jobinstance there could be only one job execution that can be in """"completed"""" state. if the job itself is restartable and if any of the job executions for this job instance are """"failed"""" or """"stopped"""" then that job execution can be restarted (based on the client request). hence if the job execution is complete then it will set the restartable flag to false for all the job executions on a given job instance."""" and similar to """"Create shell integration test fixture for jdbc related sink would be nice to have some kind of regression testing on the jdbc sink as it becomes more prominent in xd. use of an in memory db where we expose eg a jdbctemplate to assert state"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add hadoop 2.4.x as an option hadoop 2.4.1 is now a stable release and we should add support for running against it"""" is a not user story because it is most similar to: """"Port load-generator & throughput modules to scs-modules migrate load-generator and throughput to scs."""" and similar to """"Ui - container list - module properties - escape passwords"""" and similar to """"Add dependencies needed for running a job using hbase"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Filepollhdfs sporadically fails to create files on remote machines need to add a retry to the createdatafileonremote machine because the creation of the test file on the remote machine fails from time to time. usually related to network issues."""" is a user story, and is worth 5 story points because it is most similar to: As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience. and similar to """"As a s-c-s user i'd like to have the modules self-register itself with {{eureka}} whenever they're installed so i can also discover the same modules using spring xd admin spi and reuse them to create data pipelines."""" and similar to """"As a user i'd like to have direct shell commands to scale up/down a given module instance so i can avoid spi specific cli commands that needs run outside of data flow."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Mbeans are not destroyed if stream is created and destroyed with no delay problem: the container that the stream was deployed to will not allow new streams to be deployed. once the error occurs the only solution is to terminate the xd container and restart it. to reproduce create a stream foo and destroy the stream then create the stream foo again. this best done programmatically taking the same steps using the """"shell"""" may not reproduce the problem. i.e. if you put a sleep of 1-2 seconds between the destroy and the next create it works fine"""" is a not user story because it is most similar to: """"Create documentation section for the shell create a new section in the docs regaring shell usage in particular how to represent single and double quotes. include some discussion of basic commands to manipulate streams jobs and list modules. how to pass in a file that can be executed when the shell starts up. also point to spring-shell ref docs for extensibility in terms of adding custom commands."""" and similar to """"Provide a way to customize the isolation level of the jobrepository the gemfire xd database cannot be used to store the spring xd metadata because the former doesn't support the default spring batch transaction isolation level isolation_serializable. there looks to be no way to configure the spring xd's internal spring batch jobrepository with another isolation level. the jobrepository instance is getting created with default settings by the spring batch'es {{simplebatchconfiguration}} and there are no custom {{batchconfigurer}}s available to change the default settings of the jobrepository."""" and similar to """"Support completion proposals of processors after a named channel due to the way the heuristics for module type guessing work we can't currently support completions of the like: """"queue:foo > s<tab>"""" that would yield valid processor names we need to add non-determinism (list of types instead of single type) to the type guessing heuristic"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to measure the baseline serialization characteristics in xd so i can determine the areas of performance improvements."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd-container should start even if xd-admin is not running currently xd-container will not start due to a db connection failure if the xd-admin is not already running in fact if someone is not using batch jobs at all with xd they should not even need a db connection for either xd-admin or xd-container to run so... consider using lazyconnectiondatasourceproxy so a connection failure would only occur when the datasource is actually invoked to retrieve a connection"""" is a not user story because it is most similar to: """"Add config file fragment support configuration in xd windows bat scripts the external configuration fragment file support by setting spring.config.location in the xd startup scripts are not updated in xd-admin xd-container and xd-singlenode .bat scripts. please refer: https://github.com/spring-projects/spring-xd/issues/582"""" and similar to """"Replace spring-xd-messagebus-* dependencies with scs xd 2.0 will not have direct dependency on the s-c-s binder (as mb has been renamed). the message bus code is obsolete/orphaned in xd 2.0 but some is required to support current integration tests. we can look at pruning it some more but complete removal likely depends on integrating the s-c-s enabled admin spi. mb will remain in xd 1.x."""" and similar to """"Come up with a consistent link consumption scheme on the rest client side see discussion at https://github.com/spring-cloud/spring-cloud-data/pull/37#discussion_r36849117 also relevant: http://docs.spring.io/spring-hateoas/docs/current/reference/html/#client"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Context deserialize doesn't use parent first classloader if a class is added to a batch execution context that is located in an isolated context an exception will be thrown when that object is deserialized. it appears the serialize doesn't use the parentfirstclassloader during deserialization."""" is a not user story because it is most similar to: """"Add spring-xd-hadoop distro specific sub-projects we need to modify build adding two sub-projects for spring-xd-hadoop: one for hadoop 1.1.2 and one for phd1 (pivotal hd) to pull in transitive dependencies for correct hadoop distro"""" and similar to """"Regression test existing functionality of stream/taps based on introduction of new conversion functionality make sure nothing is broken - spot check using. 1) ticktock 2) twitter 3) gemfire"""" and similar to """"Ui + shell: remove any usage of rest endpoints using the """".json"""" notation accessing rest endpoint using the """".json"""" file extension causes maintenance issues for the authorization rules and is not necessary. remove any usage for the admin ui and the shell. at the same time the """".json"""" endpoint shall be deprecated or removed ultimately."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Parsing issues with kafka-bus.xml using kafka as a transport option yields: [2014-11-04 12:18:30.528] boot - 24061 error [main] --- springapplication: application startup failed org.springframework.beans.factory.parsing.beandefinitionparsingexception: configuration problem: failed to import bean definitions from url location [classpath*:/meta-inf/spring-xd/transports/kafka-bus.xml] offending resource: class path resource [meta-inf/spring-xd/bus/message-bus.xml] nested exception is org.springframework.beans.factory.xml.xmlbeandefinitionstoreexception: line 9 in xml document from url [jar:file:/users/mbogoevici/.gradle/caches/modules-2/files-2.1/org.springframework.xd/spring-xd-dirt/1.1.0.build-snapshot/cf6a9a013dbde49d2925e2b5177d01a028379758/spring-xd-dirt-1.1.0.build-snapshot.jar!/meta-inf/spring-xd/transports/kafka-bus.xml] is invalid nested exception is org.xml.sax.saxparseexception linenumber: 9 columnnumber: 26 open quote is expected for attribute """"{1}"""" associated with an element type """"value"""". org.springframework.beans.factory.parsing.failfastproblemreporter.error(failfastproblemreporter.java:70) org.springframework.beans.factory.parsing.readercontext.error(readercontext.java:85) org.springframework.beans.factory.parsing.readercontext.error(readercontext.java:76) org.springframework.beans.factory.xml.defaultbeandefinitiondocumentreader.importbeandefinitionresource(defaultbeandefinitiondocumentreader.java:248) org.springframework.beans.factory.xml.defaultbeandefinitiondocumentreader.parsedefaultelement(defaultbeandefinitiondocumentreader.java:199) org.springframework.beans.factory.xml.defaultbeandefinitiondocumentreader.parsebeandefinitions(defaultbeandefinitiondocumentreader.java:184) org.springframework.beans.factory.xml.defaultbeandefinitiondocumentreader.doregisterbeandefinitions(defaultbeandefinitiondocumentreader.java:141) org.springframework.beans.factory.xml.defaultbeandefinitiondocumentreader.registerbeandefinitions(defaultbeandefinitiondocumentreader.java:110) org.springframework.beans.factory.xml.xmlbeandefinitionreader.registerbeandefinitions(xmlbeandefinitionreader.java:508) org.springframework.beans.factory.xml.xmlbeandefinitionreader.doloadbeandefinitions(xmlbeandefinitionreader.java:391) org.springframework.beans.factory.xml.xmlbeandefinitionreader.loadbeandefinitions(xmlbeandefinitionreader.java:335) org.springframework.beans.factory.xml.xmlbeandefinitionreader.loadbeandefinitions(xmlbeandefinitionreader.java:303) org.springframework.beans.factory.support.abstractbeandefinitionreader.loadbeandefinitions(abstractbeandefinitionreader.java:180) org.springframework.beans.factory.support.abstractbeandefinitionreader.loadbeandefinitions(abstractbeandefinitionreader.java:216) org.springframework.beans.factory.support.abstractbeandefinitionreader.loadbeandefinitions(abstractbeandefinitionreader.java:187) org.springframework.context.annotation.configurationclassbeandefinitionreader.loadbeandefinitionsfromimportedresources(configurationclassbeandefinitionreader.java:313) org.springframework.context.annotation.configurationclassbeandefinitionreader.loadbeandefinitionsforconfigurationclass(configurationclassbeandefinitionreader.java:138) org.springframework.context.annotation.configurationclassbeandefinitionreader.loadbeandefinitions(configurationclassbeandefinitionreader.java:116) org.springframework.context.annotation.configurationclasspostprocessor.processconfigbeandefinitions(configurationclasspostprocessor.java:330) org.springframework.context.annotation.configurationclasspostprocessor.postprocessbeandefinitionregistry(configurationclasspostprocessor.java:243) org.springframework.context.support.postprocessorregistrationdelegate.invokebeandefinitionregistrypostprocessors(postprocessorregistrationdelegate.java:254) org.springframework.context.support.postprocessorregistrationdelegate.invokebeanfactorypostprocessors(postprocessorregistrationdelegate.java:94) org.springframework.context.support.abstractapplicationcontext.invokebeanfactorypostprocessors(abstractapplicationcontext.java:609) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:464) org.springframework.boot.springapplication.refresh(springapplication.java:691) org.springframework.boot.springapplication.run(springapplication.java:320) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:142) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:129) org.springframework.xd.dirt.server.singlenodeapplication.run(singlenodeapplication.java:63) org.springframework.xd.demo.kafka.kafkademo.main(kafkademo.java:28) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) com.intellij.rt.execution.application.appmain.main(appmain.java:134) caused by: org.springframework.beans.factory.xml.xmlbeandefinitionstoreexception: line 9 in xml document from url [jar:file:/users/mbogoevici/.gradle/caches/modules-2/files-2.1/org.springframework.xd/spring-xd-dirt/1.1.0.build-snapshot/cf6a9a013dbde49d2925e2b5177d01a028379758/spring-xd-dirt-1.1.0.build-snapshot.jar!/meta-inf/spring-xd/transports/kafka-bus.xml] is invalid nested exception is org.xml.sax.saxparseexception linenumber: 9 columnnumber: 26 open quote is expected for attribute """"{1}"""" associated with an element type """"value"""". org.springframework.beans.factory.xml.xmlbeandefinitionreader.doloadbeandefinitions(xmlbeandefinitionreader.java:398) org.springframework.beans.factory.xml.xmlbeandefinitionreader.loadbeandefinitions(xmlbeandefinitionreader.java:335) org.springframework.beans.factory.xml.xmlbeandefinitionreader.loadbeandefinitions(xmlbeandefinitionreader.java:303) org.springframework.beans.factory.support.abstractbeandefinitionreader.loadbeandefinitions(abstractbeandefinitionreader.java:180) org.springframework.beans.factory.support.abstractbeandefinitionreader.loadbeandefinitions(abstractbeandefinitionreader.java:216) org.springframework.beans.factory.xml.defaultbeandefinitiondocumentreader.importbeandefinitionresource(defaultbeandefinitiondocumentreader.java:242) ... 31 more caused by: org.xml.sax.saxparseexception linenumber: 9 columnnumber: 26 open quote is expected for attribute """"{1}"""" associated with an element type """"value"""". com.sun.org.apache.xerces.internal.util.errorhandlerwrapper.createsaxparseexception(errorhandlerwrapper.java:198) com.sun.org.apache.xerces.internal.util.errorhandlerwrapper.fatalerror(errorhandlerwrapper.java:177) com.sun.org.apache.xerces.internal.impl.xmlerrorreporter.reporterror(xmlerrorreporter.java:441) com.sun.org.apache.xerces.internal.impl.xmlerrorreporter.reporterror(xmlerrorreporter.java:368) com.sun.org.apache.xerces.internal.impl.xmlscanner.reportfatalerror(xmlscanner.java:1436) com.sun.org.apache.xerces.internal.impl.xmlscanner.scanattributevalue(xmlscanner.java:829) com.sun.org.apache.xerces.internal.impl.xmlnsdocumentscannerimpl.scanattribute(xmlnsdocumentscannerimpl.java:439) com.sun.org.apache.xerces.internal.impl.xmlnsdocumentscannerimpl.scanstartelement(xmlnsdocumentscannerimpl.java:255) com.sun.org.apache.xerces.internal.impl.xmldocumentfragmentscannerimpl$fragmentcontentdriver.next(xmldocumentfragmentscannerimpl.java:2786) com.sun.org.apache.xerces.internal.impl.xmldocumentscannerimpl.next(xmldocumentscannerimpl.java:606) com.sun.org.apache.xerces.internal.impl.xmlnsdocumentscannerimpl.next(xmlnsdocumentscannerimpl.java:117) com.sun.org.apache.xerces.internal.impl.xmldocumentfragmentscannerimpl.scandocument(xmldocumentfragmentscannerimpl.java:510) com.sun.org.apache.xerces.internal.parsers.xml11configuration.parse(xml11configuration.java:848) com.sun.org.apache.xerces.internal.parsers.xml11configuration.parse(xml11configuration.java:777) com.sun.org.apache.xerces.internal.parsers.xmlparser.parse(xmlparser.java:141) com.sun.org.apache.xerces.internal.parsers.domparser.parse(domparser.java:243) com.sun.org.apache.xerces.internal.jaxp.documentbuilderimpl.parse(documentbuilderimpl.java:347) org.springframework.beans.factory.xml.defaultdocumentloader.loaddocument(defaultdocumentloader.java:76) org.springframework.beans.factory.xml.xmlbeandefinitionreader.doloaddocument(xmlbeandefinitionreader.java:428) org.springframework.beans.factory.xml.xmlbeandefinitionreader.doloadbeandefinitions(xmlbeandefinitionreader.java:390) ... 36 more"""" and """"As a user i'd like to have the option to delete the queues/topics so that we can include an _optional_ attribute as part of the stream destroy command to also clean-up the associated queues/topics. *notes:* * spring-amqp {{rabbitadmin}} now has a {{getqueueproperties()}} method which returns the number of consumers so it may be possible to use it for this purpose. * consider the possibility of _producers_ and/or _queues_ still containing data * consider the scenario even after the topics/queues are cleaned-up what to do with fanout exchange? *some further thoughts* * consider using the upcoming spring amqp rest api {{rabbitmanagementtemplate}} if the timing is not right we could temporarily invoke the rabbit rest api directly. * should be optional perhaps via {{stream destroy foo --clean}} * should this be done by the admin? or via a new plugin handling module undeployments - in the rabbit case undeploying a consumer would check for us being the last consumer and remove the queue/binding/exchange since we undeploy left->right everything can be cleaned up on the consumer side. * third option would be new methods on the bus {{cleanconsumer}} etc invoked by the {{streamplugin}} * down side of doing it on the admin is that he wouldn't necessarily know which rabbit cluster a stream was deployed to - so it probably has to happen on the container - even so we'd need the admin url(s) for the cluster."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove autolaunch feature from batch jobs jobs will be started via trigger. so we won't need the jobtriggerbean."""" is a not user story because it is most similar to: """"Return full modulestatus information remove all stubs and check all required information is returned accurately."""" and similar to """"Provide .settings formatting rules so that they're shared thinking about using the official springsource rules as a template"""" and similar to """"Add ci job in bamboo to run xd integration tests ci job will run integration tests that are tagged for ci build."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Boot updates post 0.5 m7 some boot classes we compile against have changed or been replaced."""" is a not user story because it is most similar to: """"The xd build breaks with gradle 1.8 the xd build breaks with gradle 1.8 due to some changes in dependency resolution."""" and similar to """"Retrytemplate props in rabbit binder are not used the `@configurationproperties` class for rabbit binder has some props related to retrytemplate but those are not used"""" and similar to """"Update yarn deployment classpath settings for hdp 2.2 and phd 3.0 need to update classpath settings for phd 3.0 and hdp 2.2"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Deploying custom code when a module is deployed it should run in its own isolated classpath. the current code has all dependencies in a single classpath taken from the lib directory at startup. this has a number of drawbacks one of the most important is the batch jobs can not be contributed to the system at runtime. the work for this epic is decoupled from any module deployment story. the assumption is that there will be a directory layout as shown below. current layout ./modules/. |-- common |-- job |-- processor |-- sink |-- source |-- trigger and inside source |-- source | |-- file.xml | |-- gemfire-cq.xml | |-- gemfire.xml | |-- http.xml | |-- jms.xml | |-- mqtt.xml | |-- rabbit.xml | |-- syslog-tcp.xml | |-- syslog-udp.xml | |-- tail.xml | |-- tap.xml | |-- tcp.xml | |-- time.xml | |-- twittersearch.xml | |-- twitterstream.xml using an example of the source directory from the current layout.e.g ./modules/source/file the new layout would be ./modules/source/file/lib/spring-integration-file.jar ./modules/source/file/config/file.xml we should support both the new and old layout styles simultaneously. there what is under 'file' directory is the 'package' no .zip war is required."""" and """"Custom modules can't be found wen using xd.custommodule.home on windows xd can not find the custom modules directory after setting the xd.custommodule.home in the windows environment deployment * xd-singlenode (embedded zookeeper) * java 8 * windows 8 or windows server 2012 r2 steps to reproduce: 1) start xd-singlenode 2) start shell 3) build either the payload-conversion or rss-feed-source from the spring-xd-samples 4) use the shell to execute a module upload for the custom module (rss-feed-source payload-conversion) 5) verify it uploaded xd:>module info processor:mytupleprocessor 6) stop xd single node 7) from the command line execute set xd.custommodule.home=[path to your custom modules] i.e. c:\project\spring-xd-1.1.0.release\xd\custom-modules 8) restart xd-singlenode 9) execute module info processor:mytupleprocessor 10) you will get the following error {noformat} command failed org.springframework.xd.rest.client.impl.springxdexception: could not find module with name 'mytupleprocessor' and type 'processor' {noformat}"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Multiple streams with same port for http source using a singlexd vm i can create multiple streams with the same http port. stream name stream definition status ----------- ----------------- ------ xd:>stream create --definition """"http --port=8081|file --dir=/tmp/test3"""" --name test1 --deploy created and deployed new stream 'test1' xd:>stream create --definition """"http --port=8081|file --dir=/tmp/test3"""" --name test1 --deploy created and deployed new stream 'test1' xd:>stream create --definition """"http --port=8081|file --dir=/tmp/test3"""" --name test2 --deploy created and deployed new stream 'test2' xd:>stream create --definition """"http --port=8081|file --dir=/tmp/test3"""" --name test3 --deploy created and deployed new stream 'test3' xd:>stream list stream name stream definition status ----------- -------------------------------------- -------- test1 http --port=8081|file --dir=/tmp/test3 deployed test2 http --port=8081|file --dir=/tmp/test3 deployed test3 http --port=8081|file --dir=/tmp/test3 deployed issues 1) no error is returned for the duplicate use of the port. in m5 an error was returned. 2) the status shows as """"deployed"""" for all three. 3) even though there are three streams. only the first stream is active. i can post to the first stream that was declared and it will successfully post to the directory. if i post to the remaining streams i don't get an error and i no data is written to the flle. 4) if i remove the working stream the remaining stream still don't work."""" and """"Further decouple message bus deps (test scope) commit https://github.com/spring-projects/spring-xd/commit/8d28b2786acbdea1617d7e903b805e5af5369b90 removed messagebus implementations from the main dirt classpath but used a trick to have tests working (basically mb classes *are* on the cp when in test scope). this story is about adding more gradle projects that support classpath isolation when running tests (and also when authoring a mb implementation). this would avoid false positives such as https://github.com/spring-projects/spring-xd/pull/1340 were lacking jars go unnoticed"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to have a _perf-meter_ sink that will collect and push metrics to the standard container log file. example: perf-meter --nummsgs 1000 will write to the container log a timestamp message count and message rate every 1000 messages. the message rate is the value since the last log event. default values are those specified above."""" is a not user story because it is most similar to: """"Strip messagebus deliverymode header since the messagebus refactoring we now see {noformat} 15:43:06379 1.1.0.m2 warn xdbus.foo.0-1 support.defaultamqpheadermapper - skipping header 'amqp_deliverymode' since it is not of expected type [class org.springframework.amqp.core.messagedeliverymode] it is [class org.springframework.amqp.core.messagedeliverymode] {noformat} when using a rabbit transport and a rabbit sink (the sink spring amqp is in its own classloader)."""" and similar to """"Xd-ec2 needs to support xd_container_groups for created containers xd-ec2 applies the environment variables to all container instances that are created. this behavior has to be altered such that a environment variable can be applied to to a specific container instance. for example if we create a 3 node cluster admin container1 container2 & container3. for example: * xd1_xd_container_groups=group1 * xd2_xd_container_groups=group2 * in this example xd1_xd_container_groups=group1 would apply xd_container_groups=group1 to container1's environment. * xd2_xd_container_groups=group2 would apply xd_container_groups=group2 to container2's environment. * while container3 would not receive a specific environment setting for xd_container_groups."""" and similar to """"In ec2 deployment allow users to set download jars into the lib/xd directory in cases where the deployment requires jars that can not be included with the distribution the user should be able to pull a jar from a http site and place it in lib/xd. the use case is that when we removed the mysql jar from the distribution the ci tests could not start the xd instances on ec2 without it. it was suggested that we use the postgresql instead but decided to continue the use of mysql for acceptance tests."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create shell command for getting information on a given step execution"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add docs for deleting a simple stream. curl -x delete http://localhost:8080/streams/ticktock"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Xd shell crashes when the stream dsl has """"!"""" the xd shell crashes when the following command issued: stream create test --definition """"http | filter --expression=!payload.contains('test') | log"""" it looks like the jline consolereader's expandevents is set to true by default and this causes the issue: exception in thread """"spring shell"""" java.lang.illegalargumentexception: !payload.contains('test') | log"""": event not found jline.console.consolereader.expandevents(consolereader.java:734) jline.console.consolereader.finishbuffer(consolereader.java:604) jline.console.consolereader.accept(consolereader.java:1912) jline.console.consolereader.readline(consolereader.java:2537) jline.console.consolereader.readline(consolereader.java:2162) jline.console.consolereader.readline(consolereader.java:2150) org.springframework.shell.core.jlineshell.promptloop(jlineshell.java:517) org.springframework.shell.core.jlineshell.run(jlineshell.java:178) java.lang.thread.run(thread.java:722)"""" and """"Tcp-client source module throws classnotfoundexception *version:* xd: 1.1 m1 *problem:* trying to use tcp-client source module and observing an exception while deploying the stream. *stream definition:* {code:xml} curl --data name=dummy-firehose --data definition='tcp-client --decoder=lf --port=8080 | log' --data deploy=true http://localhost:9393/streams/definitions {""""name"""":""""dummy-firehose""""""""status"""":null""""definition"""":""""tcp-client --decoder=lf --port=8080 | log""""""""_links"""":{""""self"""":{""""href"""":""""http://localhost:9393/streams/dummy-firehose""""}}} {code} the same curl command works fine against xd 1.0.1 release."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a user i'd like to override the default """"commit-interval"""" so that i can configure commit interval depending on data volume. *note:* this would apply for all ootb jobs that has partition support. the property could be part of _servers.yml_ file."""" is a not user story because it is most similar to: """"Add global http interceptor in order to centralize error logging theoretically i would have liked to centralize logging of http/resource calls global more substantially - but see this limitation: https://github.com/angular/angular.js/issues/4013"""" and similar to """"Documentation for jms source http://static.springsource.org/spring-xd/docs/1.0.0.build-snapshot/reference/html/#sources should have 'jms' added to the list and also the corresponding section that shows some basic usage."""" and similar to """"Admin leader should watch container nodes in zookeeper this will require a zookeeperconnection in adminserverapplication based on singlenode vs. distributed (via profiles see: containerserverapplication for an example). then a pathchildrencache should be established for the /xd/containers node."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add moduleoptions support for rabbit sink we need to add moduleoptions support for rabbit sink."""" is a not user story because it is most similar to: """"Update docker versions update the current docker images to 1.1.0 release"""" and similar to """"Enhance tuplecodec performance profile tuplecodec and implement performance optimizations"""" and similar to """"Show visual representation of stream in admin ui"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove the tabulation characters should not be used from sonar"""" is a not user story because it is most similar to: """"Command to show the xml of the job definition"""" and similar to """"Provide dsl completion after a """"some:channel >"""" prefix"""" and similar to """"Message bus optimizations (kafka + redis)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a s-c-d developer i'd like to collaborate with boot engineering team and derive a strategy for module metadata via {{@configurationproperties}} so i can implement the functionality to support {{shell}} {{autocompletion}} {{flo}} and {{ascii}} documentation in _spring-cloud-data_. eric's [gap analysis|https://docs.google.com/document/d/1a-9rpgsnl6sxd61q9ew2yrkrkn3txk09rdkx7ecklxy/edit#] document captures all the specifics in detail."""" is a not user story because it is most similar to: """"Documentation for reactor-ip source has conflicting information according to the documentation at: http://docs.spring.io/spring-xd/docs/current/reference/html/#reactor-ip one of the options available for this source is {{transport}}. it's listed as having no default but the sample definition doesn't provide it yet appears to default to {{tcp}}. the two should match up. it might also be useful if the possible values for {{transport}} were listed (i assume {{tcp}} and {{udp}})"""" and similar to """"First deploy/launch of pig job that includes yarn-site.xml file fails deploying and launching a pig job that contains a yarn-site.xml config file fails on the first deploy after xd starts up. this happens consistently. the error is: error: could not find or load main class org.apache.hadoop.mapreduce.v2.app.mrappmaster which indicates that the yarn-site.xml file never made it to the classpath. un-deploying and re-deploying the job seems to fix the problem."""" and similar to """"Gauge & rich gauge fail to write results to redis for singlenode steps to reproduce: stream create --name test --definition """"http --port=9090 | log"""" stream create --name simplegauge --definition """"tap:stream:test > gauge"""" http post --target http://localhost:9090 --data """"10"""" redis-cli get gauges.simplegauge [the result] redis 127.0.0.1:6379> get gauges.simplegauge (nil) note: it worked with admin/container but failed only on xd-singlenode."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Validate processing modules declare the required channels validate that modules have required channels declared according to their type. currently the stream deployer accepts processors with no input but the stream doesn't complete. we should fail earlier and more loudly."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_. and similar to """"As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally."""" and similar to """"As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create spring-xd-test-fixtures project acceptance tests has a direct library reference to spring-xd-shell. this causes problems with eclipse. it needs a intermediate main project to resolve the dependencies. this is based on the conversation i had with mark fisher. you cant depend on another projects' src/test what is needed is an intermediate project… some test support project that project would depend on spring-xd-shell (and others) … but then the spring-xd-integration-test project would depend on the intermediate one lib dependencies should only be under src/main src/test is intended to be scoped to the project it sits in… tests for that project - not reusable base classes etc"""" is a not user story because it is most similar to: """"Update twittersearchtest to use #katyperry twittersearchtest is the only test that is dependent on an external system for its success. as such there are times that the service is running slower than the test expects thus the test fails un-necessarily. once xd-1814 is merged we can utilize the """"waitforfile"""" feature to wait for the result file from the stream to be written. but the wait time for twitter will be extended to 1 min. aaaand make the the search string configurable. some tests fail because the #springio is not consistently present."""" and similar to """"Ui + shell: remove any usage of rest endpoints using the """".json"""" notation accessing rest endpoint using the """".json"""" file extension causes maintenance issues for the authorization rules and is not necessary. remove any usage for the admin ui and the shell. at the same time the """".json"""" endpoint shall be deprecated or removed ultimately."""" and similar to """"Job definition is deleted after restart the srping xd service in single node mode job definition is deleted after restart the srping xd service in single node mode repro step: 1.start service as single node 2.create a batch module 3.create a job based on batch module 4.restart service expect result: job definition is displayed on the job list actual result: job list is empty all job definitions are missed"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Update wiki to reflect the change from runtime x to cluster x update the wiki to reflect the change from: runtime containers to cluster containers and runtime modules to cluster modules."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" and similar to """"As a developer i'd like to design and document the approach towards deploying stream in a single container so i can have all modules within a stream colocated."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Simplify moduleregistry mr is responsible for looking up existing module definitions by name and type. moduledefinition should contain name type and resource where resource is a springframework.core.io.resource containing the root path of the module definition. this could be file classpath http hdfs or something else but the contents under this path will not be inspected or processed by mr. the exception is for composite modules which should contain a list of corresponding resources. simplify moduledefinition - remove classpath. provide support for compositemoduledefinition - requires a list of resources (possibly a subclass) also retire redismoduleregistry"""" is a not user story because it is most similar to: """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" and similar to """"Improve type handling for jdbc sink the jdbc sink is currently limited to handling the entire payload as a string and converting a single json object to row data. we should improve that and support the following input types: - linkedcaseinsensitivemap (single row) - list<linkedcaseinsensitivemap> (multiple rows as a batch insert) - json string {""""id"""":74488""""name"""":""""foo""""""""year"""":""""2014""""} (single row) - json array [{""""id"""":74488""""name"""":""""foo""""""""year"""":""""2014""""}{""""id"""":74489""""name"""":""""bar""""""""year"""":""""2014""""}] (multiple rows as a batch insert) - none of the above use payload.tostring() the above matches what the new jdbc source puts out (depending on outputtype used)"""" and similar to """"Further decouple message bus deps (test scope) commit https://github.com/spring-projects/spring-xd/commit/8d28b2786acbdea1617d7e903b805e5af5369b90 removed messagebus implementations from the main dirt classpath but used a trick to have tests working (basically mb classes *are* on the cp when in test scope). this story is about adding more gradle projects that support classpath isolation when running tests (and also when authoring a mb implementation). this would avoid false positives such as https://github.com/spring-projects/spring-xd/pull/1340 were lacking jars go unnoticed"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"No way to remove a job from job repository if its gone from job definitions i am trying to deploy a job i destroyed after running a few times. i removed all the jobs using job all destroy. when i try to recreate the same name job it is saying it already exists. jobcontroller.java save() method is throwing the exception if job exists in job repository database but they are gone from job definition list. these jobs were originally created using xd template rest client dynamically but that should not make any difference. this leaves me in an inconsistent state between xd definitions/job repository. how do i get rid of the job without having to log in to the database and play with the job repository tables. i had to delete data folder for myself to continue development. there should be a force mechanism to recreate a job with the same name a flag that by passes this validation against the repository or overwrites the information in the repository."""" and """"Mqtt source module does not cleanly undeploy was attempting to test mqtt turns out i don't have the proper rabbitmq thing installed. so far so good i get these kinds of exceptions: {noformat} unable to connect to server (32103) - java.net.connectexception: connection refused org.eclipse.paho.client.mqttv3.internal.tcpnetworkmodule.start(tcpnetworkmodule.java:75) org.eclipse.paho.client.mqttv3.internal.clientcomms$connectbg.run(clientcomms.java:521) java.lang.thread.run(thread.java:724) caused by: java.net.connectexception: connection refused java.net.plainsocketimpl.socketconnect(native method) java.net.abstractplainsocketimpl.doconnect(abstractplainsocketimpl.java:339) java.net.abstractplainsocketimpl.connecttoaddress(abstractplainsocketimpl.java:200) java.net.abstractplainsocketimpl.connect(abstractplainsocketimpl.java:182) java.net.sockssocketimpl.connect(sockssocketimpl.java:392) java.net.socket.connect(socket.java:579) org.eclipse.paho.client.mqttv3.internal.tcpnetworkmodule.start(tcpnetworkmodule.java:66) ... 2 more {noformat} problem is i still get them after undeploying my """"mqtt | log"""" stream"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Rename xd-config.yml to servers.yml and add modules/modules.yml to spring-xd-yarn make changes to xd on yarn config that correspond to xd-1499 changes"""" is a not user story because it is most similar to: """"The hdfs store library should support compression when writing text need to support writing text in compressed format should initially support: - bzip2 - lzo"""" and similar to """"Add jdbc source as an user i'd like to have a native _jdbc_ source module to ingest data directly from various databases."""" and similar to """"Fix support for @cliavailabilityindicator see pr https://github.com/spring-projects/spring-xd/pull/1043/"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"The user needs the ability to pause and resume triggers ad-hoc. a pause means that a trigger will wait to fire its job until after the pause is removed. it does not apply the misfire behavior."""" is a not user story because it is most similar to: """"Enable/disable boot and integration mbeans when jmx is enabled/disabled spring integration mbeans are enabled by default even though xd_jmx_enabled is set to false. we need to disable jmx on these mbeans as well as spring boot mbeans."""" and similar to """"Kafkasourcesinktests to use embedded kafka server test is failing since kafka isn't installed on the ci server. using an embedded server will make the testing more robust vs. needing an external server."""" and similar to """"Job execution list should mention jobs that have been deleted create a job execute it a couple of times destroy it and then invoke job execution list. the job name column should mention that a job is defunct (even though a job with the same name could have been re-created in the interim)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Updated xd-ec2 xd deployment for 1.2 mask out all properties for xd-ec2"""" is a not user story because it is most similar to: """"Change xd-config.yml and xd-modules-config.yml to servers.yml and modules.yml"""" and similar to """"Change accepted-media-types to accpted-content-types"""" and similar to """"Add test for filejdbc to test scripts the filejdbc jobs isn't included in the test scripts"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd requires long duration tests in order to identify potential problems that may occur if xd is running for multiple hours we need to create a long duration test regime. create an environment from which we can run both singlenode and a simple cluster (1 admin 2 container) for 24+ hours. * create 2 simple streams * http|file * file|log * send data to http source 2 times a second for 24 hours * this test should execute checkprocs every 5 minutes to capture and record the status of the xd> * record memory usage and system load."""" is a not user story because it is most similar to: """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" and similar to """"Add information that is updated in real-time for use in container matching information related to an xd-container process and/or machine that is not static such as 'group' e.g. free memory number of deployed streams should be available for use as variables in the evaluation context of the criteria spel expression in the admin's container matcher. a good candidate for the source of this information are system mbeans. see http://docs.oracle.com/javase/7/docs/api/java/lang/management/package-summary.html"""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Jobplugin - use containskey when checking for parameters use containskey when checking for parameters add tests"""" is a not user story because it is most similar to: """"Create si components that wrap reactor's tcp server"""" and similar to """"Update docs for gemfire sink to include locator configuration"""" and similar to """"Measure baseline performance of rabbitmq using perftest (in-house)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create externalized property file to support connectivity to redis we need to have an externalized property file(under xd/conf/) for the xd-container & admin scripts to use as options."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Upon a container departure redeployment of batch job fails on an existing container when there are multiple containers (a b and c) and a batch job is deployed into one of the containers a. when the container a goes down the admin server tries re-deploy the job module that was deployed in container a into other matching container. but when the re-deployment happens it tries to update the distributed job locator as if a new job is being deployed and following exception is thrown: 17:13:38811 error deploymentspathchildrencache-0 cache.pathchildrencache:550 - java.lang.runtimeexception: org.springframework.beans.factory.beancreationexception: error creating bean with name 'job': post-processing of the factorybean's object failed nested exception is org.springframework.xd.dirt.job.batchjobalreadyexistsexception: batch job with the name myjob3 already exists org.springframework.xd.dirt.server.containerregistrar.deployjob(containerregistrar.java:411) org.springframework.xd.dirt.server.containerregistrar.onchildadded(containerregistrar.java:355) org.springframework.xd.dirt.server.containerregistrar.access$8(containerregistrar.java:349) org.springframework.xd.dirt.server.containerregistrar$deploymentlistener.childevent(containerregistrar.java:695) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:494) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:488) org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92) com.google.common.util.concurrent.moreexecutors$samethreadexecutorservice.execute(moreexecutors.java:253) org.apache.curator.framework.listen.listenercontainer.foreach(listenercontainer.java:83) org.apache.curator.framework.recipes.cache.pathchildrencache.calllisteners(pathchildrencache.java:485) org.apache.curator.framework.recipes.cache.eventoperation.invoke(eventoperation.java:35) org.apache.curator.framework.recipes.cache.pathchildrencache$11.run(pathchildrencache.java:755) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask$sync.innerrun(futuretask.java:334) java.util.concurrent.futuretask.run(futuretask.java:166) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask$sync.innerrun(futuretask.java:334) java.util.concurrent.futuretask.run(futuretask.java:166) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:722) caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name 'job': post-processing of the factorybean's object failed nested exception is org.springframework.xd.dirt.job.batchjobalreadyexistsexception: batch job with the name myjob3 already exists org.springframework.beans.factory.support.factorybeanregistrysupport.dogetobjectfromfactorybean(factorybeanregistrysupport.java:167) org.springframework.beans.factory.support.factorybeanregistrysupport.getobjectfromfactorybean(factorybeanregistrysupport.java:103) org.springframework.beans.factory.support.abstractbeanfactory.getobjectforbeaninstance(abstractbeanfactory.java:1514) org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:252) org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:195) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:699) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.springapplication.refresh(springapplication.java:648) org.springframework.boot.springapplication.run(springapplication.java:311) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:241) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:186) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:176) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:166) org.springframework.xd.dirt.server.containerregistrar.deploymodule(containerregistrar.java:230) org.springframework.xd.dirt.server.containerregistrar.deployjob(containerregistrar.java:399) ... 20 more caused by: org.springframework.xd.dirt.job.batchjobalreadyexistsexception: batch job with the name myjob3 already exists org.springframework.xd.dirt.plugins.job.distributedjoblocator.addjob(distributedjoblocator.java:114) org.springframework.xd.dirt.plugins.job.batchjobregistrybeanpostprocessor.postprocessafterinitialization(batchjobregistrybeanpostprocessor.java:106) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.applybeanpostprocessorsafterinitialization(abstractautowirecapablebeanfactory.java:421) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.postprocessobjectfromfactorybean(abstractautowirecapablebeanfactory.java:1698) org.springframework.beans.factory.support.factorybeanregistrysupport.dogetobjectfromfactorybean(factorybeanregistrysupport.java:164) ... 36 more"""" and """"Create a splitter module the splitter functionality in spring integration should be exposed to xd as a processing module. the splitter should use a spel expression to specify how to split the message up. *implementation suggestions* this should be a simple xml based module definition that has input/output channels and has the spel expression parameterized. the default value of the spel expression should result in the message not being split. *how to check it works* the current file or tail input source can be used to split up the text in a file into words. the tail module should be checked to see how many lines of text it will read into memory at once. the file module node with the file-to-string transformer will only work for small files as it keep the whole file in memory. if there is a big memory inefficiency in using the tail file input source create a new story to investigate how to have a file based input source that creates a message per line of text or something that is will not result in excessive memory usage."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Hide the passwords in custom modules from being displayed. hi passwords are visibly when using custom modules. attached is example custom module code and xd-shell script to reproduce the problem using stream module of type processor on spring xd 1.2.1.release. compile with maven (mvn clean install) and run xd-shell script (xd-shell --cmdfile ./runme.cmd)."""" is a not user story because it is most similar to: """"User wants to package and deploy an xd application install a boot uberjar containing custom modules plus stream and job definitions and possibly specific configuration. this potentially includes the ability to export and import all deployable resources defined in an xd environment."""" and similar to """"Allow for late-binding of module options defaults this is about computing the value to support expressions such as ${xd.stream.name} as a default. initial discussion suggested to leverage the work done in xd-1175 by having a custom @latevalue (or @deploytimevalue etc) be resolved at deployment time"""" and similar to """"Come up with a consistent link consumption scheme on the rest client side see discussion at https://github.com/spring-cloud/spring-cloud-data/pull/37#discussion_r36849117 also relevant: http://docs.spring.io/spring-hateoas/docs/current/reference/html/#client"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add """"yarn.resourcemanager.scheduler.address"""" to mapreduce samples the mapreduce samples should have """"yarn.resourcemanager.scheduler.address"""" since it might be needed in a multi node production cluster."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix module type guessing heuristics commit 96de9fcfaf32719413015a1a6bace1b30b6b9610 strengthened module type inference but some corner cases remain (marked as todos and commented out assertions in tests). to be effective we need to look at the whole deployed stream (or composed module). modify parsincontext accordingly."""" is a not user story because it is most similar to: """"Admin leader should watch zookeeper for stream deployment requests the stream deployment requests will be written to /xd/streams/streamname and the data on that node will include the state or a boolean indicator (for now) of whether it should be deployed. when a stream is deployed the leader will consult its container cache and write the modules to the various /xd/deployments child nodes (see xd-1400)."""" and similar to """"Make transport serialization configurable the refactoring done for m6 prevents overriding """"codec"""" bean configured for messagebus. since mb is now in sharedservercontext that context can only be altered by a custom orderedcontextinitializer for example. there is currently no mechanism provided by the bootstrapcontext for dynamically loading a user's orderedcontextinitializer."""" and similar to """"Ui: refactor schedule and launch screen under deployments the current screen layout is problematic in cases where there are many deployments. having a dedicated page for launching or scheduling jobs may be desirable. alternatively a light-box-based approach may be possible but i personally don't favor that."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Replace 'anonymous' node in xd module bean names enhance bean naming strategy or provide a value for the property that binds to this"""" is a user story, and is worth 2 story points because it is most similar to: As a s-c-s user i'd like to have my modules add/update it's current state to eureka so i can use the repository to discover the current sate of the module as needed. and similar to """"As a user i'd like to have a config parameter preferably in _servers.yml_ file so that i can enable/disable message rates in the cluster view."""" and similar to """"As a user i'd like to have the ability to visually explore xd's cluster view so that i'm aware where the components are deployed and how they are connected within the topology."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Refactor module dependency tracking to be closer to stream deployment see comments on this pr (which is part of the code that needs to be refactored): https://github.com/spring-projects/spring-xd/pull/390"""" is a not user story because it is most similar to: """"Spike: research request/reply support to kafka message bus the scope is to research the available options to provide request/reply support for kafka. * document findings * pocs previous desc: the bindrequestor and bindreplier methods of the message bus need to be implemented."""" and similar to """"Spark streaming module executor use getmessagebuilderfactory(beanfactory) we need to use getmessagebuilderfactory(beanfactory) to initialize messagebuilder in spark streaming module executor. please see the discussion: https://github.com/spring-projects/spring-xd/pull/1454/files#r24367825"""" and similar to """"Integrate code coverage reports into the ci process not sure if this is best done via sonar our sonar build plan the nightly one or the frequent one off master... open question is if we want to fail a build do to code coverage levels."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Rest: """"jobs/configurations"""" returns 404 if one job has error there is a bug in the deployments rest end-point. *how to reproduce:* * deploy a batch job (success) that for example does not all necessary libraries in the class-patch and thus causes a “java.lang.classnotfoundexception�? *result:* you cannot retrieve the list of deployments list anymore using: * http://localhost:9393/jobs/configurations the rest endpoint will now report: [{""""links"""":[]""""logref"""":""""nosuchbatchjobexception""""""""message"""":""""batch job with the name myjob doesn't exist""""}] this message is not entirely wrong…but extremely misleading. i think we should still return the entire list and rather mark the job as having an error. also returning an “404 not found�? is misleading as well."""" is a not user story because it is most similar to: """"Update launcher.xml to have protocol independent beans defined and an import statement to load protocol specific defintiions from a system property defined location. launcher.xml can make use of the system property xd.pipeprotocol inside an import statement. this determines which version of the xd infrastructure to load for example what channelregistry implementation local or redis based or specific message listener containers. file name conventions should be used so if the option passed in from the command line is --pipeprotocol localchannel then the xml filename looked for has the 'protocol' suffix applied e.g. localchannelprotocol and is loaded via the classpath. redis and local will not be the only options other implementations will be provided in the future e.g. rabbit and the user may be able to provide their own implementations of these infrastructure classes (an advanced task)."""" and similar to """"Applicationcontext id generation applicationcontext id generation is difficult in general. cloud foundry solves this problem for us by providing unique instance ids to all running instances of an app. i don't suppose that helps much in the general case though and we need something (a rule of thumb) that is unique and preferably deterministic so that nodes retain their id across process and connector restarts. in cloud foundry the instance id plays a vital role (and will be automatically picked up by the app and applied - need to look at how that plays in a context hierarchy). user can set the context id manually using {{spring.application.name}} and {{spring.application.index}}."""" and similar to """"Ui needs to handle the finer-grained deployment statuses addressed for the rest api by xd-1848 the status of a stream as returned by the rest api (and thus the shell also) may now contain any of the following states: * deploying (deployment has been initiated) * deployed (fully deployed based on each of the stream's modules' count properties) * incomplete (at least 1 of each module but 1 or more of them not at requested capacity) * failed (1 or more of the modules does not have even a single instance deployed) * undeployed (intentionally undeployed or created but not yet deployed)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Spelparseexception is thrown when using empty string ("""""""") inside of an expression i can only reproduce this when using single quotes around the expression: {code} stream create test --definition """"http | transform --expression='payload.replace(\""""abc\"""" \""""\"""")' | log"""" --deploy true {code} the following two alternatives work fine though: {code} # using trim on a single space stream create test --definition """"http | transform --expression='payload.replace(\""""abc\"""" \"""" \"""".trim())' | log"""" --deploy true # not using single quotes or spaces in the expression stream create test --definition """"http | transform --expression=payload.replace(\""""abc\""""\""""\"""") | log"""" --deploy true {code}"""" is a user story, and is worth 5 story points because it is most similar to: As a build manager i'd like to setup ci infrastructure so that i can run integration tests in windows os automatically as we commit-trigger new builds. *scope:* * use the environment where bamboo is running * gain access to powershell * setup services (redis rabbit etc.) * kick-off ci task and similar to """"As a spring xd user i'd like to persist module (aka: {{cf apps}}) metrics directly so i can relay that information via rest-apis and not depend on the current coupling of {{xd-container}}'s. currently sboot's {{export()}} api allows us to snapshot metrics (default = {{redis}}) on a specific interval (default = {{5s}}). this could be something to explore as part of this scope."""" and similar to """"As a user i'd like to have a common shared location so that i can place the dependent jar's that are required by 2 or more custom modules. *current recommendation:* * place the dependent jar under xd/lib folder * if it necessary to support different versions of jar's then bundle it in custom module to get around the _classloader_ problem if a older/newer version exist in xd/lib"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update to spring boot rc5"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Merge abstractstreamdeploymentintegrationtests and abstractsinglenodestreamdeploymentintegrationtests we do not need two base classes for this"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Parser should only allow one label instance per module"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Rabbit source and sink mappedrequestheaders should include all headers by default currently it is necessary to specify mappedrequestheaders=* on the rabbit sink otherwise no headers are mapped to amqp. this should be the default behavior."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources. and similar to """"As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Resourcemoduleregistry doesn't support ha namenode for hdfs custom module location as an xd module developer i would like to use hdfs for my custom module location even when my namenode is configured for ha. we had an issue filed in the `spring-xd-ambari` project: """"it seems like custom module doesn't pickup namenode ha? and still use namenodeproxies.createnonhaproxy?"""" see: https://github.com/spring-projects/spring-xd-ambari/issues/14"""" is a not user story because it is most similar to: """"Create an embedded zookeeper server process this will be used by singlenodeapplication if no zookeeper process is available based on the provided client connect string. it will still be recommended that user's run zookeeper externally at least in standalone mode when running singlenodeapplication. we should clarify that in the documentation and logs. it should implement smartlifecycle so that it can be managed as a bean within an applicationcontext."""" and similar to """"Provide a way to access currently deployed modules for testing it would be useful to access the deployed module instances to connect sources and or sinks to a module's input and output channels etc. this could be a simple as exposing the deployedmodulemap on moduledeployer or possibly something more elaborate if this level of granularity is generally useful for runtime administration."""" and similar to """"Make requirement for md5 hash files configurable for the custom module registry post 1.2 upgrade the custom modules no longer show up by just copying the jars to the {{xd.custommodule.home}} directory. instead i have to use the 'module upload' command to install the modules. this is because an md5 file is required. more details in [so thread|http://stackoverflow.com/questions/31792220/spring-xd-1-2-0-custom-module-deployment]."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Messagechannelitemwriter h2. narrative as a user of xd i want to be able to use a job as a source. to do so we need the output of a job to be written to a message channel h2. acceptance criteria # create a new itemwriter in the spring batch project to write to a spring integration message channel."""" is a user story, and is worth 8 story points because it is most similar to: As a performance tester i'd like to investigate why there's high cpu startup time for both admin and container servers. perhaps profiling would assist isolating the bottlenecks. *scope:* * identify the bottlenecks * document reasons * list pros/cons and similar to """"As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables"""" and similar to """"As a s-c-d developer i'd like to provide optional key-value pairs as deployment properties so i could leverage them at the runtime to instruct how the modules will be deployed. _the scope of this story is to specifically support {{count}} to represent {{n}} instances of modules that share the same environment variables._"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Replace testsource with time and testsink with log this should facilitate testing while avoiding any class dependencies. also log is a generally useful sink by itself and time is a more interesting source for testing (should accept --interval for the seconds between time messages)."""" is a not user story because it is most similar to: """"Remove hadoop distro enum options please see the discussion here: https://github.com/spring-projects/spring-xd/pull/655/files#r10892925"""" and similar to """"Create runtimemoduledescriptor that represents runtime module instance see this for more info: https://github.com/spring-projects/spring-xd/pull/1021/files#r14611854"""" and similar to """"Documentation for """"http | file"""" processing put on the guide as a section in an 'input sources' wiki page. https://github.com/springsource/spring-xd/wiki/guidegettingstarted"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create shell integration tests for tap lifeycle creating taps deleting"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a spring xd developer i'd like to create a section on migration strategy from {{1.2}} to {{1.3}} releases so i can document new improvements and backward incompatibility specifics."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add contributing.md file add contributing.md file use the spring integration file as the basis."""" is a not user story because it is most similar to: """"All parameters for modules need to use """"hump case"""" formerly camel hump"""" and similar to """"In documentation replace usage of 'raw' hadoop command with shell 'hadoop' commands"""" and similar to """"Scs - split kryo implementation to spring-cloud-streams-codec-kryo"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Jmx mbean name clash when using labels with s-c-d deployment we need to make sure that jmx mbean names are unique even in the case of labeled modules. the following stream fails for example: """"http | filter | filter2: filter | log"""" a good candidate could be stream name (group) + module label."""" is a not user story because it is most similar to: """"Automate execution of gradle pushgenerateddocs should be part of the daily build. one """"easy"""" way to do it would be to use the """"hardcoded"""" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though"""" and similar to """"Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Create documentation section on best practices this should include some guidance on setting rabbit message bus paramters relating to prefetch and concurrency. it should also discuss the 'bypass' functionality - or reference another section that covers it. we should probably include how to scale out http sources e.g. the need to use a load balancer."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Tuplebuilder.fromstring() should not overwrite original id and timestamp fields when converting a json string to a tuple the json may contain id. this method should handle this. same with timestamp"""" is a user story, and is worth 8 story points because it is most similar to: As a user i should be able to leverage native _websocket_ sink so that i can take the advantage of full-duplex communications channels over a single tcp connection. and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Rest - do not redirect after logout in the following pr we removed the *restlogoutsuccesshandler*. https://github.com/spring-projects/spring-xd/pull/1562 this is necessary though for rest calls and the admin ui. otherwise some weird ui behavior might occur due to the http redirect."""" is a not user story because it is most similar to: """"Update reactor stream processor to use latest snapshots the code base is changing a bit so using 2.0 m1 for development is stable up until all major jira issues have bee completed. then we should track snapshots in preparation to move to 2.0. m2 when it gets released."""" and similar to """"Tapping a stream with multiple labelled filters causes duplicate messages test case is here: https://github.com/spring-projects/spring-xd/blob/master/src/test/scripts/basic_stream_tests#l49 we would expect one message in the counter but get 3."""" and similar to """"Retrieve information for a gauge todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Merge module.type and moduletype also likely rename remove or replace that module (maybe can be supplanted by moduledescriptor when used in the refactored parser). also considering the """"url"""" property is not necessary (vestige of the prototype) all we'd be left with here is the module name and type which are used to identify a module uniquely. therefore this module could be renamed to modulekey or something. it could be used within the streamdefinition itself (e.g. getdescriptor(modulekey))."""" and """"Change module placeholder names and remove context:property-placeholder usage e.g. rabbit.xml source. <context:property-placeholder location=""""${xd.config.home}/${configproperties:rabbit}.properties"""" ignore-resource-not-found=""""true"""" /> would be removed and <rabbit:connection-factory id=""""rabbitconnectionfactory"""" host=""""${host:${spring.rabbitmq.host:localhost}}"""" port=""""${port:${spring.rabbitmq.port:5672}}"""" virtual-host=""""${vhost:${spring.rabbitmq.virtualhost:/}}"""" username=""""${username:${spring.rabbitmq.username:guest}}"""" password=""""${password:${spring.rabbitmq.password:guest}}""""/> would look like port=""""${port}"""" and a property file in the module directory or pojo in the module lib would specify the default value of the port. for pojo it would be options_class = org.springframework.xd.dirt.modules.metadata.rabbitsourceoptionsmetadata for property file it would be option.port.default=5672 option.port.description=""""cool port number"""" this needs to be consistently done across all the modules."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Upgrade sdr to get rid of temporary no-op serializer spring data redis 1.1 m2 added the ability to use redistemplate with binary data. we should switch to that instead of the no-op serializer we were forced to implement previously."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1 and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" and similar to """"As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create ec2 ami for single-node install of apache hadoop 2.2.0"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd:>runtime modules gives error from cli xd:>runtime modules command failed org.springframework.xd.rest.client.impl.springxdexception: java.lang.runtimeexception: org.apache.zookeeper.keeperexception$nonodeexception: keepererrorcode = nonode for /xd/deployments/modules/4dc55d87-125b-4e4a-a76e-82bb6980820d/ticktock.sink.log-1/metadata this is on osx running in distributed mode with --transport rabbit --hadoopdistro hadoop22 redis 2.8.8 rabbit 3.2.3 hadoop 2.2.0 and zookeeper 3.4.5."""" is a not user story because it is most similar to: """"Consider using the conversionservice to convert incoming message payload to reactor based processor's input type. in {noformat} broadcastermessagehandler.handlemessageinternal {noformat} the call {code:java} } else if (classutils.isassignable(inputtype message.getpayload().getclass())) { //todo handle type conversion of payload to input type if possible ringbufferprocessor.onnext(message.getpayload()) {code} could try to invoke a conversion service"""" and similar to """"Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice"""" and similar to """"More dsl work: using and policing & for job step lists the new parser supports | for connecting regular modules and & for connecting job steps. the modules in the ast that were connected with & are tagged but nothing is currently using that information (it doesnt get into the module deployment request). we need to think about using this data: policing the modules that are being deployed to ensure they are job steps for example."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Merge container and containermetadata as well as their """"repositories"""" the two classes in question are: * org.springframework.xd.dirt.cluster.container * org.springframework.xd.dirt.container.containermetadata the former is currently used by the admin when making decisions about module deployment. that latter was a replacement for runtimecontainerinforentity as we migrated the various redis/inmemory repositories to use the data that is now available in zookeeper instead. the containerrepository is currently used by the admin leader and the containermetadatarepository is used by the rest endpoint that supports the xd-shell's 'runtime containers' command. perhaps those can also be merged. in any case if not addressed by a larger refactoring the containerrepository should probably support an iterable return rather than an iterator. having finders (e.g. for attribute key/values such as """"group""""==""""foo"""") might be convenient for various module deployment strategies."""" is a not user story because it is most similar to: """"Spring xd ec2 needs to setup cluster that uses static resources. h1. summary user wants the ability to deploy an ec2 cluster where the admin & containers use a pre existing zk ensemble rabbit and redis instance that are deployed on different machines. h2. current functionality currently spring-xd-ec2 sets up its containers & admin server to use a zk rabbit and redis that are provisioned and collocated with the admin server. h2. detail the following properties will be added to the spring-xd-ec2.properties # *spring_zk_client_connect* - contains a comma delimited list of zk hosts:ports for a ensemble. the application will check to see if the port is open on at least of the servers in the list if not deployment will fail. default is adminserver_host:2181. # *spring_rabbitmq_addresses* - contains a comma delimited list of hosts:ports for a rabbit cluster. the application will check to see if the port is open on at least of the servers in the list if not deployment will fail. default is adminserver_host:5672. # *spring_redis* - contains a host:port for a redis instance. the application will check to see if the port is open if not deployment will fail. default is adminserver_host:5672. # *ec2_zone* - user can specify the zone to which the containers and admin will be deployed. if not present aws will decide which zone to deploy the cluster."""" and similar to """"Installer needs to launch a single node xd instance * create a deployer class has methods ** runninginstance deploysinglenode *** takes into account machine size as specified in properties file ** void destroyallinstances() *** or whatever jclouds returns from the destroy call ** ctor gets passed in the root boostrapping credentials. * install script steps ** setup xd_home variable ** make sure privileges are set to ubuntu not root. ** start up redis and rabbit using ports as specified in xd-ec2.properties ** use port watch to make sure they started ** start singlenode after configuration. ** display hostname of singlenode server ** report successful and failed startup ** hit root of xd-admin to see if there is a response on 9393 * integration testing ** verify that config files have been setup ** verify xd has been started ** verify xd can process a basic http post"""" and similar to """"Filejdbc job throws exception during acceptance tests currently the testfilejdbcjobmultipleinvocations fails on line 156 stating data is different in table that what is expected. currently this is failing on the single admin/container deployment using redis as a transport. also seeing the following exception in the attached log: {noformat} 2.0.0.snap error xdbus.job:ec2job3.0.requests-1 step.abstractstep - encountered an error executing step step1 in job ec2job3 org.springframework.batch.item.itemstreamexception: failed to initialize the reader ... caused by: java.lang.illegalstateexception: input resource must exist (reader is in 'strict' mode): url [file:/tmp/xd/output/filejdbctest/filejdbctest1.out] {noformat} the file is should be present and data present for the test. at least according to the checker on ec2 and local deployments."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Tapcommandtests hangs when using a lazily instantiated lettuce connection a change was made in spring-data-redis to instantiate the shared lettuce connection lazily instead of when the context is initialized. this caused tapcommandtests to hang due to a netty worker thread trying to initialize the lettuce connection (lettuce uses netty). the change was temporarily backed out of sdr but we need to consider using a nettyexecutionhandler in nettyhttpinboundchanneladapter or making the http module's """"input"""" channel an executorchannel to avoid potentially long operations like from happening in an i/o thread. also we need to address why this failure simply hangs the shell. shell was hung waiting on io here: org.springframework.http.client.simpleclienthttpresponse.getrawstatuscode(simpleclienthttpresponse.java:47) org.springframework.http.client.abstractclienthttpresponse.getstatuscode(abstractclienthttpresponse.java:32) org.springframework.xd.shell.command.httpcommands$1.haserror(httpcommands.java:93) org.springframework.web.client.resttemplate.doexecute(resttemplate.java:484) org.springframework.web.client.resttemplate.execute(resttemplate.java:460) org.springframework.web.client.resttemplate.postforentity(resttemplate.java:335) org.springframework.xd.shell.command.httpcommands.posthttp(httpcommands.java:103) sun.reflect.generatedmethodaccessor135.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) java.lang.reflect.method.invoke(method.java:597) org.springframework.util.reflectionutils.invokemethod(reflectionutils.java:191) org.springframework.shell.core.simpleexecutionstrategy.invoke(simpleexecutionstrategy.java:64) ringframework.shell.core.simpleexecutionstrategy.execute(simpleexecutionstrategy.java:57) - locked <7fd3c7d40> (a java.lang.class for org.springframework.shell.core.simpleexecutionstrategy) org.springframework.shell.core.abstractshell.executecommand(abstractshell.java:127) org.springframework.xd.shell.abstractshellintegrationtest.executecommand(abstractshellintegrationtest.java:99) org.springframework.xd.shell.abstractshellintegrationtest.httppostdata(abstractshellintegrationtest.java:112) org.springframework.xd.shell.command.tapcommandtests.testcreateanddeploytap(tapcommandtests.java:56) full stack trace of server exception: aug 19 2013 9:59:00 am org.jboss.netty.channel.simplechannelupstreamhandler warning: exception please implement org.springframework.integration.x.http.nettyhttpinboundchanneladapter$handler.exceptioncaught() for proper handling. org.springframework.integration.messagehandlingexception: org.springframework.data.redis.redisconnectionfailureexception: unable to connect to redis on localhost:6379 nested exception is com.lambdaworks.redis.redisexception: unable to connect org.springframework.integration.handler.methodinvokingmessageprocessor.processmessage(methodinvokingmessageprocessor.java:76) org.springframework.integration.handler.serviceactivatinghandler.handlerequestmessage(serviceactivatinghandler.java:67) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:137) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:223) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:207) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:172) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:166) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:144) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:223) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:207) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:172) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:166) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:144) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:223) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:207) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:172) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:166) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:144) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.broadcastingdispatcher.invokehandler(broadcastingdispatcher.java:121) org.springframework.integration.dispatcher.broadcastingdispatcher.dispatch(broadcastingdispatcher.java:112) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.interceptor.wiretap.presend(wiretap.java:121) org.springframework.integration.channel.abstractmessagechannel$channelinterceptorlist.presend(abstractmessagechannel.java:248) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:173) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:223) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:207) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:172) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:166) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:144) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:178) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:149) org.springframework.integration.core.messagingtemplate.dosend(messagingtemplate.java:304) org.springframework.integration.core.messagingtemplate.send(messagingtemplate.java:165) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:92) org.springframework.integration.x.http.nettyhttpinboundchanneladapter.access$200(nettyhttpinboundchanneladapter.java:59) org.springframework.integration.x.http.nettyhttpinboundchanneladapter$handler.messagereceived(nettyhttpinboundchanneladapter.java:122) org.jboss.netty.handler.codec.http.httpcontentencoder.messagereceived(httpcontentencoder.java:81) org.jboss.netty.handler.codec.http.httpchunkaggregator.messagereceived(httpchunkaggregator.java:148) org.jboss.netty.channel.channels.firemessagereceived(channels.java:296) org.jboss.netty.handler.codec.frame.framedecoder.unfoldandfiremessagereceived(framedecoder.java:459) org.jboss.netty.handler.codec.replay.replayingdecoder.calldecode(replayingdecoder.java:536) org.jboss.netty.handler.codec.replay.replayingdecoder.messagereceived(replayingdecoder.java:485) org.jboss.netty.channel.channels.firemessagereceived(channels.java:268) org.jboss.netty.channel.channels.firemessagereceived(channels.java:255) org.jboss.netty.channel.socket.nio.nioworker.read(nioworker.java:88) org.jboss.netty.channel.socket.nio.abstractnioworker.process(abstractnioworker.java:107) org.jboss.netty.channel.socket.nio.abstractnioselector.run(abstractnioselector.java:312) org.jboss.netty.channel.socket.nio.abstractnioworker.run(abstractnioworker.java:88) org.jboss.netty.channel.socket.nio.nioworker.run(nioworker.java:178) java.util.concurrent.threadpoolexecutor$worker.runtask(threadpoolexecutor.java:895) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:918) java.lang.thread.run(thread.java:680) caused by: org.springframework.data.redis.redisconnectionfailureexception: unable to connect to redis on localhost:6379 nested exception is com.lambdaworks.redis.redisexception: unable to connect org.springframework.data.redis.connection.lettuce.lettuceconnectionfactory.createlettuceconnector(lettuceconnectionfactory.java:345) org.springframework.data.redis.connection.lettuce.lettuceconnectionfactory.initconnection(lettuceconnectionfactory.java:116) org.springframework.data.redis.connection.lettuce.lettuceconnectionfactory.getsharedconnection(lettuceconnectionfactory.java:325) org.springframework.data.redis.connection.lettuce.lettuceconnectionfactory.getconnection(lettuceconnectionfactory.java:106) org.springframework.data.redis.core.redisconnectionutils.dogetconnection(redisconnectionutils.java:81) org.springframework.data.redis.core.redisconnectionutils.getconnection(redisconnectionutils.java:53) org.springframework.data.redis.core.redistemplate.execute(redistemplate.java:173) org.springframework.data.redis.core.redistemplate.execute(redistemplate.java:153) org.springframework.data.redis.core.abstractoperations.execute(abstractoperations.java:86) org.springframework.data.redis.core.defaultzsetoperations.add(defaultzsetoperations.java:41) org.springframework.data.redis.core.defaultboundzsetoperations.add(defaultboundzsetoperations.java:47) org.springframework.xd.store.abstractredisrepository.trackmembership(abstractredisrepository.java:202) org.springframework.xd.analytics.metrics.redis.rediscounterrepository.increment(rediscounterrepository.java:88) org.springframework.xd.analytics.metrics.redis.rediscounterrepository.increment(rediscounterrepository.java:82) org.springframework.xd.analytics.metrics.integration.messagecounterhandler.process(messagecounterhandler.java:28) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) java.lang.reflect.method.invoke(method.java:597) org.springframework.expression.spel.support.reflectivemethodexecutor.execute(reflectivemethodexecutor.java:69) org.springframework.expression.spel.ast.methodreference$methodvalueref.getvalue(methodreference.java:97) org.springframework.expression.spel.ast.compoundexpression.getvalueinternal(compoundexpression.java:82) org.springframework.expression.spel.ast.spelnodeimpl.gettypedvalue(spelnodeimpl.java:102) org.springframework.expression.spel.standard.spelexpression.getvalue(spelexpression.java:103) org.springframework.integration.util.abstractexpressionevaluator.evaluateexpression(abstractexpressionevaluator.java:126) org.springframework.integration.util.messagingmethodinvokerhelper.processinternal(messagingmethodinvokerhelper.java:230) org.springframework.integration.util.messagingmethodinvokerhelper.process(messagingmethodinvokerhelper.java:129) org.springframework.integration.handler.methodinvokingmessageprocessor.processmessage(methodinvokingmessageprocessor.java:73) ... 84 more caused by: com.lambdaworks.redis.redisexception: unable to connect com.lambdaworks.redis.redisclient.connect(redisclient.java:176) com.lambdaworks.redis.redisclient.connectasync(redisclient.java:139) org.springframework.data.redis.connection.lettuce.lettuceconnectionfactory.createlettuceconnector(lettuceconnectionfactory.java:339) ... 111 more caused by: java.lang.illegalstateexception: await*() in i/o thread causes a dead lock or sudden performance drop. use addlistener() instead or call await*() from a different thread. org.jboss.netty.channel.defaultchannelfuture.checkdeadlock(defaultchannelfuture.java:342) org.jboss.netty.channel.defaultchannelfuture.await(defaultchannelfuture.java:231) com.lambdaworks.redis.redisclient.connect(redisclient.java:166) ... 113 more"""" and """"Failure to get message rates for modules with labels. start xd distributed xd with specified management port and xd: messageratemonitoring: enabled: true in servers.yml to gather stats. create stream {{file | log}} deploy it navigate to containers tab in admin ui. rates are shown correctly. create stream {{myfile: file | log}} deploy it navigate to containers tab in admin ui - none of the message rates are shown. open browser dev tools console and note 500 error response. spring-xd-dirt -> containerscontroller lines 109-112 creates request to get message rates for modules. typical request: {{http://192.168.0.10:9292/management/jolokia/read/xd.str4:module=log.*component=*name=input/meansendrate}} typical response: {code:json} {""""request"""":{""""mbean"""":""""xd.str4:component=*module=log.1name=input""""""""attribute"""":""""meansendrate""""""""type"""":""""read""""}""""value"""":{""""xd.str4:component=messagechannelmodule=log.1name=input"""":{""""meansendrate"""":0.0}}""""timestamp"""":1428675070""""status"""":200} {code} for file module with label `myfile` the request is: {{http://192.168.0.10:9292/management/jolokia/read/xd.str4:module=myfile.*component=*name=output/meansendrate}} response: {code:json} {""""mbean"""":""""xd.str4:component=*module=myfile.1name=output""""""""attribute"""":""""meansendrate""""""""type"""":""""read""""}""""stacktrace"""":""""javax.management.instancenotfoundexception: no mbean with pattern xd.str4:module=myfile.1component=*name=output found for reading attributes\n\tat org.jolokia.handler.readhandler.searchmbeans(readhandler.java:160)\n\tat org.jolokia.handler.readhandler.fetchattributesformbeanpattern(readhandler.java:126)\n\tat org.jolokia.handler.readhandler.dohandlerequest(readhandler.java:116)\n\tat org.jolokia.handler.readhandler.dohandlerequest(readhandler.java:37)\n\tat org.jolokia.handler.jsonrequesthandler.handlerequest(jsonrequesthandler.java:160)\n\tat org.jolokia.backend.mbeanserverhandler.dispatchrequest(mbeanserverhandler.java:97)\n\tat org.jolokia.backend.localrequestdispatcher.dispatchrequest(localrequestdispatcher.java:98)\n\tat org.jolokia.backend.backendmanager.callrequestdispatcher(backendmanager.java:411)\n\tat org.jolokia.backend.backendmanager.handlerequest(backendmanager.java:158)\n\tat org.jolokia.http.httprequesthandler.executerequest(httprequesthandler.java:197)\n\tat org.jolokia.http.httprequesthandler.handlegetrequest(httprequesthandler.java:86)\n\tat org.jolokia.http.agentservlet$4.handlerequest(agentservlet.java:435)\n\tat org.jolokia.http.agentservlet.handlesecurely(agentservlet.java:320)\n\tat org.jolokia.http.agentservlet.handle(agentservlet.java:291)\n\tat org.jolokia.http.agentservlet.doget(agentservlet.java:252)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:735)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:848)\n\tat org.springframework.web.servlet.mvc.servletwrappingcontroller.handlerequestinternal(servletwrappingcontroller.java:158)\n\tat org.springframework.web.servlet.mvc.abstractcontroller.handlerequest(abstractcontroller.java:146)\n\tat org.springframework.boot.actuate.endpoint.mvc.jolokiamvcendpoint.handle(jolokiamvcendpoint.java:130)\n\tat sun.reflect.generatedmethodaccessor82.invoke(unknown source)\n\tat sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)\n\tat java.lang.reflect.method.invoke(method.java:483)\n\tat org.springframework.web.method.support.invocablehandlermethod.doinvoke(invocablehandlermethod.java:221)\n\tat org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:137)\n\tat org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:110)\n\tat org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:777)\n\tat org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:706)\n\tat org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:85)\n\tat org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:943)\n\tat org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:877)\n\tat org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:966)\n\tat org.springframework.web.servlet.frameworkservlet.doget(frameworkservlet.java:857)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:735)\n\tat org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:842)\n\tat javax.servlet.http.httpservlet.service(httpservlet.java:848)\n\tat org.eclipse.jetty.servlet.servletholder.handle(servletholder.java:684)\n\tat org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1496)\n\tat org.springframework.security.web.filterchainproxy.dofilterinternal(filterchainproxy.java:186)\n\tat org.springframework.security.web.filterchainproxy.dofilter(filterchainproxy.java:160)\n\tat org.eclipse.jetty.servlet.servlethandler$cachedchain.dofilter(servlethandler.java:1467)\n\tat org.eclipse.jetty.servlet.servlethandler.dohandle(servlethandler.java:499)\n\tat org.eclipse.jetty.server.handler.scopedhandler.handle(scopedhandler.java:137)\n\tat org.eclipse.jetty.security.securityhandler.handle(securityhandler.java:557)\n\tat org.eclipse.jetty.server.session.sessionhandler.dohandle(sessionhandler.java:231)\n\tat org.eclipse.jetty.server.handler.contexthandler.dohandle(contexthandler.java:1086)\n\tat org.eclipse.jetty.servlet.servlethandler.doscope(servlethandler.java:428)\n\tat org.eclipse.jetty.server.session.sessionhandler.doscope(sessionhandler.java:193)\n\tat org.eclipse.jetty.server.handler.contexthandler.doscope(contexthandler.java:1020)\n\tat org.eclipse.jetty.server.handler.scopedhandler.handle(scopedhandler.java:135)\n\tat org.eclipse.jetty.server.handler.handlerwrapper.handle(handlerwrapper.java:116)\n\tat org.eclipse.jetty.server.server.handle(server.java:370)\n\tat org.eclipse.jetty.server.abstracthttpconnection.handlerequest(abstracthttpconnection.java:494)\n\tat org.eclipse.jetty.server.abstracthttpconnection.headercomplete(abstracthttpconnection.java:971)\n\tat org.eclipse.jetty.server.abstracthttpconnection$requesthandler.headercomplete(abstracthttpconnection.java:1033)\n\tat org.eclipse.jetty.http.httpparser.parsenext(httpparser.java:644)\n\tat org.eclipse.jetty.http.httpparser.parseavailable(httpparser.java:235)\n\tat org.eclipse.jetty.server.asynchttpconnection.handle(asynchttpconnection.java:82)\n\tat org.eclipse.jetty.io.nio.selectchannelendpoint.handle(selectchannelendpoint.java:667)\n\tat org.eclipse.jetty.io.nio.selectchannelendpoint$1.run(selectchannelendpoint.java:52)\n\tat org.eclipse.jetty.util.thread.queuedthreadpool.runjob(queuedthreadpool.java:608)\n\tat org.eclipse.jetty.util.thread.queuedthreadpool$3.run(queuedthreadpool.java:543)\n\tat java.lang.thread.run(thread.java:744)\n""""""""error_type"""":""""javax.management.instancenotfoundexception""""""""error"""":""""javax.management.instancenotfoundexception : no mbean with pattern xd.str4:module=myfile.1component=*name=output found for reading attributes""""""""status"""":404} {code} this reponse results in jsonexception in the containerscontroller because it's missing 'value' property. the module id is somewhat problematic in the request: {{xd.str4:module=log.*}} index is {{\*}} but should be index within the stream also node type (source/sink/processor) is missing. therefore stream {{mail | mail}} is suffering from the same problem. would be nice to have some sort of a bulk request to query more than one module for input/output message rates such that i could get all message rates for modules in the stream."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Bump spring integration to 4.1.2 spring amqp to 1.4.2"""" and """"Rename spring-xd-shell to xd-shell"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Yarn environment for xd acceptance tests create an 2.6 yarn environment on ec2 for which xd can be deployed for acceptance tests."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update settings file and reformat existing codebase. please put in suggestions for the current .settings file. maybe one suggestion is to not format on save?"""" is a not user story because it is most similar to: """"Avoid duplication when loading streams for deployment see: containerlistener.loadstream() and streamlistener.onchildadded(). both require the stream definition as well as stream deployment manifest."""" and similar to """"Modify startup script of xdadmin/xdcontainer to allow specifying hadoop distro to use we need to modify startup script to use hadoop 1.1.2 as default or phd1 when specified with --hadoopdistro=phd1"""" and similar to """"Complete camera ready debs submission complete and submit debs 2015 paper as described here: http://www.debs2015.org/camera-ready-instructions.html"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Decouple messagebus dependencies *refactoring scope:* (_spring-xd-dirt_) * message bus dependencies the goal is to decouple them from startup phase to further enhance initialization time."""" is a not user story because it is most similar to: """"Add create() and deploy() methods to jobdeployer see https://docs.google.com/a/gopivotal.com/drawings/d/1kcnbvsprbjgc10itf9cskwst8wgcjgg3wgzfkqlcazu/edit create the deployer if it doesn't exist."""" and similar to """"Add create() and deploy() methods to streamscontroller see https://docs.google.com/a/gopivotal.com/drawings/d/1kcnbvsprbjgc10itf9cskwst8wgcjgg3wgzfkqlcazu/edit create optionally deploys"""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Configuration for rabbitmq message bus concurrent consumers by having the configuration option for concurrent consumers would help improve the performance of message consumption by the consumer modules when the ordering of the incoming messages don't matter."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to add support for having different binder types for module's channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively. and similar to """"As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed."""" and similar to """"As a user i want to configure docker xd containers using service discovery so that i can have tools to manage how processes and services in a cluster can find and talk to one another."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Tcp-client reports error when using --close=true flag when using the --close=true flag for the tcp-client the following exception is triggered. caused by: java.lang.illegalargumentexception: for client-mode connection factory must have single-use='false' org.springframework.util.assert.istrue(assert.java:65) org.springframework.integration.ip.tcp.tcpreceivingchanneladapter.oninit(tcpreceivingchanneladapter.java:96) org.springframework.integration.context.integrationobjectsupport.afterpropertiesset(integrationobjectsupport.java:135) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.invokeinitmethods(abstractautowirecapablebeanfactory.java:1627) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.initializebean(abstractautowirecapablebeanfactory.java:1564)"""" is a not user story because it is most similar to: """"Vary prefetch size (db-3) use a single producer single consumer message size of 1000 bytes. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the prefetch size. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *prefetch sizes:* * 1 * 10 * 50 * 100 * 10000 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Improvements to tuple project removed various todo comments in code and put here for proper triage. defaulttuple * error handling. when delegating to the conversion service the conversionfailedexception does not have the context of which key caused the failure. need to wrap conversionfailedexception with illegalargumentexception and add that context back in. (see method convert) * ctor visibility. consider making ctor final and package protect the ctor so as to always use tuplebuilder * check for no duplicate values when initializing names/values list tuple. * top level methods to add. string getcomponentname... somethign that would indicate which stream or job this tuple is being processed in.... * tuplefieldsetmapper only one date format? * jsonstringtotupleconverter/jsonnodetotupleconverter * do we want to not map id and timestamp (believe the answer is don't map preserve original)"""" is a not user story because it is most similar to: """"Springxd's syslog source does not fully support syslog rfc5424 springxd's syslog source cannot parse rfc5424 messages into a map. for the messages we get in rfc 3164 springxd converts these to a map. since the rfc5424 data cannot be interpreted then the map contains just one key called 'undecoded'. the result of this is that we get a string that looks like this (when we convert the message to a string) {code} {undecoded=<182>dec 02 2014 07:56:35: %asa-6-113008: aaa transaction status accept : user = jbloggs} {code} should be something like this (note the values below are for illustrative purposes only and should not be used as test data) {code} {facility=22 severity=6 timestamp=tue dec 02 07:56:35 host=the-hostname-that-sent-the-data tag=%asa-6-113008 message=........} {code} h3. root cause spring integration does not parse these messages. there is a jira for si here: https://jira.spring.io/browse/int-3450"""" and similar to """"Add support for dynamic routing it should be possible to create streams like the following which rely upon named channel support and dynamic routing capabilities: {code} http | somerouter :x > xtransformer | hdfs :y > ytransformer | hdfs {code} the 'somerouter' processor could return """"x"""" or """"y"""" which determines the downstream path for each message. this should be implemented in such a way that any developer adding a router module would only need to deal with existing spring integration semantics (in this case only considering the return of """"x"""" or """"y"""" - whether it be spel or a pojo method invocation). perhaps in the plugin that modifies a module context we could simply add a new channelresolver implementation (by adding that channelresolver as a bean and/or a beanpostprocessor that configures that as the resolver for any router if necessary). that channelresolver would have a reference to the channelregistry so that the router actually sends its messages to those shared channels. the shared channels themselves would have been created as long as a valid downstream flow has been defined."""" and similar to """"Filejdbc job throws exception during acceptance tests currently the testfilejdbcjobmultipleinvocations fails on line 156 stating data is different in table that what is expected. currently this is failing on the single admin/container deployment using redis as a transport. also seeing the following exception in the attached log: {noformat} 2.0.0.snap error xdbus.job:ec2job3.0.requests-1 step.abstractstep - encountered an error executing step step1 in job ec2job3 org.springframework.batch.item.itemstreamexception: failed to initialize the reader ... caused by: java.lang.illegalstateexception: input resource must exist (reader is in 'strict' mode): url [file:/tmp/xd/output/filejdbctest/filejdbctest1.out] {noformat} the file is should be present and data present for the test. at least according to the checker on ec2 and local deployments."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade to gradle 2.2"""" is a not user story because it is most similar to: """"Writing to hdfs - 1.x"""" and similar to """"Twitterstream is broken"""" and similar to """"Channel registry"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: The user needs the ability to set up a end-time where the trigger should no longer be in effect."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove option parsing code used for tests from servers currently *main class provide alternate static methods for parsing cli options. one used for testing does not call system.exit() just throws an exception. this code should be moved to spring-xd-test to support integration testing."""" is a not user story because it is most similar to: """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Retrieve information for a gauge todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Support map payloads in field-value-counter the {{fieldvaluecounterhandler}} handles {{pojo}} {{tuple}} and {{json}}. {{#jsonpath}} emits a {{linkedhashmap}}. the handler should natively support a {{map}}. see http://stackoverflow.com/questions/33270926/springxds-field-value-counter-doesnt-work-after-splitting-json-object-array-in/33281783#33281783"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a developer i'd like to build batch sample using _sqoop_ so that we can demonstrate some of the capabilities. *use cases to consider:* * jdbc to hdfs * hdfs to jdbc"""" is a not user story because it is most similar to: """"Support the ability for a user to create composite modules that can accept parameters parser creates a module compose command that allows a user to create a module of other modules. this composed module can accept parameters."""" and similar to """"Add ability to copy job from http site to containers download zipped job modules from a http site and deploy them to modules on the admin & containers before container is started."""" and similar to """"Base server implementation on spring boot server startup is done using spring boot as well as starting a module application context at runtime."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Can't use apache velocity in custom modules creating a custom processor module with apache velocity (org.apache.velocity:velocity:1.7) as dependency results in {{java.lang.classnotfoundexception}} during stream deployment: {code} 2015-04-08 17:35:32595 1.1.1.release info deploymentspathchildrencache-0 server.deploymentlistener - deploying module [moduledescriptor@144d1f50 modulename = 'custom-velocity-processor' modulelabel = 'custom-velocity-processor' group = 'velocity-stream' sourcechannelname = [null] sinkchannelname = [null] index = 1 type = processor parameters = map[[empty]] children = list[[empty]]] 2015-04-08 17:35:32768 1.1.1.release warn deploymentspathchildrencache-0 support.defaultlistablebeanfactory - factorybean threw exception from getobjecttype despite the contract saying that it should return null if the type of its object cannot be determined yet java.lang.noclassdeffounderror: org/apache/velocity/app/velocityengine org.springframework.ui.velocity.velocityenginefactorybean.getobjecttype(velocityenginefactorybean.java:69) org.springframework.beans.factory.support.factorybeanregistrysupport.gettypeforfactorybean(factorybeanregistrysupport.java:66) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.gettypeforfactorybean(abstractautowirecapablebeanfactory.java:795) org.springframework.beans.factory.support.abstractbeanfactory.istypematch(abstractbeanfactory.java:542) org.springframework.beans.factory.support.defaultlistablebeanfactory.dogetbeannamesfortype(defaultlistablebeanfactory.java:436) org.springframework.beans.factory.support.defaultlistablebeanfactory.getbeannamesfortype(defaultlistablebeanfactory.java:404) org.springframework.beans.factory.support.defaultlistablebeanfactory.getbeannamesfortype(defaultlistablebeanfactory.java:398) org.springframework.integration.jmx.config.jmxintegrationconfigurationinitializer.registermbeanexporterhelperifnecessary(jmxintegrationconfigurationinitializer.java:42) org.springframework.integration.jmx.config.jmxintegrationconfigurationinitializer.initialize(jmxintegrationconfigurationinitializer.java:38) org.springframework.integration.config.integrationconfigurationbeanfactorypostprocessor.postprocessbeanfactory(integrationconfigurationbeanfactorypostprocessor.java:48) org.springframework.context.support.postprocessorregistrationdelegate.invokebeanfactorypostprocessors(postprocessorregistrationdelegate.java:265) org.springframework.context.support.postprocessorregistrationdelegate.invokebeanfactorypostprocessors(postprocessorregistrationdelegate.java:177) org.springframework.context.support.abstractapplicationcontext.invokebeanfactorypostprocessors(abstractapplicationcontext.java:606) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:462) org.springframework.boot.springapplication.refresh(springapplication.java:691) org.springframework.boot.springapplication.run(springapplication.java:321) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:139) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:214) org.springframework.xd.dirt.module.moduledeployer.dodeploy(moduledeployer.java:217) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:200) org.springframework.xd.dirt.server.deploymentlistener.deploymodule(deploymentlistener.java:363) org.springframework.xd.dirt.server.deploymentlistener.deploystreammodule(deploymentlistener.java:332) org.springframework.xd.dirt.server.deploymentlistener.onchildadded(deploymentlistener.java:179) org.springframework.xd.dirt.server.deploymentlistener.childevent(deploymentlistener.java:147) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:509) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:503) org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92) com.google.common.util.concurrent.moreexecutors$samethreadexecutorservice.execute(moreexecutors.java:297) org.apache.curator.framework.listen.listenercontainer.foreach(listenercontainer.java:83) org.apache.curator.framework.recipes.cache.pathchildrencache.calllisteners(pathchildrencache.java:500) org.apache.curator.framework.recipes.cache.eventoperation.invoke(eventoperation.java:35) org.apache.curator.framework.recipes.cache.pathchildrencache$10.run(pathchildrencache.java:762) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:745) caused by: java.lang.classnotfoundexception: org.apache.velocity.app.velocityengine java.net.urlclassloader$1.run(urlclassloader.java:366) java.net.urlclassloader$1.run(urlclassloader.java:355) java.security.accesscontroller.doprivileged(native method) java.net.urlclassloader.findclass(urlclassloader.java:354) java.lang.classloader.loadclass(classloader.java:425) sun.misc.launcher$appclassloader.loadclass(launcher.java:308) java.lang.classloader.loadclass(classloader.java:358) ... 39 more {code} attached is module source code. executing commands in {{xd-shell-commands.cmd}} file is enough to trigger the exception. everything works when velocity jar is placed in {{$xd_home/lib}} and excluded from the processor module."""" and """"Sts gradle import missing dependencies without enabling scala dirt errors after {{cleaneclipse eclipse}} - same problem after a complete gradle reimport. manually adding the spring-xd-spark-streaming project to the xd-dirt classpath didn't help. {code} description resource path location type the import org.springframework.xd.spark cannot be resolved sparkstreamingcontainerfilter.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/spark line 33 java problem the import org.springframework.xd.module.moduletype is never used moduledeploymenttests.java /spring-xd-dirt/src/test/java/org/springframework/xd/dirt/plugins line 33 java problem the import org.springframework.batch.core.configuration.xml.jobparserjobfactorybean is never used batchjobregistrybeanpostprocessor.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/job line 31 java problem the value of the field kafkamessagebustests.embeddedheadersmessageconverter is not used kafkamessagebustests.java /spring-xd-dirt/src/test/java/org/springframework/xd/dirt/integration/bus/kafka line 56 java problem sparkstreamingsupport cannot be resolved sparkstreamingcontainerfilter.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/spark line 68 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingcontainerfilter.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/spark line 75 java problem sparkmessagesender cannot be resolved to a type messagebussender.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 38 java problem the import org.springframework.beans.factory.annotation.value is never used messagebusclassloaderfactory.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server line 27 java problem the import org.springframework.xd.spark cannot be resolved messagebussender.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 28 java problem the method send(message) of type messagebussender must override or implement a supertype method messagebussender.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 104 java problem the method start() of type messagebussender must override or implement a supertype method messagebussender.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 81 java problem the method isrunning() of type messagebussender must override or implement a supertype method messagebussender.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 123 java problem the method stop() of type messagebussender must override or implement a supertype method messagebussender.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 109 java problem the import org.springframework.xd.dirt.plugins.job.support.joblaunchingjobrepository is never used runtimebatchconfigurer.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/batch line 37 java problem resource leak: 'cache' is never closed testkafkacluster.java /spring-xd-dirt/src/test/java/org/springframework/xd/dirt/integration/kafka line 116 java problem the value of the field streamdeployer.parser is not used streamdeployer.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/stream line 42 java problem the import org.springframework.batch.core.repository.support.simplejobrepository is never used runtimebatchconfigurer.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/batch line 31 java problem the method endpos(iterable<token>) from the type streamconfigparser is never used locally streamconfigparser.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/stream/dsl line 555 java problem the method startpos(iterable<token>) from the type streamconfigparser is never used locally streamconfigparser.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/stream/dsl line 546 java problem the expression of type abstractinstancepersistingdeployer<di> is already an instance of type abstractinstancepersistingdeployer xdcontroller.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/rest line 268 java problem the expression of type abstractinstancepersistingdeployer<di> is already an instance of type abstractinstancepersistingdeployer xdcontroller.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/rest line 217 java problem resource leak: 'context' is never closed sparkstreamingchannel.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 45 java problem the value of the field streamconfigparsertests.zookeeperconnection is not used streamconfigparsertests.java /spring-xd-dirt/src/test/java/org/springframework/xd/dirt/stream/dsl line 63 java problem the value of the field jobplugintests.deploymentproperties is not used jobplugintests.java /spring-xd-dirt/src/test/java/org/springframework/xd/dirt/plugins/job line 94 java problem the import org.springframework.xd.spark cannot be resolved sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 41 java problem sparkstreamingsupport cannot be resolved sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 68 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 79 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 81 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 97 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 99 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 100 java problem the value of the field moduletypeconversionplugin.logger is not used moduletypeconversionplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/stream line 45 java problem sparkstreamingsupport cannot be resolved to a variable sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 82 java problem sparkstreamingsupport cannot be resolved to a type sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 87 java problem the method getcomponent(class<sparkstreamingsupport>) from the type module refers to the missing type sparkstreamingsupport sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 90 java problem sparkstreamingsupport cannot be resolved to a type sparkstreamingplugin.java /spring-xd-dirt/src/main/java/org/springframework/xd/dirt/plugins/spark/streaming line 90 java problem {code}"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create a trigger from shell"""" is a not user story because it is most similar to: """"Test with java8 runtime"""" and similar to """"Add email sink"""" and similar to """"Documentation for deleting triggers"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to measure performance numbers for a simple stream so that i can characterize the overall throughput."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Use deque instead of linkedlist when gathering metrics when profiling metrics we noticed a small improvement when using deque instead of linkedlist in exponentialmovingaverageratio exponentialmovingaveragerate..."""" is a user story, and is worth 8 story points because it is most similar to: As a pm i'd like to have test coverage for both kafka source and sink modules so that we can assert its functionality as part of the ci builds. and similar to """"As a continuation we would like to further investigate spark develop poc and identify the best appropriate design and implementation for xd."""" and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Jdbchdfs job password issue password for 'jdbchdfs' job definition is only hashing the initial portion of the password not the entire password (see attached image). the password has an '_' char but it shouldn't matter. the entire password should be masked with '*' instead."""" is a not user story because it is most similar to: """"Support bus producer properties for dynamic producers pass module properties from stream plugin to {{messagebusawarechannelresolver}}. disallow partitioning properties."""" and similar to """"Add watch to stream deployment paths {{deploymentsupervisor}} will be responsible for maintaining the state data for each stream. when a stream is deployed a watch should be created so that the supervisor can recalculate the state of a stream as modules are added/removed."""" and similar to """"Rename packages that is applicable for both stream/job determine a better package name for the following packages once we have a common model that applies to both stream/job: `org.springframework.xd.dirt.stream` `org.springframework.xd.dirt.stream.zookeeper`"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Decide on location to host http reference documentation and automate upload in build scripts"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Trim output from http post shell command to two lines instead of xd:>http post --target http://localhost:9898 --data """"hello world"""" > post (text/plaincharset=utf-8) http://localhost:9898 hello world > 200 ok > content-length: 0 > connection: keep-alive > success sending data 'hello world' to target 'http://localhost:9898' have xd:>http post --target http://localhost:9898 --data """"hello world"""" > post (text/plaincharset=utf-8) http://localhost:9898 hello world > 200 ok or better yet xd:>http post --target http://localhost:9898 --data """"hello world"""" > 200 ok post (text/plaincharset=utf-8) http://localhost:9898 hello world"""" and """"Expose status for each job within the composition h2. narrative as the xd user i would like a way obtain the result of each child job as it is represented as a step in the parent job's graph. h2. back story each child job will have a completion status of its own that will be displayed in the spring xd ui as well as the shell's job execution list."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add a jobexecution dto object related to xd-779. * we need the ability to provide json serializable jobexecution information. * change from using javaserialization back to returning objects"""" is a user story, and is worth 5 story points because it is most similar to: As a s-c-s user i'd like to have the modules self-register itself with {{eureka}} whenever they're installed so i can also discover the same modules using spring xd admin spi and reuse them to create data pipelines. and similar to """"As a devops i would prefer having my module registry located in centralized github repository. this would allow all the admins and containers in the cluster pointing to the same module registry. any new module upload would be pushed to the same github repo which will make the cluster always be in sync on the module registry."""" and similar to """"As a user i need a 'sandbox' docker image so that i can get started to experiment xd deployment with the following setup: * ubuntu os * full xd jar * java 7.x * redis * rabbitmq"""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Clean up mismatches and bugs in how mdoule options and server configuration is handled."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create benchmarking application to demonstrate high performance message processing the application should live in in spring-xd-samples repository. the stream created in https://jira.spring.io/browse/xd-1402 should be documented how to run a benchmark and made easy to execute. can use ruby/bash-awk-sed to generate traffic via sendfile in order to saturate the stream."""" is a not user story because it is most similar to: """"In ec2 deployment allow users to set download jars into the lib/xd directory in cases where the deployment requires jars that can not be included with the distribution the user should be able to pull a jar from a http site and place it in lib/xd. the use case is that when we removed the mysql jar from the distribution the ci tests could not start the xd instances on ec2 without it. it was suggested that we use the postgresql instead but decided to continue the use of mysql for acceptance tests."""" and similar to """"Improve module options support note from pr #365 - which has been merged - providing the initial level of support... pending issues (to be addressed in another pr?): - [x] complex case - [x] default values for complex case when option is not surfaced back to the module (eg """"suffix"""" in our canonical example) - [ ] plugin provided options and values - [ ] descriptive defaults instead of actual defaults (e.g. \<use stream name\>) - [ ] jsr303 validation"""" and similar to """"Localmessagebus pubsub needs a bounded task exectutor since 1.1 {{pubsub}} channels in the {{localmessagebus}} run on a {{cachedthreadpoolexecutor}}. for high volume environments where back-pressure might occur on a {{topic:}} thread we could overwhelm the system with threads. add a local bus configuration to limit the thread pool used for pubsubs and queue tasks where there are no threads available. it would be a bus-wide setting."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to benchmark rabbit performance so that i can use the results as reference to setup xd cluster."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option of editing the deployed/undeployed stream so that i don't have to destroy to just change any deployment property. and similar to """"As a developer i'd like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics."""" and similar to """"As a developer i'd like to refactor stream/job definition repository so i can decouple from module deployment concerns."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Better error messages following xd-1109 2 forces at heand here: * spring binding/validation itself * jsr303 (for eg @notnull)"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Align filehdfs batch job defaults with those of corresponding hdfs sink the batch jobs use different defaults compared to some of the sink/source modules. filehdfs puts data in a /data directory with files named after the stream using a .log file extension. the hdfs sink puts files in an /xd/<streamname> directory using .txt as the default file extension. filehdfs needs a more descriptive naming"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to gracefully shutdown the stream so when it is _undeployed_ while in the middle of its operation we would want to complete its journey to the sink before xd stops the stream. *use case:* one of the streams has a custom module that performs archive extraction. when this stream is ‘undeployed’ while in the middle of extraction it looks like the message goes to the dlq. however we would like the message to complete its journey to the sink of the queue before xd stops the stream. is this possible? and similar to """"As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing"""" and similar to """"As a developer i'd like to study the taxi trips based on a stream of trip reports from new york city so that i can evaluate event-based systems in the context of real-time analytics using spring xd. [challenge details|http://www.debs2015.org/call-grand-challenge.html]"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"""""script"""" processor options incorrect on docs the example in the documentation (and the paragraph preceding the example) for the """"script"""" processor uses both """"location"""" and """"properties-location"""" options but these are in actuality """"script"""" and """"locationproperties"""" according to """"module info processor:script"""" and the text of the documentation. see: http://docs.spring.io/spring-xd/docs/1.0.2.release/reference/html/#script {quote}to use the module pass the location of a groovy script using the location attribute. if you want to pass variable values to your script you can optionally pass the path to a properties file using the properties-location attribute. all properties in the file will be made available to the script as variables. {code}xd:> stream create --name groovyprocessortest --definition """"http --port=9006 | script --location=custom-processor.groovy --properties-location=custom-processor.properties | log"""" --deploy{code} {quote}"""" is a not user story because it is most similar to: """"Expose shutdown operation over http this will allow for a simple way to shutdown the server via an http call. support for security is a separate story. the end goal is to have some shell scripts distributed that can issue http requests to shutdown the xd-admin and xd-container servers. the newest version of jolokia has the ability to boostrap itself inside an application context vs. requiring a java agent. i suspect using the application context approach will provide us with more flexibility (e.g. property replacement etc) but not sure."""" and similar to """"Improvements to executions tab 1. add quick filter 2. the table should have columns for name | instance | execution id getting the name might require a bit of extra work given some limitations with json serialization and cycles in the current object returned from spring batch. 3. the restart action should appear only if the job is restartable and the status was failed."""" and similar to """"Improve module options support note from pr #365 - which has been merged - providing the initial level of support... pending issues (to be addressed in another pr?): - [x] complex case - [x] default values for complex case when option is not surfaced back to the module (eg """"suffix"""" in our canonical example) - [ ] plugin provided options and values - [ ] descriptive defaults instead of actual defaults (e.g. \<use stream name\>) - [ ] jsr303 validation"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Support for hadoop name node ha configuration hadoop supports namenode ha with two name nodes running one being active and other in standby. if the active name node fails the standby name node has all the data readily available and can start serving requests. in this configuration name node url is no longer a host:port url but a logical name that translates to any active name node at runtime. this is to ensure spring xd stream can handle a name node failure for instance when writing a hdfs sink seamlessly"""" and """"Change module placeholder names and remove context:property-placeholder usage e.g. rabbit.xml source. <context:property-placeholder location=""""${xd.config.home}/${configproperties:rabbit}.properties"""" ignore-resource-not-found=""""true"""" /> would be removed and <rabbit:connection-factory id=""""rabbitconnectionfactory"""" host=""""${host:${spring.rabbitmq.host:localhost}}"""" port=""""${port:${spring.rabbitmq.port:5672}}"""" virtual-host=""""${vhost:${spring.rabbitmq.virtualhost:/}}"""" username=""""${username:${spring.rabbitmq.username:guest}}"""" password=""""${password:${spring.rabbitmq.password:guest}}""""/> would look like port=""""${port}"""" and a property file in the module directory or pojo in the module lib would specify the default value of the port. for pojo it would be options_class = org.springframework.xd.dirt.modules.metadata.rabbitsourceoptionsmetadata for property file it would be option.port.default=5672 option.port.description=""""cool port number"""" this needs to be consistently done across all the modules."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like revisit the design to determine the necessity for _id_ and _timestamp_ attributes in {{tuple}} so i can refactor in order to improve performance throughput."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Access to localmessagebus internal state a localmessagebus in singlenode mode has several internal properties that would be useful to monitor at runtime for example via jmx: queuesize current size of executor's queue (and others). all fields are currently write-only so it's hard to access them from custom code too. public getters would be useful as well as an mbean exposed to jmx."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing and similar to """"As a user i'd like to have the option to define access control list (acls) so that i can define access controls to the resource by 'each user' and what the privileges are for that 'resource'. *spike scope:* ** review customer use cases and come up with design specs ** identify the best approach that fits xd runtime ** identify scope for dsl and ui ** document next steps and phases"""" and similar to """"As a developer i'd like to bench kafka as message bus using in-built perf-testing producer/consumer utilities so that i can use that as a foundation to build xd use-cases and measure performance. i'd like to reproduce baseline performance metrics as identified by the kafka [engineering team|https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines]."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Change default admin port from 8080 this conflicts with and 'out of the box' hadoop installation that uses 8080 as the 'map reduce shuffle port'. 8088 sound ok?"""" is a not user story because it is most similar to: """"Replace beandefinitionaddingbeanpostprocessor with ordered plugins this will allow us to control the order of plugins and use plugin(s) to manage the common module context replacing beandefinitionaddingbeanpostprocesser"""" and similar to """"Add zookeeper distribution in the download zip this will reduce one extra step for getting started using xd in distributed mode 'out of the box'"""" and similar to """"Pom generation creates the correct dependency list we are referencing spring.io deps when we shouldn't (since we moved to a different version of boot than in in the platform)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update router sink logic to match new channel syntax for example the following should work: {code} xd:>stream create a1 --definition """"queue:a > transform --expression=payload+'-a' | log"""" created new stream 'a1' xd:>stream create b1 --definition """"queue:b > transform --expression=payload+'-b' | log"""" created new stream 'b1' xd:>stream create s1 --definition """"http | router --expression=payload.contains('a')?'queue:a':'queue:b'"""" created new stream 's1' xd:>http post --data """"ha"""" > post (text/plaincharset=utf-8) http://localhost:9000 ha > 200 ok // log shows: """"ha-a"""" xd:>http post --data """"hi"""" > post (text/plaincharset=utf-8) http://localhost:9000 hi > 200 ok // log shows: """"ha-b"""" {code} this needs to be tested against all transports (local redis and rabbit)"""" is a not user story because it is most similar to: """"Icla website is missing spring xd project option the readme.md at: https://github.com/spring-projects/spring-xd/blob/master/readme.md ...says: """"before we accept a non-trivial patch or pull request we will need you to sign the contributor's agreement"""" navigating to the <contributor's agreement> link takes the user to the icla web page at: https://support.springsource.com/spring_committer_signup //exp: the project field's dropdown should have an option for """"spring xd"""" //act: there's no """"spring xd"""" option"""" and similar to """"Add more sophisticated retry configuration to the rabbit messagebus xd-1019 added simple (stateless) retry to the message bus. use stateful retry and an {{amqprejectanddontrequeuerecoverer}} enabling failed messages to be requeued on the broker until successful (perhaps because another instance can handle the message) also provides a mechanism to route failed messages to a dead-letter exchange. requires setting the message id header in bus-generated messages. also add profiles and properties for common retry/backoff policies."""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Release 1.0.1"""" and """"Create ci plan for xd ec2 deployment * use the cleanup app from xd-1243 to stop previous ci runs of xd on ec2. * build xd-ec2 deployer from github. * use xd-ec2 deployer to deploy the ci xd-instance * should produce artifact that contains the url * admin server of the xd cluster. * container servers of the xd cluster"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to add a mongodb source using an xml and a property file supporting mixing in of parameters so that i can use this module to ingest data from mongo."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to """"As a user i need a """"production-ready' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x"""" and similar to """"As a tester i'd like to add test coverage for """"complex objects"""" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Embeddedheadersmessageconverter buffer overflow see https://github.com/spring-projects/spring-xd/issues/1871"""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to create separate repo for cf spi so i don't have to bundle all spi variants under one admin project. and similar to """"As a developer i'd like to create separate repo for lattice spi so i don't have to bundle all spi variants under one admin project."""" and similar to """"As a developer i'd like to create separate repo for mesos spi so i don't have to bundle all spi variants under one admin project."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: User wants the ability to exclude certain days (like holidays) for a trigger to fire. commonly called calendar support"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"As a pre-requisite for xd-2835 and a continuation of xd-2671 split apart the concepts of repository and deployment. this will affect the {{resourcedeployer}} interface and the classes that implement it."""" is a not user story because it is most similar to: """"Spring xd docker hub site needs to have images for all xd versions currently admin & container only support latest 1.0.x and 1.1.0 while singlenode only has tags for 1.0.x and latest. we need to have a tags for 1.1.0 1.2.0 1.2.1 for all xd docker images."""" and similar to """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" and similar to """"Mixins need to use property placeholders instead of hard coded values where possible many attributes in mixins use hard coded values instead of using property placeholders. jdbcconnectionmixin jdbcconnectionpoolmixin mqttconnectionmixin..."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"A job will be associated with a named channel when the job is created. when creating a job a named channel will be created with a name of job.<your job name> i.e. job.foo. ======== required components: - a transform see xd-733 - jobplugin needs to create the namedchannel for the job and associate the transform. > registrar.xml will need an input channel? > name channel support will be required. - add --channel to job rest apis to notify system that a named channel is requested. *unit test"""" is a not user story because it is most similar to: """"Restrict job launcher with more than one batch job configured in job module currently the job launcher launches all the batch jobs configured in the job module. please refer modulejoblauncher's executebatchjob(). this makes the jobregistry registers with multiple batch jobs under the same spring xd job name (group name). also it is understood that having multiple jobs configuration under the same config xml is uncommon."""" and similar to """"Add greenplum sink user should have the option of greenplum db sink so they can write data directly to greenplum db via the pgfdist/gploader (greenplum bulk loader). the existing jdbc sinks are not suitable for high volume loads. the jdbc approach utilizes the master segment of greenplum for loading datasets instead of the bulk loader utility."""" and similar to """"Users should be able to package custom modules into a single jar if a user needs to deploy a module containing custom code they have to build a jar for the lib dir and somehow deploy the app context file separately to a modules dir. this is a bit inconvenient to build from a project since context files in src/main/resources typically get built into a jar. might be better to accept both jar and xml files in the modules dir though that brings up the issue of classpath isolation."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a qa i'd like to include acceptance test coverage for _reactor-syslog_ source module so that i can validate the functionality as part of every ci build."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" and similar to """"As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Distributed test should verify container shutdown after each test execution the containers are shut down via: {code} @after public void after() { distributedtestsupport.shutdowncontainers() distributedtestsupport.ensuretemplate().streamoperations().destroyall() } ... public void shutdowncontainers() { for (iterator<map.entry<long javaapplication<simplejavaapplication>>> iterator = mappidcontainers.entryset().iterator() iterator.hasnext()) { iterator.next().getvalue().close() iterator.remove() } } {code} the problem is that {{close()}} guarantees that the process is shut down but it does not guarantee that the container is no longer registered in zookeeper. the cleanup procedure should verify that no containers appear in the output of the {{runtime containers}} shell command. this will prevent the next test from deploying to a non-existent container."""" is a not user story because it is most similar to: """"Allow easy integration with other types of message transports - remove enums for transport layers if a third party messaging solution wants to be the transport layer in springxd they must currently fork the springxd code base and change the enums. example: commondistributedoptions.controltransport currently limits to the following options (rabbit redis). so if a third party like messaging system like zeromq wanted to plug-in they would have to add to the enum. here is another example where gemfire was used as the messaging system: https://github.com/charliemblack/spring-xd/blob/master/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/commondistributedoptions.java#l38 all messaging enums should be removed for an extensible model."""" and similar to """"Using hdfs sink throwing an error i am trying to use hdfs as sink while creating streams and i am encountering the following error : please refer attached document : exception - localhost - 8020.txt the fs.default.name set in hadoop.properties is : fs.default.name=hdfs://localhost:8020 i have also tried the following variation in the hadoop.properties file : fs.default.name=hdfs://127.0.0.2:8020 fs.default.name=hdfs://127.0.0.2:50070 using these values are also throwing me exceptions as mentioned in the following files attached : exception - 127.0.0.2 - 8020.txt exception - 127.0.0.2 - 50070.txt we are using : pivotal hd 1.0.1 spring-xd-1.0.0.m5-dist kindly let us know the way around for this issue."""" and similar to """"Partition jobs (jdbchdfs) are running in sequence the jdbchdfs jobs that are partitioned are running in sequence rather than in parallel. our expectation with partition jobs is that they run in parallel. job configuration is: jdbchdfs --driverclassname='oracle.jdbc.oracledriver' --url='jdbc:oracle:thin:@=**********' --username='=**********' --password=********** --validationquery='select current_timestamp from dual' --tablename='hz_organization_profiles' --columns='organization_profile_id ... version_number' --partitions=10 --partitioncolumn='organization_profile_id' --directory='/ingest/source/oracle11i/ar/hz_organization_profiles' --filename=hz_organization_profiles --fileextension=csv --delimiter=| --commitinterval=10000 --rollover=262144000 --dateformat=yyyy-mmm-dd --partitionresultstimeout=1800000 --testonborrow=false"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-s developer i'd like to _bootify_ {{modulelauncher}} so i can use spring boot's support for property setting as well as adding options and new functionality in the future such as cp augmentation."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to """"As a s-c-d developer i'd like to add support for having different binder types for module's channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively."""" and similar to """"As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Aggregatecountertemplate should not use joda not only should it not use joda (see xd-668) but the passing of dates currently relies on default formatting"""" is a not user story because it is most similar to: """"Remove reactor stream processor from ref docs to spring-xd-modules not going to integrate with reactor for stream processing."""" and similar to """"Retrieve description of all registered modules get /streams/{streamname}/modules and get /streams/{streamname}/modules/{modulename} the former returning links to the latter"""" and similar to """"Move kafka @rule to a separate repo as an s-c-d developer i'd like to move kafka {{@rule}} to a separate repo so i can consume the test fixtures in different projects."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"User wants ability to test multiple processors in a chain"""" is a not user story because it is most similar to: """"Create shell command for restarting a specific job instance"""" and similar to """"Remove hard-coded 'app' name from config file"""" and similar to """"Test connection pooling on redis blocking/nonblocking operations"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Make string conversion optional with local transport"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: The hdfs store library should support compression when writing to sequence files support for using compression when writing sequence files either block or record-based compression."""" is a user story, and is worth 2 story points because it is most similar to: As a user i'd like to start multiple instances of {{xd-container}}'s through the rpm scripts so i can easily spin-up instances on the same node/vm. and similar to """"As a s-c-d developer i'd like to add support to add external libraries so i can consume such dependencies for modules in an uniform way."""" and similar to """"As a scdf user i want to be able to register artifacts as libraries so that i can reference them in include and exclude statements."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Support multiple admin servers on a same host by default xd admin server uses hsqldb as data source for batch job repository and uses the default port 9101 specific database location and dbname. this makes the existence of multiple admin server on a same host not possible."""" is a not user story because it is most similar to: """"Support groups container attribute a container instance may be designated as belonging to a group. the end user may define this attribute using yaml config as xd.container.groups=<comma delimited string> or an environment variable or --groups command line argument."""" and similar to """"Hsql always started even when using other database i set the config/xd-config.yml properties to use mysql including this profiles: active: defaultmysql when xd admin starts i still see hsql server started and localhost:9393/env shows: """"profiles"""": [ """"adminserver"""" """"hsqldb"""" """"default"""" ]"""" and similar to """"Defaultcontainermatcher - improve logging and mention affected module when deploying a definition with a container match criteria specified and no container could be selected - the logging is ambiguous and should mention the affected module: {code} 11:58:24089 warn deploymentsupervisorcachelistener-0 cluster.defaultcontainermatcher - no currently available containers match criteria 'somecriteria' {code}"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Issues with custom modules when using module configuration springxd seems to think that a module exists if there is a module configuration present. there is also an issue of having to restart the node when theres been a problem with uploading/removing a module. when using springxd in single node on windows i uploaded a custom module and then added a folder and property file for it in the module configuration directory as specified in the documentation. when i went to delete the module using the command in the springxd admin console it would say that it was successfull but when then listing the modules it would still be listed. if i tried to upload a new version of that same module i would get an error stating that module already existed with the same name. i would check the custom modules directory and my jar would not be there. i would then have to manually delete the module configuration directory and restart springxd before being able to upload a new module having to replace my module configuration each time. seems like there are three things wrong here: * should the presence of a module configuration alone inform springxd of a modules existence? * should one have to delete a module configuration before uploading a new version of the module? * when getting module deletion/upload errors should one have to restart spring xd node to get it to allow the upload again?"""" and """"Stepexecutioninfo can not be retrieved in distributed mode when constructing stepexecutioninfo the tasklettype class could not be loaded as the spring-data-hadoop-batch jar is missing from admin classpath in distributed mode. following exception is thrown: severe: servlet.service() for servlet [dispatcherservlet] in context with path [] threw exception [handler processing failed nested exception is java.lang.noclassdeffounderror: org/springframework/data/hadoop/batch/hive/hivetasklet] with root cause java.lang.classnotfoundexception: org.springframework.data.hadoop.batch.hive.hivetasklet java.net.urlclassloader$1.run(urlclassloader.java:366) java.net.urlclassloader$1.run(urlclassloader.java:355) java.security.accesscontroller.doprivileged(native method) java.net.urlclassloader.findclass(urlclassloader.java:354) java.lang.classloader.loadclass(classloader.java:425) sun.misc.launcher$appclassloader.loadclass(launcher.java:308) java.lang.classloader.loadclass(classloader.java:358) org.springframework.xd.dirt.job.tasklettype.<clinit>(tasklettype.java:57) org.springframework.xd.dirt.job.stepexecutioninfo.<init>(stepexecutioninfo.java:94) org.springframework.xd.dirt.rest.batchstepexecutionscontroller.details(batchstepexecutionscontroller.java:98) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.web.method.support.invocablehandlermethod.invoke(invocablehandlermethod.java:215)"""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Xd yarn deployment requires the ability to set permsize when deploying xd using java 7 the user must be able to set the permsize to a value larger than the default. the reason this is required is that if we deploy a gemfire component more than 2 times or a kafka source & sink more than 2 times stream deployment begins to fail. the only exception that was captured was the following: {noformat} exception in thread """"ec2test3_ip-10-146-213-31-1421176704238-e1786039_watcher_executor"""" exception: java.lang.outofmemoryerror thrown from the uncaughtexceptionhandler in thread """"ec2test3_ip-10-146-213-31-1421176704238-e1786039_watcher_executor {noformat} logs are not available at this time."""" is a not user story because it is most similar to: """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" and similar to """"Create design document for implementation strategy to support message conversion in channelregistry the conversion should be based on content-type headers similar to the way spring's httpmessageconverters work (with mime types). also the map of available converters should be extensible while including the most common defaults (for json xml etc). we most likely want to add a few of our own content types also (e.g. for tuples). most likely this logic and the configuration methods for extending the converter map belong in abstractchannelregistry since it should be common across all implementations (i.e. the logic should be the same regardless of the transport used after-serialization/before-deserialization)."""" and similar to """"Partition jobs (jdbchdfs) are running in sequence the jdbchdfs jobs that are partitioned are running in sequence rather than in parallel. our expectation with partition jobs is that they run in parallel. job configuration is: jdbchdfs --driverclassname='oracle.jdbc.oracledriver' --url='jdbc:oracle:thin:@=**********' --username='=**********' --password=********** --validationquery='select current_timestamp from dual' --tablename='hz_organization_profiles' --columns='organization_profile_id ... version_number' --partitions=10 --partitioncolumn='organization_profile_id' --directory='/ingest/source/oracle11i/ar/hz_organization_profiles' --filename=hz_organization_profiles --fileextension=csv --delimiter=| --commitinterval=10000 --rollover=262144000 --dateformat=yyyy-mmm-dd --partitionresultstimeout=1800000 --testonborrow=false"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to remove hadoop dependencies from root classpath so we don't have to incur the penalty of classloading unnecessary libraries at the startup time. the goal is to at least try and decouple for situations when hdfs is not used for module registry."""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a performance tester i'd like to investigate why there's high cpu startup time for both admin and container servers. perhaps profiling would assist isolating the bottlenecks. *scope:* * identify the bottlenecks * document reasons * list pros/cons"""" and similar to """"As a flo developer i'd like to have a new dsl parser so i can easily detect incorrect module/option values when supplied from the flo ui. example: mystream = mail | log tap:stream:mystream.bar > log if parsed separately (which flo ui does) the current parser endpoint will barf on the second stream because it doesn’t know about the first stream (mystream)."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"As a user i'm trying to get all job definitions but the first 20 alone are returned. job samples: {code} job create aaa --definition """"hello"""" --deploy job create bbb --definition """"hello"""" --deploy job create ccc --definition """"hello"""" --deploy job create ddd --definition """"hello"""" --deploy job create eee --definition """"hello"""" --deploy job create fff --definition """"hello"""" --deploy job create ggg --definition """"hello"""" --deploy job create hhh --definition """"hello"""" --deploy job create iii --definition """"hello"""" --deploy job create jjj --definition """"hello"""" --deploy job create kkk --definition """"hello"""" --deploy job create lll --definition """"hello"""" --deploy job create mmm --definition """"hello"""" --deploy job create nnn --definition """"hello"""" --deploy job create ooo --definition """"hello"""" --deploy job create ppp --definition """"hello"""" --deploy job create qqq --definition """"hello"""" --deploy job create rrr --definition """"hello"""" --deploy job create sss --definition """"hello"""" --deploy job create ttt --definition """"hello"""" --deploy job create uuu --definition """"hello"""" --deploy job create vvv --definition """"hello"""" --deploy job create www --definition """"hello"""" --deploy job create xxx --definition """"hello"""" --deploy job create yyy --definition """"hello"""" --deploy job create zzz --definition """"hello"""" --deploy job create aaa1 --definition """"hello"""" --deploy job create bbb1 --definition """"hello"""" --deploy job create ccc1 --definition """"hello"""" --deploy job create ddd1 --definition """"hello"""" --deploy job create eee1 --definition """"hello"""" --deploy {code} request: {{http://localhost:9393/jobs/definitions.json}} - returns top 20 the other experiments with page size of either 0 or -1 still brings the top 20."""" and """"As a user i want to be able to provide my own rowmapper<tuple> implementation to enrich the jdbc data. my use case requires me to add timestamp field and a delete flag field to records before they get written to hdfs. to do it i have to implement a itemreaderfactory and perhaps extend namecolumnjdbcitemreader. this is to override the afterpropertyset method to change the default implementation. otherwise i have to write my own processor that can add these fields to tuples and since tuples are immutable i would have to recreate the tuples with additional fields in the processor. for large load this could be big overhead. i would love to know any other technique to implement such a use case."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Springxd sqoop module is hanging the springxd sqoop module is in execution status until it times out it is hanging. the container logs show: 2015-05-04 15:15:45365 1.2.0.m1 info deploymentspathchildrencache-0 container.deploymentlistener - deploying job 'sqoop_lookup' 2015-05-04 15:15:45536 1.2.0.m1 info deploymentspathchildrencache-0 container.deploymentlistener - deploying module [moduledescriptor@239b037a modulename = 'sqoop' modulelabel = 'sqoop' group = 'sqoop_lookup' sourcechannelname = [null] sinkchannelname = [null] index = 0 type = job parameters = map['args' -> '--connect=jdbc:oracle:thin:@************:****/******* —username=******** --password-file=/user/zeybeb/workspace/secure-files/gdw.password --table=masterdata.w_lookup_d --target-dir=/user/zeybeb/workspace/ent/masterdata_src/lookup_d -m 1' 'command' -> 'import'] children = list[[empty]]] 2015-05-04 15:16:17061 1.2.0.m1 info inbound.job:sqoop_lookup-redis:queue-inbound-channel-adapter1 sqoop.sqooptasklet - sqoop system.out: /tmp/sqoop-948322291323951735.out the /tmp/sqoop-948322291323951735.out file content is: 15:16:17612 info main sqoop.sqooprunner - sqoop command: import 15:16:17613 info main sqoop.sqooprunner - using args: [--connect=jdbc:oracle:thin:@************:****/******* —username=********* --password-file=/user/zeybeb/workspace/secure-files/gdw.password --table=masterdata.w_lookup_d --target-dir=/user/zeybeb/workspace/ent/masterdata_src/lookup_d -m 1] 15:16:17613 info main sqoop.sqooprunner - mapreduce home: /opt/pivotal/spring-xd-1.2.0.m1/xd/lib/phd21 15:16:17631 info main sqoop.sqooprunner - setting configuration property: fs.defaultfs=hdfs://ilabphd07.isus.emc.com:8020 15:16:17753 info main sqoop.sqooprunner - setting configuration property: yarn.resourcemanager.address=ilabphd08.isus.emc.com:8050 15:16:17753 info main sqoop.sqooprunner - setting configuration property: yarn.application.classpath=/usr/hdp/2.2.0.0-2041/etc/hadoop/conf.empty/usr/hdp/2.2.0.0-2041/hadoop/*/usr/hdp/2.2.0.0-2041/hadoop/lib/*/usr/hdp/2.2.0.0-2041/hadoop-hdfs/*/usr/hdp/2.2.0.0-2041/hadoop-hdfs/lib/*/usr/hdp/2.2.0.0-2041/hadoop-yarn/*/usr/hdp/2.2.0.0-2041/hadoop-yarn/lib/*/usr/hdp/2.2.0.0-2041/hadoop-mapreduce/*/usr/hdp/2.2.0.0-2041/hadoop-mapreduce/lib/*/usr/hdp/2.2.0.0-2041/sqoop/*/usr/hdp/2.2.0.0-2041/sqoop/lib/*/usr/hdp/2.2.0.0-2041/flume/*/usr/hdp/2.2.0.0-2041/flume/lib/*/usr/hdp/2.2.0.0-2041/storm/*/usr/hdp/2.2.0.0-2041/storm/lib/* 15:16:17754 info main sqoop.sqooprunner - setting configuration property: mapreduce.framework.name=yarn 15:16:17837 warn main tool.sqooptool - $sqoop_conf_dir has not been set in the environment. cannot check for additional configuration. 15:16:17907 info main sqoop.sqoop - running sqoop version: 1.4.5 15:16:18282 warn main util.nativecodeloader - unable to load native-hadoop library for your platform... using builtin-java classes where applicable 15:16:19552 warn main sqoop.connfactory - $sqoop_conf_dir has not been set in the environment. cannot check for additional configuration. 15:16:19657 info main oracle.oraoopmanagerfactory - data connector for oracle and hadoop is disabled. 15:16:19673 info main manager.sqlmanager - using default fetchsize of 1000 15:16:19673 info main tool.codegentool - beginning code generation 15:16:20639 info main manager.oraclemanager - time zone has been set to gmt 15:16:20853 info main manager.sqlmanager - executing sql statement: select t.* from masterdata.w_lookup_d t where 1=0 15:16:21018 info main orm.compilationmanager - hadoop_mapred_home is /opt/pivotal/spring-xd-1.2.0.m1/xd/lib/phd21 15:16:23171 info main orm.compilationmanager - writing jar file: /tmp/sqoop-spring-xd/compile/4e11123a52fa36d6677efdb47bcdc43b/masterdata.w_lookup_d.jar 15:16:23191 info main manager.oraclemanager - time zone has been set to gmt 15:16:24109 info main manager.oraclemanager - time zone has been set to gmt 15:16:24825 info main mapreduce.importjobbase - beginning import of masterdata.w_lookup_d 15:16:24848 info main manager.oraclemanager - time zone has been set to gmt 15:16:24876 warn main mapreduce.jobbase - sqoop_home is unset. may not be able to find all job dependencies. 15:16:25083 info main client.rmproxy - connecting to resourcemanager at ilabphd08.isus.emc.com/10.15.232.191:8050 15:16:25977 info main db.dbinputformat - using read commited transaction isolation 15:16:26117 info main mapreduce.jobsubmitter - number of splits:1 15:16:26361 info main mapreduce.jobsubmitter - submitting tokens for job: job_1429280992648_0019 15:16:26717 info main impl.yarnclientimpl - submitted application application_1429280992648_0019 to resourcemanager at ilabphd08.isus.emc.com/10.15.232.191:8050 15:16:26782 info main mapreduce.job - the url to track the job: http://http://ilabphd08.isus.emc.com:8088/proxy/application_1429280992648_0019/ 15:16:26783 info main mapreduce.job - running job: job_1429280992648_0019 the logs on the hadoop side are: showing 4096 bytes. click here for full log mumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:04026 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 3 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:05033 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 4 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:06042 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 5 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:07049 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 6 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:08056 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 7 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:09062 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 8 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:10069 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 9 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:41093 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 0 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:42100 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 1 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:43107 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 2 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:44113 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 3 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:45120 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 4 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:46129 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 5 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:47136 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 6 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:48143 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 7 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:49150 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 8 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) 2015-05-04 15:36:50156 info [main] org.apache.hadoop.ipc.client: retrying connect to server: 0.0.0.0/0.0.0.0:8030. already tried 9 time(s) retry policy is retryuptomaximumcountwithfixedsleep(maxretries=10 sleeptime=1000 milliseconds) even though the maxretries is set to 10 the process is going into several sets of retrials."""" and """"Use parentlastclassloader to create the modules applicationcontext. the parentlastclassloader is located in the spring-hadoop project. it will resolve classes first looking at the child context and then the parent. this works well for xd since the we want and dependencies of the module to be considered first and if not found resolve against the parent. it would be possible to even include other versions of .jars already in the parent classloaders (e.g. spring integration jars) but for now we will not immediately test that case. simplemodule needs to change to that we can pass in the classloader to use for creating the application context. the current implementation creates a genericapplicationcontext as a field initializer...that should change to be in the ctor. moduledeployer should implement .beanclassloaderaware. the classloader passed in to the beanclassloaderaware callback will be used as the ‘parent’ when creating the parentlastclassloader. the url[] to pass into parentlastclassloader should be ‘null’ or an empty array in this case of an older style module. (hopefully parentlastclassloader allows that type of fallback). *implementation suggestions:* the moduledeployer code is where the application context for the module is defined and instantiated. here is a possible impl path. 1. assuming we can always use parentlastclassloader (even for older style modules) then the moduledescriptor needs to return an array of url[] locations for the module geturl(). this is passed into the cto for simplemodule. the ctor then creates a new application context creates the parentclassloader sets the classloader on the application context and then proceeds as normal. 2.abstractmoduleregistry should try and load the resource from two possible locations e.g. ./modules/source/file/config/file.xml or ./modules/source/file.xml the module registry needs to be a bit smarter to know ah i see a config directory let me try ./config/file.xml otherwise just ./file.xml *how to verify it works.* 1. junit test in which one of the moduleregistry implementations points to a test directory that contains both old and new style modules. filemoduleregistry is probably a good choice here. need to test that the new getting for url[] works as expected. 2. existing tests should run as they did before in particular the shell integration tests."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Jobs are failing to be deployed error started: commit: 7087dc67e058edd6cbb1630ebd95b52e2c7e21e1 https://github.com/spring-projects/spring-xd/pull/1564 this can be reproduced by running the test with a admin and single container on mac osx. issue all jobs fail to deploy with the following exception: {noformat} / ___| (-) \ \ / / _ \ \ `--. _ __ _ __ _ _ __ __ _ \ v /| | | | `--. \ '_ \| '__| | '_ \ / _` | / ^ \| | | | /\__/ / |_) | | | | | | | (_| | / / \ \ |/ / \____/| .__/|_| |_|_| |_|\__ | \/ \/___/ | | __/ | |_| |___/ 1.2.0.build-snapshot extreme data started : adminserverapplication documentation: https://github.com/spring-projects/spring-xd/wiki 2015-04-27 09:08:51082 1.2.0.snap warn main config.integrationregistrar - the '#jsonpath' spel function cannot be registered. the version of json-path found on the classpath is not supported. supported json-path version is '0.9.1'. upgrade to spring integration 4.2 or later to use json-path 1.0 or later. 2015-04-27 09:09:02767 1.2.0.snap info main util.xdconfiglogginginitializer - xd home: /users/glennrenfro/project/spring-xd/build/dist/spring-xd/xd 2015-04-27 09:09:02768 1.2.0.snap info main util.xdconfiglogginginitializer - transport: redis 2015-04-27 09:09:02768 1.2.0.snap info main util.xdconfiglogginginitializer - hadoop distro: hadoop26 2015-04-27 09:09:02771 1.2.0.snap info main util.xdconfiglogginginitializer - hadoop version detected from classpath 2.6.0 2015-04-27 09:09:02771 1.2.0.snap info main util.xdconfiglogginginitializer - xd config location: file:/users/glennrenfro/project/spring-xd/build/dist/spring-xd/xd/config// 2015-04-27 09:09:02771 1.2.0.snap info main util.xdconfiglogginginitializer - xd config names: serversapplication 2015-04-27 09:09:02772 1.2.0.snap info leaderselector-0 zk.deploymentsupervisor - leader admin 172.31.99.83:9393 is watching for stream/job deployment requests. 2015-04-27 09:09:02773 1.2.0.snap info main util.xdconfiglogginginitializer - xd module config location: file:/users/glennrenfro/project/spring-xd/build/dist/spring-xd/xd/config//modules/ 2015-04-27 09:09:02775 1.2.0.snap info main util.xdconfiglogginginitializer - xd module config name: modules 2015-04-27 09:09:02775 1.2.0.snap info main util.xdconfiglogginginitializer - admin web ui: http://glenns-macbook-pro.local:9393/admin-ui 2015-04-27 09:09:02775 1.2.0.snap info main util.xdconfiglogginginitializer - zookeeper at: localhost:2181 2015-04-27 09:09:02775 1.2.0.snap info main util.xdconfiglogginginitializer - zookeeper namespace: xd 2015-04-27 09:09:02776 1.2.0.snap info main util.xdconfiglogginginitializer - analytics: redis 2015-04-27 09:09:02813 1.2.0.snap info deploymentsupervisor-0 zk.containerlistener - path cache event: type=initialized 2015-04-27 09:09:02845 1.2.0.snap info main admin.adminserverapplication - started adminserverapplication in 6.777 seconds (jvm running for 14.213) 2015-04-27 09:09:04010 1.2.0.snap info deploymentsupervisor-0 zk.containerlistener - path cache event: path=/containers/dc7692b1-979b-4fa3-a11a-3f35cdedc319 type=child_added 2015-04-27 09:09:04017 1.2.0.snap info deploymentsupervisor-0 zk.containerlistener - container arrived: container{name='dc7692b1-979b-4fa3-a11a-3f35cdedc319' attributes={groups= host=glenns-macbook-pro.local id=dc7692b1-979b-4fa3-a11a-3f35cdedc319 managementport=9395 ip=172.31.99.83 pid=99669}} 2015-04-27 09:09:04018 1.2.0.snap info deploymentsupervisor-0 zk.containerlistener - scheduling deployments to new container(s) in 15000 ms 2015-04-27 09:10:35003 1.2.0.snap info deploymentsupervisor-0 zk.zkjobdeploymenthandler - deployment status for job 'tfphj4ffb45d5-0d6c-4f22-b407-c313ce82b449': deploymentstatus{state=failederror(s)=org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'objectnameproperties' defined in null: could not resolve placeholder 'xd.stream.name' in string value """"${xd.stream.name}"""" nested exception is java.lang.illegalargumentexception: could not resolve placeholder 'xd.stream.name' in string value """"${xd.stream.name}"""" org.springframework.beans.factory.config.placeholderconfigurersupport.doprocessproperties(placeholderconfigurersupport.java:211) org.springframework.context.support.propertysourcesplaceholderconfigurer.processproperties(propertysourcesplaceholderconfigurer.java:180) org.springframework.context.support.propertysourcesplaceholderconfigurer.postprocessbeanfactory(propertysourcesplaceholderconfigurer.java:155) org.springframework.context.support.postprocessorregistrationdelegate.invokebeanfactorypostprocessors(postprocessorregistrationdelegate.java:265) org.springframework.context.support.postprocessorregistrationdelegate.invokebeanfactorypostprocessors(postprocessorregistrationdelegate.java:162) org.springframework.context.support.abstractapplicationcontext.invokebeanfactorypostprocessors(abstractapplicationcontext.java:606) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:462) org.springframework.boot.springapplication.refresh(springapplication.java:691) org.springframework.boot.springapplication.run(springapplication.java:321) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:139) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:214) org.springframework.xd.dirt.module.moduledeployer.dodeploy(moduledeployer.java:217) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:200) org.springframework.xd.dirt.server.container.deploymentlistener.deploymodule(deploymentlistener.java:365) org.springframework.xd.dirt.server.container.deploymentlistener.deployjobmodule(deploymentlistener.java:291) org.springframework.xd.dirt.server.container.deploymentlistener.onchildadded(deploymentlistener.java:181) org.springframework.xd.dirt.server.container.deploymentlistener.childevent(deploymentlistener.java:149) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:509) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:503) org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92) com.google.common.util.concurrent.moreexecutors$samethreadexecutorservice.execute(moreexecutors.java:297) org.apache.curator.framework.listen.listenercontainer.foreach(listenercontainer.java:83) org.apache.curator.framework.recipes.cache.pathchildrencache.calllisteners(pathchildrencache.java:500) org.apache.curator.framework.recipes.cache.eventoperation.invoke(eventoperation.java:35) org.apache.curator.framework.recipes.cache.pathchildrencache$10.run(pathchildrencache.java:762) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:745) caused by: java.lang.illegalargumentexception: could not resolve placeholder 'xd.stream.name' in string value """"${xd.stream.name}"""" org.springframework.util.propertyplaceholderhelper.parsestringvalue(propertyplaceholderhelper.java:174) org.springframework.util.propertyplaceholderhelper.replaceplaceholders(propertyplaceholderhelper.java:126) org.springframework.core.env.abstractpropertyresolver.doresolveplaceholders(abstractpropertyresolver.java:204) org.springframework.core.env.abstractpropertyresolver.resolverequiredplaceholders(abstractpropertyresolver.java:178) org.springframework.context.support.propertysourcesplaceholderconfigurer$2.resolvestringvalue(propertysourcesplaceholderconfigurer.java:175) org.springframework.beans.factory.config.beandefinitionvisitor.resolvestringvalue(beandefinitionvisitor.java:282) org.springframework.beans.factory.config.beandefinitionvisitor.resolvevalue(beandefinitionvisitor.java:204) org.springframework.beans.factory.config.beandefinitionvisitor.visitmap(beandefinitionvisitor.java:262) org.springframework.beans.factory.config.beandefinitionvisitor.resolvevalue(beandefinitionvisitor.java:198) org.springframework.beans.factory.config.beandefinitionvisitor.visitpropertyvalues(beandefinitionvisitor.java:141) org.springframework.beans.factory.config.beandefinitionvisitor.visitbeandefinition(beandefinitionvisitor.java:82) org.springframework.beans.factory.config.placeholderconfigurersupport.doprocessproperties(placeholderconfigurersupport.java:208) ... 31 more } {noformat}"""" and """"Use parentlastclassloader to create the modules applicationcontext. the parentlastclassloader is located in the spring-hadoop project. it will resolve classes first looking at the child context and then the parent. this works well for xd since the we want and dependencies of the module to be considered first and if not found resolve against the parent. it would be possible to even include other versions of .jars already in the parent classloaders (e.g. spring integration jars) but for now we will not immediately test that case. simplemodule needs to change to that we can pass in the classloader to use for creating the application context. the current implementation creates a genericapplicationcontext as a field initializer...that should change to be in the ctor. moduledeployer should implement .beanclassloaderaware. the classloader passed in to the beanclassloaderaware callback will be used as the ‘parent’ when creating the parentlastclassloader. the url[] to pass into parentlastclassloader should be ‘null’ or an empty array in this case of an older style module. (hopefully parentlastclassloader allows that type of fallback). *implementation suggestions:* the moduledeployer code is where the application context for the module is defined and instantiated. here is a possible impl path. 1. assuming we can always use parentlastclassloader (even for older style modules) then the moduledescriptor needs to return an array of url[] locations for the module geturl(). this is passed into the cto for simplemodule. the ctor then creates a new application context creates the parentclassloader sets the classloader on the application context and then proceeds as normal. 2.abstractmoduleregistry should try and load the resource from two possible locations e.g. ./modules/source/file/config/file.xml or ./modules/source/file.xml the module registry needs to be a bit smarter to know ah i see a config directory let me try ./config/file.xml otherwise just ./file.xml *how to verify it works.* 1. junit test in which one of the moduleregistry implementations points to a test directory that contains both old and new style modules. filemoduleregistry is probably a good choice here. need to test that the new getting for url[] works as expected. 2. existing tests should run as they did before in particular the shell integration tests."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have a rest api to point and push an archive that includes custom module definitions and configurations so that i don't have to manually move and set it up. *scope of this spike:* * assess customer requirement brainstorm and document options * socialize with the team to collect feedback * identify phases * create new stories"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build data pipeline using _kafka_ as as message bus in xd so that we can demonstrate some of the capabilities. *use case to consider:* * log aggregation and analysis * lambda architecture ** how to avoid code duplication ** how to eliminate tight coupling of business logic ** how kafka can be used for reliable reprocessing and similar to """"As a user i'd like to have the option to define access control list (acls) so that i can define access controls to the resource by 'each user' and what the privileges are for that 'resource'. *spike scope:* ** review customer use cases and come up with design specs ** identify the best approach that fits xd runtime ** identify scope for dsl and ui ** document next steps and phases"""" and similar to """"As a developer i'd like to study the taxi trips based on a stream of trip reports from new york city so that i can evaluate event-based systems in the context of real-time analytics using spring xd. [challenge details|http://www.debs2015.org/call-grand-challenge.html]"""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to create a stream such as _generator | perf-meter_ so that i can ingest 1m messages of 1000 bytes and one thread using xd's 'singlenode' container and measure performance characteristics."""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime. and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" and similar to """"As a developer i'd like to have a central place to manage external properties for applications across all the environments so i can provide server and client-side support for externalized configuration for xd-admin and xd-container servers."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Additional rest endpoint not working with security enabled i see the following error from the admin ui: get http://localhost:9393/jobs/executions/4/steps/4/progress.json 403 (forbidden)"""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to create initial version of the new module registry abstraction so we could leverage the foundation to make progress and test the respective spi ({{receptor}} or {{cloudcontroller}}) implementations. and similar to """"As a user i want to be able to provide security credentials to the xd shell so that i can interact with an xd admin server that is secured via basic auth technical implementation: add ---password and --username to the admin config command."""" and similar to """"As a s-c-s user i'd like to have the option to use more than one binder connection factory so i can mix and match where i consume and publish data. more details [here|https://github.com/spring-cloud/spring-cloud-stream/issues/140]."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Document direct binding as an s-c-d user i'd like to refer to documentation on """"direct binding"""" so i can use it as a reference to deploy a stream that includes directly bound modules. example: {code} java -jar spring-cloud-stream-module-launcher/target/spring-cloud-stream-module-launcher-1.0.0.build-snapshot.jar --modules=org.springframework.cloud.stream.module:time-source:1.0.0.build-snapshotorg.springframework.cloud.stream.module:filter-processor:1.0.0.build-snapshotorg.springframework.cloud.stream.module:filter-processor:1.0.0.build-snapshot --args.0.fixeddelay=7 --args.1.expression='payload.contains(""""6"""")' --aggregate=true --spring.cloud.stream.bindings.output=filtered {code}"""" and """"Tasks launcher should be able to record status to a central repository need infrastructure to capture the state from the environment (lattice local) running the task. task launcher needs ability to map the task state as it is reported from the cloud environment (lattice local) to the enumerated state as specified [#here|https://docs.google.com/document/d/1ttmqmiwsuefewyysafk8ji4z9ni-5f1vfeaiwhuzsgg/edit#heading=h.2ec94f2he9ly]. the state information needs to be recorded in the task_execution table enumerated [#here|https://docs.google.com/document/d/1ttmqmiwsuefewyysafk8ji4z9ni-5f1vfeaiwhuzsgg/edit#heading=h.2ec94f2he9ly]."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to publish performance benchmarks along with the infrastructure specifics so the users can use it as a reference while setting up spring xd cluster."""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to setup a performance testing infrastructure (rackspace) so i can start benching kafka baselines and continue with xd use-cases. and similar to """"As a spring xd user i'd like to use redis/sentinel cluster as the 'message bus' so i could create streams and batch pipelines."""" and similar to """"As a developer i'd like to migrate module deployment from the """"repository"""" abstraction (used for stream/job definitions) so i can create it as a pluggable runtime spi."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Use correct fs_default_name_key constant based on hadoop version used keep getting the following warning: warn spring shell conf.configuration:817 - fs.default.name is deprecated. instead use fs.defaultfs should switch to use the runtime value of the fs_default_name_key constant based on hadoop version used."""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to have the option of _websocket_ source module so that i can create a interactive communication channel between user's browser session and the runtime to ingest browser based events and activities. *reference:* [spring integration websocket support|https://github.com/spring-projects/spring-integration/tree/master/spring-integration-websocket/src] and similar to """"As a performance tester i'd like to rerun baseline benchmarks with batching enabled on rabbit so that i can compare the results with previous performance snapshots. note: - batchingenabled = true - batchingsize = 100 (default) we could also vary default size to compute and record at granular level."""" and similar to """"As a user i'd like to have a redis based _aggregation_ over field-value counters so that i can continuously write the aggregation in redis as we ingest more data. *scope:* * port specs from [previous implementation|https://github.com/spring-projects/spring-xd/wiki/old---aggregate-field-value-counters]. * identify gaps * update reference documentation"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add support for specifying an undeploy-condition for stream definitions in some scenarios like when performing exploratory data-analysis on streaming data one often create a stream keep it running for some time (or until some condition is met) and then stop the stream and start to investigate the collected data. it would be cool to be able to specify some undeploy condition like e.g. a timeout after x minutes no. of events collected a specific counter past a given threshold file-size greater then x etc."""" is a not user story because it is most similar to: """"More dsl work: checking behaviour for non-deployable streams with support for substreams/parameterized streams now in the parser it will be possible to create a stream that cannot be deployed: it may not fit the source/processor*/sink structure or it is a parameterized stream with no default values for parameters. need to check how xd is going to handle these - after creating them attempting to 'deploy' them should return appropriate errors. (they should exist in the stream directory)."""" and similar to """"Investigate dropped module deployment requests we have observed in unit tests (see abstractsinglenodestreamintegrationtests) that(redis/singlenode) occasionally fail. the root cause must be investigated further but there is some evidence to suggest that the control messages (moduledeploymentrequests) are not always received and handled by the moduledeployer. this does not produce an error but results in runtime stream failures. this problem may be resolved as part of the planned deployment spi but is being tracked here until we are certain that it has been resolved."""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Able to bypass authorization checks by appending """".json"""" or """".xml"""" how to reproduce: 1) enable security 2) use a user that has the following role only: """"role_create"""" 3) make a normal rest call: {code} http://localhost:9393/runtime/containers {code} yields the *desired response*: {code} { """"timestamp"""": """"2015-03-26t16:51:17.010z"""" """"status"""": 403 """"error"""": """"forbidden"""" """"message"""": """"access is denied"""" """"path"""": """"/runtime/containers"""" } {code} now try: {code} http://localhost:9393/runtime/containers.json {code} this produces: {code} { """"links"""": [ { """"rel"""": """"self"""" """"href"""": """"http://localhost:9393/runtime/containers{?pagesizesort}"""" } ] """"content"""": [ { """"containerid"""": """"86eea5aa-b18e-41c5-a3f5-42dfa10713c1"""" """"groups"""": """""""" """"deploymentsize"""": 0 """"deployedmodules"""": [ ] """"messagerates"""": null """"attributes"""": { """"ip"""": """"10.0.1.119"""" """"host"""": """"integration.local"""" """"groups"""": """""""" """"pid"""": """"52686"""" """"id"""": """"86eea5aa-b18e-41c5-a3f5-42dfa10713c1"""" } """"links"""": [ { """"rel"""": """"self"""" """"href"""": """"http://localhost:9393/runtime/containers/86eea5aa-b18e-41c5-a3f5-42dfa10713c1"""" } ] } ] """"page"""": { """"size"""": 20 """"totalelements"""": 1 """"totalpages"""": 1 """"number"""": 0 } } {code}"""" and """"Spring xd ec2 needs to setup cluster that uses static resources. h1. summary user wants the ability to deploy an ec2 cluster where the admin & containers use a pre existing zk ensemble rabbit and redis instance that are deployed on different machines. h2. current functionality currently spring-xd-ec2 sets up its containers & admin server to use a zk rabbit and redis that are provisioned and collocated with the admin server. h2. detail the following properties will be added to the spring-xd-ec2.properties # *spring_zk_client_connect* - contains a comma delimited list of zk hosts:ports for a ensemble. the application will check to see if the port is open on at least of the servers in the list if not deployment will fail. default is adminserver_host:2181. # *spring_rabbitmq_addresses* - contains a comma delimited list of hosts:ports for a rabbit cluster. the application will check to see if the port is open on at least of the servers in the list if not deployment will fail. default is adminserver_host:5672. # *spring_redis* - contains a host:port for a redis instance. the application will check to see if the port is open if not deployment will fail. default is adminserver_host:5672. # *ec2_zone* - user can specify the zone to which the containers and admin will be deployed. if not present aws will decide which zone to deploy the cluster."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Streamserver context lifecycle issues the {{moduledeployer}} calls {{getbeansoftype}} before the context has had its {{propertysourcesplaceholderconfigurer}} attached. this can cause issues with {{factorybean}} s with placeholders in constructor args because the unresolved placeholder is used when the {{factorybean}} is pre-instantiated to determine the type of object it will serve up."""" is a user story, and is worth 8 story points because it is most similar to: As a user i need the ability to configure docker xd containers so that i can link to external services such as _rabbit redis zookeeper hadoop mongo etc_. includes pointers to: * linking/binding attributes * environment variables and similar to """"As a user i'd like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit's perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1"""" and similar to """"As a s-c-s developer i'd like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update processors script section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#script"""" is a not user story because it is most similar to: """"Add accepted type logic to module a module can declare one ore more payload types it will accept. this will inform the runtime re. automatic payload conversion. this can be done in the module xml configuration and processed by streamplugin"""" and similar to """"Use dot as the composed module option separator following merge of https://github.com/spring-projects/spring-xd/pull/601 use dot as the separator for a composed module option. need change to the parser to accept dots"""" and similar to """"Need to create a persistent-job-registry in order to hook up the to get access to all the jobs available the job registry has to be shared. currently the only implmentation is is the mapjobregistry. ==== testability. ==== the admin will need to be see all jobs created by its containers."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update diagrams that show control transport the first 2 images in the documentation section linked below should no longer show redis rabbit or local for the communication between admins and containers. rather we need to show zookeeper. https://github.com/spring-projects/spring-xd/wiki/architecture"""" is a not user story because it is most similar to: """"Update reactor stream processor to use latest snapshots the code base is changing a bit so using 2.0 m1 for development is stable up until all major jira issues have bee completed. then we should track snapshots in preparation to move to 2.0. m2 when it gets released."""" and similar to """"Tapping a stream with multiple labelled filters causes duplicate messages test case is here: https://github.com/spring-projects/spring-xd/blob/master/src/test/scripts/basic_stream_tests#l49 we would expect one message in the counter but get 3."""" and similar to """"Create a test case for insulating environment variables in module property lookup for pr https://github.com/spring-projects/spring-xd/pull/682 see if one can have a test case such that a test module would have a 'path' property that overlaps with the environment variable. it should never resolve to the real unix/windows path."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Add """"spring-xd-exec"""" directory to git repo without the directory spring xd cannot be imported into sts using its own gradle support."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies. and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" and similar to """"As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create rest endpoint for validation of a job/stream definition have a rest endpoint that would run validation of a definition (without actually attempting the creation let alone deployment) and return a structured representation of validation errors. this to benefit the web ui"""" is a user story, and is worth 3 story points because it is most similar to: As a user i'd like to have the option to extend compression support so that i can override the defaults and customize as needed. follow-up from this pr: https://github.com/spring-projects/spring-xd/pull/1346 and similar to """"As a developer i'd like to isolate the hadoop tests in a different project so that the dirt project doesn't have to depend upon thus eliminating the incorrect cp file generation in eclipse."""" and similar to """"As a user i'd like to have concurrency and compression support for kafka so that i can increase performance throughput and/or increase responsiveness *things to consider:* * make global configuration options be """"defaults"""" and allow per-deployment overrides * add options for ** concurrency ** compression support"""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add ability to logout using the admin ui while there is a server endpoint to logout we don't have that ability yet from the ui. as indicated by xd-2122 we will also need a meta-data rest endpoint so we can interrogate whether security is enabled whether the user is logged etc. so we can fulfill the requirements: * show a logout button only if a) security is enabled and b) user is logged in * show the username and/or full name of the user being logged in"""" is a not user story because it is most similar to: """"Suppress deliverymode header in rabbitmq source related to xd-2567 which fixed this problem but only in the bus. {quote} 2016-02-19t18:25:24-0500 1.2.1.release warn simpleasynctaskexecutor-1 support.defaultamqpheadermapper - skipping header 'amqp_deliverymode' since it is not of expected type [class org.springframework.amqp.core.messagedeliverymode] it is [class org.springframework.amqp.core.messagedeliverymode] {quote}"""" and similar to """"Automate execution of gradle pushgenerateddocs should be part of the daily build. one """"easy"""" way to do it would be to use the """"hardcoded"""" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though"""" and similar to """"Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Remove remaining thread.sleeps from the job tests get rid of all the thread.sleeps and code that supported them."""" is a not user story because it is most similar to: """"Remove spring-xd-codec from spring xd source tree and build replace with spring-cloud-streams (or spring-cloud-streams-codec) dependency"""" and similar to """"Hadoopdistrooptionhandler fails when xd_home ends with a """"/"""" also the approach may not work as expected on windows."""" and similar to """"Acceptance tests need to create or use an existing topic prior to executing test"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Kryo redis serializer the current (xd) uses an inadequate {{messageredisserializer}} when {{extractpayload}} is false (not currently being used). when porting this to si the serializer will be dropped. suggest creation of kryo serializer for messages for when redis source/sinks are created."""" is a not user story because it is most similar to: """"Provide cmdline options validation wherever they come from (cmd line args or env_vars) options such as transport analytics etc should be validated and issues should be reported to users"""" and similar to """"Harmonize rest features between deployment profiles as an s-c-d user i'd like to take advantage of admin running on variety of platforms such as lattice yarn or cf. i'd like to access rest apis consistently across these platforms."""" and similar to """"Rename xdcontainer and associated classes to node rename xdcontainer containermain *containerlauncher containerlauncherfactory and any variable or methodnames bean names etc. that refer to container in favor of the term 'node'. eliminate the dirt.container package and move node into .server"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Vary prefecth size (ec-db-3) use a single producer single consumer message size of 1000 bytes. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the prefetch size. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *prefetch sizes:* * 1 * 10 * 50 * 100 * 10000 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" is a not user story because it is most similar to: """"Vary prefetch size (db-3) use a single producer single consumer message size of 1000 bytes. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the prefetch size. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *prefetch sizes:* * 1 * 10 * 50 * 100 * 10000 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Increase exit description text field on job execution process step page the step execution process (http://localhost:9393/admin-ui/#/jobs/executions/38/52) page should list more lines of text for 'exit description' field to make sense of error messages. *scope:* investigate how much information can be collected directly from the executioncontext. it may be dependent on the error types. let's have the observation documented to decide next steps."""" and similar to """"More dsl work: checking behaviour for non-deployable streams with support for substreams/parameterized streams now in the parser it will be possible to create a stream that cannot be deployed: it may not fit the source/processor*/sink structure or it is a parameterized stream with no default values for parameters. need to check how xd is going to handle these - after creating them attempting to 'deploy' them should return appropriate errors. (they should exist in the stream directory)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Sparkapp batch job is not running from the latest master i couldn't run sparkapp as batch job. the spark application process gets launched and it doesn't complete and there are no errors at the output."""" is a not user story because it is most similar to: """"Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn't depend on `httpclient`"""" and similar to """"Address already in use for tomcat/hsqldb should fail completly currently process is left running and if logs / sysout are not monitored you have no clue"""" and similar to """"Processortest.testfailedsink needs to use http as its test source also check the jmx output to see that the filter rejected the entry."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to review the current sonar violations so that i can fix the relevant and update the irrelevant ones as invalid."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Ui provide fixed version numbers for npm and bower dependencies"""" is a user story, and is worth 5 story points because it is most similar to: As a developer i'd like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to """"As a spring xd developer i'd like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller"""" and similar to """"As a user i'd like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Exclude commons-logging from final distro1 xd/lib includes jcl-over-slf4j so we don't need additional commons-logging jars in the modules or extensions: https://github.com/spring-projects/spring-xd/pull/610"""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to create initial version of the new module registry abstraction so we could leverage the foundation to make progress and test the respective spi ({{receptor}} or {{cloudcontroller}}) implementations. and similar to """"As a user i'd like to have the option to specify system properties that will be passed in to the sqoop job which runs in it's own java process. this is needed for defining memory usage and also for defining some options for various connector implementations."""" and similar to """"As a spring-cloud-data developer i'd like to use an in-memory stream definition repository so i don't have to spin up a store obviously this will not persist between application executions but it will be useful for a simplified development experience."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add documentation for #jsonpath functionality with spel based processors see issue https://jira.springsource.org/browse/xd-862 the docs should be updated to include examples that show how to use the standard 'spel' based splitter transformer filters with #jsonpath expressions."""" is a not user story because it is most similar to: """"Split richgauge in 2 support of the alpha parameter is awkward and can confuse people who are expecting a simple average mean. consider splitting richgauge in two flavors: arithmetic and exponential. involves quite some work at the repository handler and rest level though..."""" and similar to """"Add aliases concept to module options and use in composed modules following merge of https://github.com/spring-projects/spring-xd/pull/601 allow a module option to be known by several names and elect a short name in composed module options when there is no ambiguity"""" and similar to """"Use mocks in shell tests instead of using real `moduledeployer` try using mocks so that the module deployer downloading the maven co-ordinates from repo can be avoided (for module deployment case). since module deployer and controllers are tested individually it would be good to focus on shell functionality only for the shell tests."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Spring_rabbitmq_addresses environment variable is ignored when trying to configure xd to use a rabbitmq instance other than the default localhost:5672 a user is supposedto updated the """"spring_rabbitmq_addresses"""" environment variable or the spring.rabbitmq.addresses setting in the servers.yml file. in this case xd is ignoring this environment variable. h3. steps to reproduce # set the transport by using """"export xd_transport=rabbit"""" # set the spring_rabbitmq_addresses by """"export spring_rabbitmq_addresses=foo:5672"""" # startup a admin container on your local machine # deploy ticktock #* this should fail #* start up a local rabbitmq #* deploy a new ticktock and stream will deploy."""" is a not user story because it is most similar to: """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"Better approach to handle module execution framework currently when the module doesn't need to go through message bus binding the module interface provides 'shouldbind()` method to return false. the shouldbind() is being used in other place where moduletypeconversionplugin is excluded for spark streaming modules. we need a better approach to refactor this. also see the discussion here: https://github.com/spring-projects/spring-xd/pull/1438#discussion_r24150937"""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Zookeeper job deployments path state is not updated after successful deployment after successful job deployment the job deployments path in zk doesn't get updated with the data {""""state"""": """"deployed""""} though this data is not used for deployed instance repository (org.springframework.xd.dirt.stream.zookeeper.zookeeperjobrepository) to check for the deployment status it may be better to have this state updated like stream deployment path."""" is a not user story because it is most similar to: """"Investigate module classloader leakage see report at https://github.com/spring-projects/spring-xd/issues/661 this should not happen as the module holds the classes that hold the classloader but who knows. an integration test that verifies this would be nice albeit tricky."""" and similar to """"Handle 'deploying' state at the admin ui when the job is in """"deploying"""" state until we decide whether the job is actually """"deployed"""" or """"failed""""/""""incomplete"""" there is no way to know if it is fine to launch/schedule (though the launching requests are going to go to the job launch request queue). we could either disable both """"deploy""""/""""undeploy"""" until the state changes from """"deploying""""?"""" and similar to """"Add code coverage to gradle build build should be able to generate code coverage reports. after a quick tour of the intertubes it seems that jacoco is a well maintained project and has first class support inside gradle. http://www.gradle.org/docs/current/userguide/jacoco_plugin.html"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create acceptance test for source trigger create a test specific to for the trigger source instead of it being tested with other acceptance tests."""" is a user story, and is worth 5 story points because it is most similar to: As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to """"As a developer i'd like to revisit the existing design and identify known limitations and/or the gaps."""" and similar to """"As a user i'd like to parameterize codegen options so i can generate code on the fly as needed."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Documentation for enhanced hdfs sink with paths based off date/time/message content"""" is a user story, and is worth 8 story points because it is most similar to: As a s-c-d developer i'd like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to """"As a s-c-d developer i'd like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences."""" and similar to """"As a s-c-d user i'd like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Spring xd very poor performance when using redis as transport when using redis as transport bus there is a problem when using many streams and taps. basically the maxtotal parameter of org.apache.commons.pool2.genericobjectpool default is 8. after some streams are deployed it starts to occur concurrency problems hence the number of inbound redis channel adapters is larger than that number. a more detailed explanation is in stackoverflow: http://stackoverflow.com/questions/25851660/spring-xd-very-poor-performance-when-using-redis-as-transport"""" is a not user story because it is most similar to: """"Need to support xd_admin_host and xd_containers in test properties if a user wishes to run the acceptance tests from their local machine against an xd instance on ec2 the only way to establish container and admin server is via the artifact ec2servers.csv. and this has to be copied to the spring-xd-integration-test subdirectory. the user should be able to set the xd_admin_host and xd_containers in the application-<profile>.properties file."""" and similar to """"[flo] ui unresponsive after some time the chrome ui interface for flo stream creation stops responding after some time. it starts working once the browser history/ cookies etc. are cleaned up. . the drop down stops working . i'm unable to look at or edit module properties . connecting different modules doesn't work either . drag and drop operations still work . command line stream creation still works is anyone else facing these issues ? thanks !"""" and similar to """"Fix mqtt module properties use of dot in property name prevents the user from specifying a value in stream definition also defaults are repeated at .xml and .properties level"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Mask database passwords in rest controllers and admin ui when deploying a batch job the ui displays the database password found in the server.yml in plain text to the user. at the very least this should be displayed in a password field so it's masked out and have it masked out in the resulting definition at the bottom of the page. ideally we wouldn't provide the password on that page at all and only accept overriding options (if the user wants a password other than the configured one enter it…otherwise we'll use what we have). i'm finding that this occurs in other places as well. a full pass though of the ui should be done to mask out passwords (or eliminate their display all together)."""" is a not user story because it is most similar to: """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Better approach to handle module execution framework currently when the module doesn't need to go through message bus binding the module interface provides 'shouldbind()` method to return false. the shouldbind() is being used in other place where moduletypeconversionplugin is excluded for spark streaming modules. we need a better approach to refactor this. also see the discussion here: https://github.com/spring-projects/spring-xd/pull/1438#discussion_r24150937"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to document how to nest batch jobs and workflows in xd so it will be easy for end-users to use it as reference."""" is a user story, and is worth 8 story points because it is most similar to: As a spring xd user i'd like to have ipython notebook integration so i can perform interactive data computations in real-time. and similar to """"As a s-c-d developer i'd like to refactor cc spi deployer with cf java-client so i can improve the overall design and performance."""" and similar to """"As a field engineer i'd like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create script-based batch itemprocessor this would be included in the ootb batch jobs to optionally process the loaded tuple with a configured script."""" is a not user story because it is most similar to: """"Ip address used as default data when creating paths invoking {{paths.ensurepath}} is creating a default value of the host ip address instead of the expected """"empty"""" value."""" and similar to """"Rename packages that is applicable for both stream/job determine a better package name for the following packages once we have a common model that applies to both stream/job: `org.springframework.xd.dirt.stream` `org.springframework.xd.dirt.stream.zookeeper`"""" and similar to """"Documentation on xd architecture show overall flow of data in a stream the server components 'admin' and 'container'. how modules are deployed."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Schedule button shows up but does not perform any task i know that the feature is not ready but we either should post a message to the user that the feature is not available or hide the button"""" is a not user story because it is most similar to: """"Ip address used as default data when creating paths invoking {{paths.ensurepath}} is creating a default value of the host ip address instead of the expected """"empty"""" value."""" and similar to """"Upgrade to spring data fowler release spring data gemfire is version 8.0.0 in folwer which is the same as in bds (should check minor version number in bds). atm we are using gemfire 7.0.x"""" and similar to """"Fix failing script integration test see https://build.spring.io/browse/xd-scripts-723"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add resourcemoduleregistry with custom modules location if someone wants to have a dedicated location (module registry) for the custom modules and can be accessed from any spring supported resource url location then we need to support. currently we use delegating moduleregistry which uses resourcemoduleregistry implementations that look for location `xd.module.home` and `classpath:/modules/`. maybe we can add an additional resourcemoduleregistry with `xd.custom.module.home` and use it for custom modules."""" is a not user story because it is most similar to: """"Create a sqoop job and required batch tasklet integration code based on the poc from xd-2124 we should create the actual implementation. things to consider to store in step context: - capture log output/mapreduce job counters - capture last-value from incremental imports"""" and similar to """"Update to spring amqp 1.3.2 if the rabbit source receives a message it can't convert a {{messageconversionexception}} is thrown and the message is rejected (and requeued) causing an endless loop. add an {{errorhandler}} to the inbound adapter to detect and convert {{mce}} to {{amqprejectanddontrequeueexception}}. also consider adding a retry interceptor to do the same for exceptions in modules (when using local transport)."""" and similar to """"Retrieve information for a gauge todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Password for sqoop job definition is in the open while creation sqoop and providing the password for the sqoop jobs the guid does not mask the password with a '*********'."""" is a not user story because it is most similar to: """"Inject moduledefinitionrepository into modulescontroller currently modulescontroller creates the moduledefinitionrepository instance with moduleregistry. instead we should inject the moduledefinitionrepository into modulescontroller directly."""" and similar to """"Enhance tuplecodec performance profile tuplecodec and implement performance optimizations"""" and similar to """"The hdfs store library should support compression when writing text need to support writing text in compressed format should initially support: - bzip2 - lzo"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the custom module (built as uber-jar) hosted in hdfs so that i can deploy the module to newly arriving containers."""" is a user story, and is worth 3 story points because it is most similar to: As a developer i'd like to add {{undeployed}} status for yarn spi so i can represent the correct status instead of the current {{unknown}} state. and similar to """"As a user i'd like to have a shell command so that i can point to the custom-built _module_ archive and push it to the runtime for immediate usage."""" and similar to """"As a user i'd like to have spring 'core' upgraded to 4.1.1 (_milestone_ ) so that i can benefit from performance improvements associated with 'compiled' spel and other enhancements."""" (which are all user stories with a worth of 3 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Update to reactor 2.0 build snapshots"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Retrieve information for a rich gauge todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" is a not user story because it is most similar to: """"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn't do much right now and logic would better live in the 'handler' imo) * have rest controllers depend on xrepository in all cases"""" and similar to """"Create a receptor partitionhandler and related stepexecutionrequesthandler h2. narrative as a developer i need to be able to create a partitioned batch job that uses diego tasks for partition slaves. h2. back story a new partition handler should be created that uses the receptor api to launch tasks for each of the slaves (configurable via grid size)."""" and similar to """"Support map payloads in field-value-counter the {{fieldvaluecounterhandler}} handles {{pojo}} {{tuple}} and {{json}}. {{#jsonpath}} emits a {{linkedhashmap}}. the handler should natively support a {{map}}. see http://stackoverflow.com/questions/33270926/springxds-field-value-counter-doesnt-work-after-splitting-json-object-array-in/33281783#33281783"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a s-c-s user i'd like to use {{kinesis}} module so i can use it as {{source}} module to build streaming pipeline."""" is a user story, and is worth 2 story points because it is most similar to: As a s-c-s user i'd like to use {{kinesis}} module so i can use it as {{sink}} module to build streaming pipeline. and similar to """"As a developer i'd like to complete the remaining work with debs challenge so i can submit by the deadline."""" and similar to """"As a developer i'd like to replace all references of spring xd with spring cloud data flow."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Modules that depend on httpclient fail when running on yarn on hadoop 2.4.x and later trying to run a twitterstream on yarn on hdp 2.1 and get the following: {code} 14/08/08 12:12:50 error server.containerregistrar: exception deploying module org.springframework.beans.factory.beancreationexception: error creating bean with name 'org.springframework.integration.x.twitter.twitterstreamchanneladapter#0' defined in url [file:./spring-xd-yarn-1.0.0.release.zip/modules/source/twitterstream/config/twitterstream.xml]: cannot resolve reference to bean 'twittertemplate' while setting constructor argument nested exception is org.springframework.beans.factory.beancreationexception: error creating bean with name 'twittertemplate' defined in url [file:./spring-xd-yarn-1.0.0.release.zip/modules/source/twitterstream/config/twitterstream.xml]: instantiation of bean failed nested exception is org.springframework.beans.beaninstantiationexception: could not instantiate bean class [org.springframework.social.twitter.api.impl.twittertemplate]: constructor threw exception nested exception is java.lang.noclassdeffounderror: org/apache/http/impl/client/httpclients org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvereference(beandefinitionvalueresolver.java:336) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:108) org.springframework.beans.factory.support.constructorresolver.resolveconstructorarguments(constructorresolver.java:646) org.springframework.beans.factory.support.constructorresolver.autowireconstructor(constructorresolver.java:140) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.autowireconstructor(abstractautowirecapablebeanfactory.java:1114) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1017) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:504) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:475) org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:302) org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:228) org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:298) org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:193) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:703) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.springapplication.refresh(springapplication.java:691) org.springframework.boot.springapplication.run(springapplication.java:320) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:142) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:203) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:98) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:88) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:78) org.springframework.xd.dirt.server.containerregistrar.deploymodule(containerregistrar.java:231) org.springframework.xd.dirt.server.containerregistrar.deploystreammodule(containerregistrar.java:577) org.springframework.xd.dirt.server.containerregistrar.onchildadded(containerregistrar.java:447) org.springframework.xd.dirt.server.containerregistrar.access$800(containerregistrar.java:95) org.springframework.xd.dirt.server.containerregistrar$deploymentlistener.childevent(containerregistrar.java:826) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:509) org.apache.curator.framework.recipes.cache.pathchildrencache$5.apply(pathchildrencache.java:503) org.apache.curator.framework.listen.listenercontainer$1.run(listenercontainer.java:92) com.google.common.util.concurrent.moreexecutors$samethreadexecutorservice.execute(moreexecutors.java:297) org.apache.curator.framework.listen.listenercontainer.foreach(listenercontainer.java:83) org.apache.curator.framework.recipes.cache.pathchildrencache.calllisteners(pathchildrencache.java:500) org.apache.curator.framework.recipes.cache.eventoperation.invoke(eventoperation.java:35) org.apache.curator.framework.recipes.cache.pathchildrencache$10.run(pathchildrencache.java:762) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name 'twittertemplate' defined in url [file:./spring-xd-yarn-1.0.0.release.zip/modules/source/twitterstream/config/twitterstream.xml]: instantiation of bean failed nested exception is org.springframework.beans.beaninstantiationexception: could not instantiate bean class [org.springframework.social.twitter.api.impl.twittertemplate]: constructor threw exception nested exception is java.lang.noclassdeffounderror: org/apache/http/impl/client/httpclients org.springframework.beans.factory.support.constructorresolver.autowireconstructor(constructorresolver.java:278) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.autowireconstructor(abstractautowirecapablebeanfactory.java:1114) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1017) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:504) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:475) org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:302) org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:228) org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:298) org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:193) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvereference(beandefinitionvalueresolver.java:328) ... 41 more caused by: org.springframework.beans.beaninstantiationexception: could not instantiate bean class [org.springframework.social.twitter.api.impl.twittertemplate]: constructor threw exception nested exception is java.lang.noclassdeffounderror: org/apache/http/impl/client/httpclients org.springframework.beans.beanutils.instantiateclass(beanutils.java:164) org.springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:125) org.springframework.beans.factory.support.constructorresolver.autowireconstructor(constructorresolver.java:270) ... 50 more caused by: java.lang.noclassdeffounderror: org/apache/http/impl/client/httpclients org.springframework.http.client.httpcomponentsclienthttprequestfactory.<init>(httpcomponentsclienthttprequestfactory.java:74) org.springframework.social.support.clienthttprequestfactoryselector$httpcomponentsclientrequestfactorycreator$1.<init>(clienthttprequestfactoryselector.java:77) org.springframework.social.support.clienthttprequestfactoryselector$httpcomponentsclientrequestfactorycreator.createrequestfactory(clienthttprequestfactoryselector.java:77) org.springframework.social.support.clienthttprequestfactoryselector.getrequestfactory(clienthttprequestfactoryselector.java:52) org.springframework.social.oauth1.abstractoauth1apibinding.createresttemplatewithculledmessageconverters(abstractoauth1apibinding.java:188) org.springframework.social.oauth1.abstractoauth1apibinding.createresttemplate(abstractoauth1apibinding.java:169) org.springframework.social.oauth1.abstractoauth1apibinding.<init>(abstractoauth1apibinding.java:70) org.springframework.social.twitter.api.impl.twittertemplate.<init>(twittertemplate.java:79) sun.reflect.nativeconstructoraccessorimpl.newinstance0(native method) sun.reflect.nativeconstructoraccessorimpl.newinstance(nativeconstructoraccessorimpl.java:57) sun.reflect.delegatingconstructoraccessorimpl.newinstance(delegatingconstructoraccessorimpl.java:45) java.lang.reflect.constructor.newinstance(constructor.java:526) org.springframework.beans.beanutils.instantiateclass(beanutils.java:148) ... 52 more {code}"""" and """"Add support for dynamic routing it should be possible to create streams like the following which rely upon named channel support and dynamic routing capabilities: {code} http | somerouter :x > xtransformer | hdfs :y > ytransformer | hdfs {code} the 'somerouter' processor could return """"x"""" or """"y"""" which determines the downstream path for each message. this should be implemented in such a way that any developer adding a router module would only need to deal with existing spring integration semantics (in this case only considering the return of """"x"""" or """"y"""" - whether it be spel or a pojo method invocation). perhaps in the plugin that modifies a module context we could simply add a new channelresolver implementation (by adding that channelresolver as a bean and/or a beanpostprocessor that configures that as the resolver for any router if necessary). that channelresolver would have a reference to the channelregistry so that the router actually sends its messages to those shared channels. the shared channels themselves would have been created as long as a valid downstream flow has been defined."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create test with jdbc sink and initializedb=false see https://github.com/spring-projects/spring-xd/blob/master/src/test/scripts/jdbc_tests#l96 and https://github.com/spring-projects/spring-xd/blob/master/src/test/scripts/jdbc_tests#l64 the second assert has initializedb=false and so there are double the number of rows running the job a second time."""" is a not user story because it is most similar to: """"Remove test scripts from xd the acceptance tests cover the entire suite of script tests. thus they are no longer needed. the only test that was remaining was posting 10 messages to a http source and writing to a long and making sure we didn't get an error. this test (httpbash) was never called from the scripts ci build."""" and similar to """"Spike: study options for loading reusable configurations scd admin will have connection information for a task and job repository. this information will need to be transferred to the task launcher. the scope is to study the following options: * would the default place for configurations be in the yaml file? * {{config-server}} should be an option? * if nothing specified the default is always yaml?"""" and similar to """"Upgrade to io.projectreactor breaks generated poms ./gradlew install fails for spring-xd-extension-batch and spring-xd-extension-reactor. the first case is a simple update to gradle/build-extensions.gradle. the 2nd causes several compilation errors that are not trivial for a reactor noob."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Npe in abstractreactormessagehandler when the {{broadcastermessagehandler}} is defined as a {{@serviceactivator}} {{@bean}} the output channel must be set on the handler not in the annotation. the handler should detect a {{null}} {{outputchannel}}. see http://stackoverflow.com/questions/32462059/spring-xd-reactor-streams-with-configuration-npe"""" is a not user story because it is most similar to: """"Deployment properties should use label instead of name stream create foo --definition """"label: bar | xxxx"""" stream deploy foo --properties """"module.label.yyy=zzz"""" seems to work but it does not. the pre-validation is correct but downstream deployment logic still looks for module.bar (instead of module.label)"""" and similar to """"Streamline command-line arg management command line arguments (and especially their default values) are currently scattered around different places. the aim is to regroup those in a common place (*options classes make sense). also not very happy with how system properties are used as a vehicle for options.transport / options.home"""" and similar to """"Remove use of system property xd.home to define location for install location rely on environment variable xd_home this is in the adminmain and containermain. can get the environment property directly in java code unless provided explicitly on the command line using --xdhomedir."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Vary queue number (b-7) based on the the results from b-6 select the number of consumer/producers that give a distinct >5% increase in message rate. below 5% change in message rate prefer lower consumer/producer count. vary the number of perftest instances that are run simultaneously and use their own independent queue from 1 until the overall messages/sec on the broker plateaus. note the cpu performance using ‘top’ for the broker and perftest processes. test 1 (2 queues) * -a -u q1 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q2 -p -x 1 -y 1 -s 1000 -z 60 -q 500 test 2 (3 queues) * -a -u q1 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q2 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q3 -p -x 1 -y 1 -s 1000 -z 60 -q 500 test 3 (4 queues) * -a -u q1 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q2 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q3 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q4 -p -x 1 -y 1 -s 1000 -z 60 -q 500 test 4 (5 queues) * -a -u q1 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q2 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q3 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q4 -p -x 1 -y 1 -s 1000 -z 60 -q 500 * -a -u q5 -p -x 1 -y 1 -s 1000 -z 60 -q 500 etc..."""" and """"Create xd shell integration test parser since most of the xd.shell.itests will do more then one thing (deploy a stream start it add a tap add a job stop etc) we decided to decouple writing testcases with running it. test cases will be written in spring-shell scriptlets. scriptlets are json files with command and expectedresult as tokens. here's an example: {code} { """"testscript"""": [ {""""command"""" : """"stream create --definition """"http | file"""" --name http2file"""" """"result"""" : """"created new stream 'http2file'""""} {""""command"""" : """"stream list"""" """"result"""" : """"...""""} ] } {code} a parser will parse scriptlets executes it and asserts on expected results."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Can't create http source while tcp is used as a source and sink on singlenode [problem] can't use tcp source sink and http together on single node. while creating tests for ci i tried to create the following: [steps to reproduce] xd:>stream create fooout --definition """"tcp|file"""" created new stream 'fooout' xd:>stream create fooin --definition """"http --port=9002|tcp"""" command failed org.springframework.xd.rest.client.impl.springxdexception: failed to bind to: 0.0.0.0/0.0.0.0:9000. possibly the port is already in use. even if i use different ports for the tcp i still get failures pointing to 9000. [extra notes] the stream below is works. xd:>stream create fooout --definition """"tcp|file"""" created new stream 'fooout' xd:>stream create fooin --definition """"time|tcp"""" *stack trace attached*"""" and """"Duplicate messages on tap if i fiddle with the testtappingwithlabels method i can reproduce the same issue: httpsource source = newhttpsource() filesink sink = newfilesink().binary(true) filesink tapsink1 = newfilesink().binary(true) stream().create(""""myhttp"""" """"%s | flibble: transform --expression=payload.touppercase() | flibble2: transform --expression=payload.touppercase() | %s"""" source sink) stream().create(""""mytap4"""" """"tap:stream:myhttp.flibble > transform --expression=payload.replaceall('a''.') | %s"""" tapsink1) source.ensureready().postdata(""""dracarys!"""") assertthat(sink eventually(hascontentsthat(equalto(""""dracarys!"""")))) assertthat(tapsink1 eventually(hascontentsthat(equalto(""""dr.c.rys!"""")))) java.lang.assertionerror: expected: """"dr.c.rys!"""" trying at most 10 times but: failed after 10*100=1000ms: """"dr.c.rys!dr.c.rys!"""""""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Easier customization of headers passed by redismessagebus http://stackoverflow.com/questions/25072967/spring-xd-redis-message-bus-removing-headers-from-the-message/25081538#25081538 currently you have to modify {{redis-bus.xml}} in the dirt jar."""" is a user story, and is worth 5 story points because it is most similar to: As a spring xd developer i'd like to create initial version of the new module registry abstraction so we could leverage the foundation to make progress and test the respective spi ({{receptor}} or {{cloudcontroller}}) implementations. and similar to """"As a s-c-s user i'd like to have the option to use more than one binder connection factory so i can mix and match where i consume and publish data. more details [here|https://github.com/spring-cloud/spring-cloud-stream/issues/140]."""" and similar to """"As a user i want to be able to provide security credentials to the xd shell so that i can interact with an xd admin server that is secured via basic auth technical implementation: add ---password and --username to the admin config command."""" (which are all user stories with a worth of 5 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Naming consistency for named channels there seems to be some inconsistency with the naming strategy for the named channels. for example: if we create a job """"j1"""" the job launching request queue name in the message broker would """"job:j1"""". to send a launching request we can either use """"queue:job:j1"""" or """"job:j1"""" (both seems to work). if we create a stream with the named p2p channel """"foo"""" we expect to use the syntax """"queue:foo"""" and the message broker will have the queue name """"queue:foo"""" the streamconfigparser resolves the source/sink channel names for tap to deduce the module index from the channel component: channelnode.resolve(streamlookupenvironment env) but in case of the named channels that have prefix """"topic:"""" or """"queue:"""" their names are used as is the only exception in a case where (from streamconfigparser's eatchannelreference(boolean tapallowed) {code:java} // queue:xxx // topic:xxx if (firsttoken.data.equalsignorecase(""""queue"""")) { channeltype = channeltype.queue } else if (firsttoken.data.equalsignorecase(""""topic"""")) { channeltype = channeltype.topic } // todo: dt not sure if this is the best way to handle // streamconfigparsertests.substreamswithsourcechannels() if (channelscopecomponents.size() >= 3) { channelscopecomponents.remove(0) } {code} the above code makes sure """"queue:job:jobname"""" still points """"job:jobname"""". we need some consistency when referring to the names of queues for the named channels above. something like this: """"queue:job:j1"""" for job launching request queue and """"queue:foo"""" for the named p2p channel queue or a better strategy the has consistency across the named channels."""" and """"Module failed to deploy because zk said it already exists. identified in a stream of commits ending with:0f4d4ea6b2f16c73c0048e32d8a8753aa25a48fd transport: redis admin: 1 container: 1 stream deployed: time|file attachments: admin and container logs. [description] admin reports that file sink module failed to deploy at 00:19:32 because zk stated it already exists. container shows no deployment of the file sink. **** this could be an artifact in that the old acceptance tests use the same stream name hence a previous undeploy failed to remove the file. this is not seen in the log per se'. the filejdbc fail above is a legitimate test verifying that a job can't be deployed twice."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Implement xd_module_config_location & name the description in the google doc https://docs.google.com/a/gopivotal.com/document/d/12cboa7nyvvkvxdishlj-68m5f78ayxn14ejlrcljyvg/edit?usp=sharing describes the usage of xd_module_config_location and xd_module_config_name"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_. and similar to """"As a pm i'd like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it's easy for anyone to quickly get up and running on xd."""" and similar to """"As a developer i'd like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Build should use spring boot plugin version 1.1.4 the platform uses boot version 1.1.4 so the plugin version used in build.gradle should match that."""" is a not user story because it is most similar to: """"Create tcp sink module based off si tcp inbound adapter. this will allow for event fowarding."""" and similar to """"Documentation for use of conversion service and creating custom processing modules that use the tuple data structure."""" and similar to """"Updgrade to use spring-batch-admin 1.3.0 m1 when available once spring-batch-admin 1.3.0.m1 is available update the build to use it. likely to be sept 7 or 9"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Build script that creates an executable server as an artifact gradle application plugin is a good starting point. this should be the main server that would host si based modules to do syslog->file ingestion (as an example)"""" is a not user story because it is most similar to: """"Spike: research request/reply support to kafka message bus the scope is to research the available options to provide request/reply support for kafka. * document findings * pocs previous desc: the bindrequestor and bindreplier methods of the message bus need to be implemented."""" and similar to """"Remove """"legacy"""" application code following spring bootification see the discussion in https://github.com/spring-projects/spring-xd/pull/370 there are now various superseded classes and tests which we no longer need."""" and similar to """"Spark streaming module executor use getmessagebuilderfactory(beanfactory) we need to use getmessagebuilderfactory(beanfactory) to initialize messagebuilder in spark streaming module executor. please see the discussion: https://github.com/spring-projects/spring-xd/pull/1454/files#r24367825"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Fix jobrepotests to use different batch job repo currently the jobrepotests use the same batch job repository that the xd runtime uses. since the batch job repo doesn't delete the job instances there would be stale data from this test."""" is a not user story because it is most similar to: """"Add support for pivotal hd 2.1 (xd 1.0.2 release) *xd 1.0.2 release + phd 2.1 upgrade - action items:* * update to shdp 2.0.3 * add hadoop 2.5 (hadoop25) * change phd 2.x from phd20 to phd21 * test phd 2.0 with phd21 * document that both phd 2.1 and phd 2.0 is supported with phd21"""" and similar to """"The hdfs sink should support writing pojos to hdfs using avro serialization writing pojos using cdk data (avro) we should support both partitioned and un-partitioned. this story addresses only un-partitioned. document limitations in terms of which java types are supported and not supported by the avro serialization"""" and similar to """"Update spring-data-hadoop dependency and add new hadoop distros update to spring for apache hadoop 2.0 rc3 add support for new hadoop distros: - pivotal hd 2.0 (phd20) - hortonworks hdp 2.1 (hdp21) - cloudera cdh5 (cdh5)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Redis backed container's redisqueueinboundchanneladapter is not performant currently the redisqueueinboundchanneladapter has blocking operation when pulling the messages out of redis queue and this is not performant. there are few ideas from the discussion to make it better: 1) get more items from the redis queue per connection 2) we will also have compression of messages(at the channel registry) before being sent to the redis queue we also need to investigate what redis connection strategy makes the redisqueueinboundadapter better."""" is a not user story because it is most similar to: """"Automatically align version for tomcat components from platform https://github.com/spring-projects/spring-xd/commit/db66aa2a329a6fc7ef89a340dd4d562fa70d14a4 introduces org.apache.tomcat.embed:tomcat-embed-logging-log4j which is not covered by platform. yet we should lookup the version to use from other tomcat artifacts using some gradle magic"""" and similar to """"Exclude healthindicatorautoconfiguration with healthindicatorautoconfiguration the health endpoint shows up: {""""status"""":""""down""""""""healthindicator"""":{""""status"""":""""up""""}""""rabbit"""":{""""status"""":""""down""""""""error"""":""""org.springframework.amqp.amqpconnectexception: java.net.connectexception: connection refused""""}""""redis"""":{""""status"""":""""up""""""""version"""":""""2.8.9""""}""""mongo"""":{""""status"""":""""down""""""""error"""":""""org.springframework.dao.invaliddataaccessresourceusageexception: timed out while waiting to connect after 3894 ms nested exception is com.mongodb.mongotimeoutexception: timed out while waiting to connect after 3894 ms""""}""""db"""":{""""status"""":""""up""""""""database"""":""""hsql database engine""""""""hello"""":1}} we can only use vanilla health indicator since other status may not be relevant."""" and similar to """"Xd ui not usable with ie 11 trying to use the xd ui with internet explorer (version 11.0.9600.17031) is difficult. the screen doesn't refresh when streams/jobs are created or deployed. had to erase the browsing history continuously to get state updates to show in the ui."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Create ootb batch job for import and processing multiple files to jdbc create a sample batch job for inclusion in the distribution that will perform the following tasks. itemreader * read a from a directory with multiple files (configurable) * support for csv (assume first line has header values) * convert to tuple data structure itemprocessor * provide groovy based no-op itemprocessor. (configurable) itemwriter * write to jdbc. ** provide ** assume there is an db instance running somewhere specify connection info (configurable) **the sample job should be documented**"""" is a not user story because it is most similar to: """"Redisaggregatecounterrepository doesn't give proper results back both luke's original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition """"time|log"""" 2) tap create bar --definition """"tap@foo | aggregatecounter"""" 3) curl -h """"application/json"""" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty."""" and similar to """"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics"""" and similar to """"Update launcher.xml to have protocol independent beans defined and an import statement to load protocol specific defintiions from a system property defined location. launcher.xml can make use of the system property xd.pipeprotocol inside an import statement. this determines which version of the xd infrastructure to load for example what channelregistry implementation local or redis based or specific message listener containers. file name conventions should be used so if the option passed in from the command line is --pipeprotocol localchannel then the xml filename looked for has the 'protocol' suffix applied e.g. localchannelprotocol and is loaded via the classpath. redis and local will not be the only options other implementations will be provided in the future e.g. rabbit and the user may be able to provide their own implementations of these infrastructure classes (an advanced task)."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade groovy version to 2.2.2 currently xd hast """"testcompile"""" dependency to use org.codehaus.groovy:groovy-all:2.2.1. the spring-integration-groovy uses """"2.2.2"""" and it is what spring io platform uses as well. to keep it all same we can change this """"testcompile"""" dependency to use """"2.2.2"""""""" is a not user story because it is most similar to: """"Update sources section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#http"""" and similar to """"Use hateoas link templates hateoas 0.9 introduced some support for templated links. this should be leveraged to properly handle eg /streams/{id} instead of using string concatenation"""" and similar to """"Add server runtime info to banner standalone admin currently has no shiny banner as container has. more importantly it does not say which port it's listening on the transport used etc."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a user i'd like to have the option to version the custom modules so i can evolve the custom module fragments in increments and be able to roll-out upgrades seamlessly."""" is a user story, and is worth 2 story points because it is most similar to: As a s-c-s user i'd like to have my modules add/update it's current state to eureka so i can use the repository to discover the current sate of the module as needed. and similar to """"As a user i'd like to have a config parameter preferably in _servers.yml_ file so that i can enable/disable message rates in the cluster view."""" and similar to """"As a user i'd like to have the ability to visually explore xd's cluster view so that i'm aware where the components are deployed and how they are connected within the topology."""" (which are all user stories with a worth of 2 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Upgrade to spring batch 3.0.0 m3"""" is a not user story because it is most similar to: """"Make xd-ec2 bootiful"""" and similar to """"Remove timestamp task from scsm"""" and similar to """"Update to spring batch 3.0.1 snapshots"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Create module options metadata for ootb jobs"""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have a flexible rxjava module so that it can as a processor. and similar to """"As a developer i'd like to split up spring-xd dependencies to more fine-grained so i can get the ones """"below the line"""" down to spring-bus-* instead of spring-xd-* bundle."""" and similar to """"As a developer i'd like to move 'serialization codec' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: As a developer i'd like to benchmark a stream with and without {{jmx}} enabled so i can test in isolation and document the differences in performance."""" is a user story, and is worth 8 story points because it is most similar to: As a user i'd like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to """"As a field engineer i'd like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint."""" and similar to """"As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.  XUSP could not provide an answer as the amount of similarity between """"Hdfsmongodb job failing due because of missing id in default tuple looks to have been introduced by https://github.com/spring-projects/spring-xd/pull/1577 deployment: single admin 2 container deployment using +rabbitmq+ as the transport. below is a partial stacktrace (please check log for full stacktrace). log is attached. {noformat) 2015-05-15 10:50:15843 1.2.0.snap error xdbus.job:ec2job3-1 step.abstractstep - encountered an error executing step readresourcesstep in job ec2job3 org.springframework.dao.invaliddataaccessapiusageexception: cannot autogenerate id of type java.util.uuid for entity of type org.springframework.xd.tuple.defaulttuple! at org.springframework.data.mongodb.core.mongotemplate.assertupdateableidifnotset(mongotemplate.java:1153) at org.springframework.data.mongodb.core.mongotemplate.dosave(mongotemplate.java:882) at org.springframework.data.mongodb.core.mongotemplate.save(mongotemplate.java:837) at org.springframework.batch.item.data.mongoitemwriter.dowrite(mongoitemwriter.java:128) at org.springframework.batch.item.data.mongoitemwriter$1.beforecommit(mongoitemwriter.java:156) at org.springframework.transaction.support.transactionsynchronizationutils.triggerbeforecommit(transactionsynchronizationutils.java:95) at org.springframework.transaction.support.abstractplatformtransactionmanager.triggerbeforecommit(abstractplatformtransactionmanager.java:928) at org.springframework.transaction.support.abstractplatformtransactionmanager.processcommit(abstractplatformtransactionmanager.java:740) at org.springframework.transaction.support.abstractplatformtransactionmanager.commit(abstractplatformtransactionmanager.java:726) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:606) {noformat)"""" and """"Jobs are not completely removed from jobstore deploy type: admin/container on ec2 (rabbit transport) sha: 8fba31d [steps to reproduce] 1) using rabbit 3.3 above create a user that does not have privileges to write to / * sudo rabbitmqctl add_user joe password * (omit this step) sudo rabbitmqctl set_permissions -p / joe """".*"""" """".*"""" """".*"""" 2) set the rabbitmq user name and password * export spring_rabbitmq_username=acctest * export spring_rabbitmq_password=acctest23 3) start container. 4) create stream or job """"foo"""" 5) error will occur 6) delete stream or job """"foo"""" 7) stop container 8) set privilege * sudo rabbitmqctl set_permissions -p / joe """".*"""" """".*"""" """".*"""" 9) start container 10) create stream or job """"foo"""" 11) system will report that foo exists."""" does not exceed the minimum threshold of 75%."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Rename xd-global-beans.xml the above config contains beans that must be in a common parent context for the adminserver and modules. hence not really global since the (node) doesn't need them itself. so the name is a bit misleading. come up with something better."""" is a not user story because it is most similar to: """"Change module option type from class to string this better aligns with boot. moreover using class was a bad design choice (one can always get a class from a string [modulo knowing which cl to use] while to converse is not always easy [cl not being available])"""" and similar to """"Defaultcontainermatcher - improve logging and mention affected module when deploying a definition with a container match criteria specified and no container could be selected - the logging is ambiguous and should mention the affected module: {code} 11:58:24089 warn deploymentsupervisorcachelistener-0 cluster.defaultcontainermatcher - no currently available containers match criteria 'somecriteria' {code}"""" and similar to """"Investigate setting up performance test environment on cloud providers use a baseline dirt infrastructure to measure throughput ha and scalability for various payload sizes. depends on testing infrastructure setup configuration and availability."""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Support get /streams pagination support maybe querying by name as well"""" is a not user story because it is most similar to: """"Topic in mqtt source was marked as topics changed field back to topic"""" and similar to """"Update yarn deployment classpath settings for hdp 2.2 and phd 3.0 need to update classpath settings for phd 3.0 and hdp 2.2"""" and similar to """"Retrytemplate props in rabbit binder are not used the `@configurationproperties` class for rabbit binder has some props related to retrytemplate but those are not used"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Add logging to zookeepercontainerrepository occasional ci test build failures: {quote} caused by: java.lang.illegalstateexception: container cache not initialized (likely as a result of a zookeeper connection error) org.springframework.util.assert.state(assert.java:385) org.springframework.xd.dirt.container.store.zookeepercontainerrepository.ensurecache(zookeepercontainerrepository.java:184) org.springframework.xd.dirt.container.store.zookeepercontainerrepository.findone(zookeepercontainerrepository.java:263) {quote} e.g. https://build.spring.io/browse/xd-jdk8-job1-1514 add logging to {{ensurecache()}} (e.g. in {{childevent()}} ) and {{closecache()}} to log that the cache was closed it appears that's the only way the """"cache not initialized"""" message can be emitted."""" is a not user story because it is most similar to: """"Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up."""" and similar to """"Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition """"http --port=8887 | gemfire"""" 16:20:28503 warn spring shell client.resttemplate:524 - post request for """"http://localhost:8080/streams"""" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name 'region' defined in null: could not resolve placeholder 'regionname' in string value """"${regionname}"""""""" and similar to """"Xd-shell from 1.0.1 doesn't work with 1.0.0 ga admin targeting xd-shell from 1.0.1 to 1.0.0 ga admin server fails server-unknown:>admin config info ------------- ------------------------------------------------------------- result unable to contact xd admin server at 'http://localhost:9393'. target http://localhost:9393 timezone used pacific standard time (utc -8:00) ------------- ------------------------------------------------------------- ------------------------------------------------------------------------------- an exception ocurred during targeting: java.lang.nullpointerexception at org.springframework.xd.rest.client.impl.springxdtemplate.<init>(springxdtemplate.java:110) at org.springframework.xd.rest.client.impl.springxdtemplate.<init>(springxdtemplate.java:137) at org.springframework.xd.shell.command.configcommands.target(configcommands.java:106) at org.springframework.xd.shell.command.configcommands.afterpropertiesset(configcommands.java:191)"""" (which are not user stories)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: Vary queue number on 32 core machine (ecb-8) rerun test xd-2278 on a ec2 32 core machine and see when we max out."""" is a user story, and is worth 8 story points because it is most similar to: As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources. and similar to """"As a developer i'd like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets."""" and similar to """"As a user i'd like to define security definitions so that i can configure entity (rest api) specific group/role access policies."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: User should be able to specify deploy properties for jobs when clicking deploy from the job definitions page user should be able to specify the deployment manifest (module count module criteria etc.)"""" is a user story, and is worth 8 story points because it is most similar to: As a developer i'd like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to """"As a developer i'd like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd."""" and similar to """"As a developer i'd like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer."""" (which are all user stories with a worth of 8 story points)."""
"""""""Introduction: XUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story. A user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: """"As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."""" The prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items. Prediction: """"Redis sink: better handling of module options/profile activation please see the discussion here: https://github.com/spring-projects/spring-xd/pull/1188#discussion_r18788216"""" is a not user story because it is most similar to: """"Use dot as the composed module option separator following merge of https://github.com/spring-projects/spring-xd/pull/601 use dot as the separator for a composed module option. need change to the parser to accept dots"""" and similar to """"Improve resilience of route creation/removal the cf implementation requires that a route be created for each new app. this works fine on the happy path but is brittle. for example it will fail if the route required already exists."""" and similar to """"Xd-ec2 needs to provide ability to use a preinstalled zip vs downloading from s3 [current behavior] currently xd-ec2 downloads an xd zip file from the location specified by the xd-dist-url after verifying that the file is accessible.."""" (which are not user stories)."""
