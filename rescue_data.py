

explanations = ['"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Jsonstringtoobject transformer used for gemfire json sink should accept a map should be renamed as well. org.springframework.integration.transformer.messagetransformationexception: nested exception is org.springframework.messaging.messagehandlingexception: nested exception is org.springframework.expression.spel.spelevaluationexception: el1004e:(pos 8): method call: method toobject(java.util.linkedhashmap) cannot be found on org.springframework.integration.x.gemfire.jsonstringtoobjecttransformer type org.springframework.integration.transformer.messagetransforminghandler.handlerequestmessage(messagetransforminghandler.java:74) ~[spring-integration-core-4.1.5.release.jar:na] org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:99) ~[spring-integration-core-4.1.5.release.jar:na] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ~[spring-integration-core-4.1.5.release.jar:na] (...) with 1.2 release when trying to persist a json payload using the gemfire-json-server sink.. it works great on 1.1.release and 1.2 build snapshot 2015-04-23.001857 the demo repository is open so i can definitely share it with your developers but wondered if we changed something recently on that sink that could cause an issue." and "Improve type handling for jdbc sink the jdbc sink is currently limited to handling the entire payload as a string and converting a single json object to row data. we should improve that and support the following input types: - linkedcaseinsensitivemap (single row) - list<linkedcaseinsensitivemap> (multiple rows as a batch insert) - json string {"id":74488"name":"foo""year":"2014"} (single row) - json array [{"id":74488"name":"foo""year":"2014"}{"id":74489"name":"bar""year":"2014"}] (multiple rows as a batch insert) - none of the above use payload.tostring() the above matches what the new jdbc source puts out (depending on outputtype used)" does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Document mqtt source and sink" is a not user story; because it is most similar to:\n"Make xd-ec2 bootiful" and similar to "Remove timestamp task from scsm" and similar to "Update to spring batch 3.0.1 snapshots" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nInvestigate swagger to generate rest api documents" is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have a flexible rxjava module so that it can as a processor. and similar to "As a developer i\'d like to split up spring-xd dependencies to more fine-grained so i can get the ones "below the line" down to spring-bus-* instead of spring-xd-* bundle." and similar to "As a developer i\'d like to move \'serialization codec\' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nCommand to create a tap to store it\'s definition and optionally deploy with --autostart flag" is a user story, and is worth 5 story points; because it is most similar to:\nAs a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to "As a developer i\'d like to revisit the existing design and identify known limitations and/or the gaps." and similar to "As a user i\'d like to parameterize codegen options so i can generate code on the fly as needed." (which are all user stories with a worth of 5 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"As a s-c-d developer i\'d like to add support to deploy yarn app into hdfs automatically so i can have the {{xd-admin}} orchestrate overall deployment by leveraging the manifest to deploy where and with what assets." is a not user story; because it is most similar to:\n"Rest api for dsl completion should allow extension the rest api for dsl completion currently returns a list<string>. this prevents future backwards compatible extension. should change to list<completion> where completion has e.g. a "text" property." and similar to "Remove xdcontainer and rename launcherapplication post-boot refactoring. xdcontainer lifecycle methods are not being used. refactor by merging relevant functionality into launcherapplication. rename launcherapplication to containerserverapplication (consistent with adminserverapplication)." and similar to "Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains(\'group1\') above example is random selection?" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Update documentation section "running in distributed mode" to show use of rabbitmq in addition to redis the documentation in the running in distributed mode chapter should discuss that the distributed runtime can use essentially any middleware to communicate between nodes. this functionality is provided by the core channelregistry abstraction. a new intro paragraph shoul convey that it isn\'t a \'redis\' only or \'rabbitmq\' only system. there should be "installing rabbitmq" and "starting rabbitmq" sections to match those for redis. "starting spring xd in distributed mode" should cover how to configure the system to select to use redis or rabbit." is a not user story; because it is most similar to:\n"Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn\'t do much right now and logic would better live in the \'handler\' imo) * have rest controllers depend on xrepository in all cases" and similar to "Automate execution of gradle pushgenerateddocs should be part of the daily build. one "easy" way to do it would be to use the "hardcoded" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though" and similar to "Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn\'t do much right now and logic would better live in the \'handler\' imo) * have rest controllers depend on xrepository in all cases" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Provide a conventional way to extend xd container configuration provide an easy way for users to add beans (e.g. gemfire cache configuration) or modify default xd configuration such as serializers and message converters. a simple approach is to add a well known resource selector such as classpath*:meta-inf/spring/xd/extensions or include this path in an extensible @configuration base class. in addition we should adopt conventional names for beans that are meant to be extended e.g. use an xd. prefix." is a not user story; because it is most similar to:\n"Vary consumers size (ecb-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up." and similar to "Vary consumers size (db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up." and similar to "Fix mapreduce job submission on cloudera cdh5 submitting jobs that submit yarn mr tasks on cloudera 5.3.0 - job fails when submitting the yarn app java.lang.noclassdeffounderror: com/google/common/io/limitinputstream - this is from guava and that class was removed starting with v. 15.0 - i can get around this by including guava-14.0.1.jar in lib/cdh5 (not sure if this breaks something else)" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRunning job with time delay (non cron) launches 2 instances before job is supposed to fire" is a user story, and is worth 3 story points; because it is most similar to:\nAs a module author i would like to apply rxjava processor module with spring cloud stream. and similar to "As a developer i\'d like to add load receiving _sink_ module so that i can measure received throughput" and similar to "As a s-c-d developer i\'d like to move the external library to its own project so we have a clear separation of functionalities in s-c-d repo." (which are all user stories with a worth of 3 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRemove external config properties for modules there are some modules that use external config properties (kafka producer/consumer hadoop properties etc.). we need to avoid using such properties and have them configured inside module so that module and its properties are self contained." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have the ability to configure acls so that i can restrict access to resources accessed via admin ui. *examples:* * who can create streams? * who can destroy the streams? * who can view the streams? ??(defaults to all)?? and similar to "As a developer i\'d like to move \'input/output type conversion\' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency." and similar to "As a user i\'d like to use boot-based {{modulerunner}} for use in container-managed environments so i can run xd without _xd-containers_. scope: * complete the remaining deployment properties work" (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Change banner of shell to say only \'xd\'" is a not user story; because it is most similar to:\n"Command to show the xml of the job definition" and similar to "Provide dsl completion after a "some:channel >" prefix" and similar to "Message bus optimizations (kafka + redis)" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Upgrade asciidoctor-gradle-plugin to 0.7.0 looks like we need to spend a cycle on asciidoc - as we still have the author-tag-issue - i thought we can simply upgrade the asciidoctor-gradle-plugin to 0.7.0 (currently 0.4.1) but that breaks the docs being generated." is a not user story; because it is most similar to:\n"The hdfs sink should support writing pojos to hdfs using avro serialization writing pojos using cdk data (avro) we should support both partitioned and un-partitioned. this story addresses only un-partitioned. document limitations in terms of which java types are supported and not supported by the avro serialization" and similar to "Review dsl updated story points to 14 since 5 of us just participated in a 2 hour call and we still need to discuss "topology" support after some dev spikes later this week" and similar to "Fix guava dependency for hadoop20 and phd1 spring xd currently ships with guava 12.0 while hadoop 2.0.5 and pivotal hd 1.0 depends on 11.0.2 - this could lead to classpath problems if we include both." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRest endpoint/command interface for runtime module deployment properties we need a way to access the deployment properties for the deployed modules. for example: \'runtime module foo.sink.bar-2\'" is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to "As a developer i\'d like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer." and similar to "As a developer i\'d like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nDocument redis pool properties in servers.yml add spring.redis.pool.* properties to server.yml commented out to show default values. e.g. maxidle: 8 minidle: 0 maxactive: 8 maxwait: -1" is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to "As a user i need a "production-ready\' docker image so that i can use that as a baseline to deploy xd with the following setup. * ubuntu os * full xd jar * java 7.x" and similar to "As a tester i\'d like to add test coverage for "complex objects" such protocol buffers any object with nested variables or a tree of objects so that i can evaluate and document the performance characteristics." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Fix package tangle between o.s.xd.dirt.event and o.s.xd.dirt.container https://sonar.springsource.org/drilldown/measures/7173?metric=package_cycles&rids%5b%5d=7717" is a not user story; because it is most similar to:\n"Xd.module.sequence property missing two separate reports of problems with this property: http://stackoverflow.com/questions/34439296/spring-xd-stream-deployment-failure http://stackoverflow.com/questions/34514393/issue-in-spring-xd-cluster-when-deploying-my-module" and similar to "Add spring-xd-hadoop distro specific sub-projects we need to modify build adding two sub-projects for spring-xd-hadoop: one for hadoop 1.1.2 and one for phd1 (pivotal hd) to pull in transitive dependencies for correct hadoop distro" and similar to "Ui + shell: remove any usage of rest endpoints using the ".json" notation accessing rest endpoint using the ".json" file extension causes maintenance issues for the authorization rules and is not necessary. remove any usage for the admin ui and the shell. at the same time the ".json" endpoint shall be deprecated or removed ultimately." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"As a developer i\'d like to deploy a stream in the same container so all modules are colocated within the container. perhaps also consider building leader election within modules in order to automatically failover the application (stream) from one container to another." is a not user story; because it is most similar to:\n"Simple ootb job for testing similar to {{time | log}} we should ship a simple batch job that appends a timestamp to a file. this will make it much easier to validate job functionality especially in automated tests." and similar to "Request to create a repo for spring xd performance testing it would be nice if we have a git repo for spring xd performance testing. this would enable us to have a common repository (rather than inside spring-xd as a subproject) for all performance related code specific to any module message middleware etc." and similar to "Jdbc acceptance tests must jdbc props vs. configprops setting. in this case we will use environment variables to set the jdbc sink settings. thus we will just remove code." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nBroken "deployment" link in docs please see "deployment" link on http://docs.spring.io/autorepo/docs/spring-xd/1.1.0.release/reference/html/#_module_deployment page. !broken-link-deployment.png! the link is broken and redirects to http://docs.spring.io/autorepo/docs/spring-xd/1.1.0.release/reference/html/deployment which is a 404." is a user story, and is worth 5 story points; because it is most similar to:\nAs a spring xd user i want to have the ability to customize the encoders and decoders used by the kafka source sink and bus so that i can customize data formats and choose the most appropriate strategy and similar to "As a developer i\'d like to configure hadoop_user_name environment variable to implement and run-as-user for kerberos secured clusters. this would need some additional work in shdp." and similar to "As a s-c-d developer i\'d like to experiment how do we resolve and then add module dependent jar\'s to boot loader so i have an approach to handle external libraries required by ootb modules." (which are all user stories with a worth of 5 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Close parent contexts when shutting down" is a not user story; because it is most similar to:\n"Make xd-ec2 bootiful" and similar to "Remove timestamp task from scsm" and similar to "Update to spring batch 3.0.1 snapshots" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Create tcp source module based off si tcp inbound adapter. this will allow for event forwarding that can select among the existing si serialized/deserializer options." is a not user story; because it is most similar to:\n"Investigate deployed module context close upon container shutdown upon the container shutdown the deployed modules\' contexts get closed before the corresponding `stream/jobmodulewatcher` does the undeployment of the stream/job modules." and similar to "Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains(\'group1\') above example is random selection?" and similar to "Add rest resource sink would be nice to have a sink for rest resources. might be configurable with an endpoint uri. basic auth details would be a nice to have too. would perform a post to the endpoint passing the payload." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Enhancements to gemfire cq source the gemfire cq source needs some enhancements: * enable locator configuration * consider decoupling from json. currently designed to work with gemfire-json-server to avoid dependence on specific domain objects on the client and server side. so produces json strings from pdxinstance(s) stored in the cache." is a not user story; because it is most similar to:\n"Move $xd_home/modules/processor/scripts out of the way since the refactoring of the module registry that does not "look inside" a module it can\'t know that the scripts directory is not a module. everything that is a direct child of source processor sink job should be a module archive. everything else supporting that should be moved out e.g. in modules/common" and similar to "No way to set \'makeunique\' false when creating job in ui the resulting definition starts with --makeunique=true even if the makeunique checkbox is unchecked. i can check and uncheck the box and the --make unique parameter isn\'t included. since the default for this parameter is true the end result is the same. there doesn\'t seem to be a way to set --makeunique=false." and similar to "The use of labelled modules and taps needs more explanation https://github.com/spring-projects/spring-xd/wiki/taps mentions this but the explanation needs more elaboration and example e.g. mystream -> "http | flibble: transform --expression=payload.touppercase() | file" "tap:stream:mystream.flibble > transform --expression=payload.replaceall(\'a\'\'.\') | log")" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"As a user i\'d like to have the flexibility to specify config options for ip and hostname so that i can list the correct configuration for xd admin and xd container servers in the admin-ui and shell." is a not user story; because it is most similar to:\n"Spring xd to configure the stream drag and graphic spring xd can drag way to configure flow in the form of figure? similar to configure a workflow graphical interface looking forward to reply" and similar to "Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains(\'group1\') above example is random selection?" and similar to "Make rabbitmessagebus rabbitmq config properties optional when the bus is used outside of the xd container (e.g. spring-bus) the inheritance from spring boot configuration is broken (no application.yml or servers.yml on the cp). make the bus properties optional (add ":")" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Throughput optimized tcp based adapters based on reactor tcp project" is a not user story; because it is most similar to:\n"Port load-generator & throughput modules to scs-modules migrate load-generator and throughput to scs." and similar to "User wants ability to test sinks handled by 1245" and similar to "Update batch job docs to cover triggers as a source" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a spring xd developer i\'d like to port {{tcp}} module from xd to s-c-s repo so i can use it as {{source}} module to build streaming pipeline." is a user story, and is worth 2 story points; because it is most similar to:\nAs a spring xd developer i\'d like to port {{script}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline. and similar to "As a spring xd developer i\'d like to port {{splitter}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline." and similar to "As a spring xd developer i\'d like to port {{transform}} module from xd to s-c-s repo so i can use it as {{processor}} module to build streaming pipeline." (which are all user stories with a worth of 2 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nFix random configuration in securedshelltests since the securedshelltests initialize singlenode app in a static way the random configuration needs to be setup statically as well." is a user story, and is worth 8 story points; because it is most similar to:\nAs a developer i\'d like to fix the offset management with kafka _source_ module so that i can efficiently perform fetch operation from the given offsets. and similar to "As a user i want to be able to control the partition allocation for the kafka source modules when a stream is deployed so that i can colocate with other data sources." and similar to "As a user i\'d like to define security definitions so that i can configure entity (rest api) specific group/role access policies." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Provide moduleoptionsmetadata using simple approach following merge of xd-953 provide module options using the "simple" approach where applicable" is a not user story; because it is most similar to:\n"Shell - \'makeunique\' job parameter is true by default currently the shell assumes that the \'makeunique\'job parameter is by default *false*. that is not true. as a consequence the parameter has currently no impact/does not work." and similar to "Fail sonar ci build if there are any package tangles violated. similar to what would show up on structure101 reports." and similar to "Set fixed npm version for grunt gradle plugin ensure build works in windows environments" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"With security - unable to upload module once security is enabled one cannot upload modules using the shell any longer." is a not user story; because it is most similar to:\n"Jobs list rest endpoint should include deployed/undeployed status currently the jobs definition list rest endpoint doesn\'t include deployed/undeployed status on a given job." and similar to "Documentation for "gemfirecq | file" processing put on the guide as a section in an \'input-stream\' wiki page." and similar to "Documentation for field value taps put on the guide as a section in an \'input-stream\' wiki page." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRemove footer from admin ui please see the discussion here: https://github.com/spring-projects/spring-xd/pull/1052#issuecomment-48761686" is a user story, and is worth 1 story points; because it is most similar to:\nAs a module developer i would like the jsonstringtotupleconverter in the spring cloud streams project to maintain the types provided in the json string and not convert everything to a string representation. and similar to "As a temporary work around to fix xd-1935 make producible media type to \'application/json\' for job executions get request endpoints." and similar to "As a user i\'d like to have a landing page with higher-order links for sources processors sinks and jobs so i can jump to right section from one place." (which are all user stories with a worth of 1 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRabbit pub/sub consumers should support concurrency pubsub consumers can support concurrency since the threads are competing consumers on the queue." is a user story, and is worth 5 story points; because it is most similar to:\nAs a xd user i\'d like to orchestrate composed jobs so i can bring multiple jobs into single workflow and operationalize. and similar to "As a developer i\'d like to upgrade to kafka\'s si ga release so that i can sync -up with the latest bits. the scope is to backport kafka xd changes to si kafka and then upgrade to the ga release." and similar to "As a user i\'d like to parameterize merge options so i can incrementally consume the delta with the help of megastore." (which are all user stories with a worth of 5 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nXd should run offline trying to run xd offline results in an error in redis.xml because the cloudfoundry schema file is missing. we need to add the cf-runtime jar to the classpath to resolve this." is a user story, and is worth 8 story points; because it is most similar to:\nAs a pm i\'d like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it\'s easy for anyone to quickly get up and running on xd. and similar to "As a developer i\'d like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_." and similar to "As a developer i\'d like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Spike: destroy composed job as an xd developer i\'d like to explore options to remove composed job so i can clean-up unused resources and memory footprints." is a not user story; because it is most similar to:\n"Mixins need to use property placeholders instead of hard coded values where possible many attributes in mixins use hard coded values instead of using property placeholders. jdbcconnectionmixin jdbcconnectionpoolmixin mqttconnectionmixin..." and similar to "Move bus cleaner util method from busutils since `spark-streaming` uses `busutils` we need to move the bus cleaner util method that builds rest template so that spark streaming doesn\'t depend on `httpclient`" and similar to "Ui: user should be able to see step execution info in a table below job detail on clicking the job detail page we should display all the step executions associated with the specific job execution in a table view." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Create a common exception framework for xd need to capture exceptions from the various projects that make up xd and wrap them in xd specific exceptions. an example of this is when leaving out the channels in the module definitions we see nosuchbeanexceptions and illegalargumentexceptions thrown based on which module and what channel is missing." is a not user story; because it is most similar to:\n"Split integration.x in dedicated xd projects where appropriate similar to what is done for e.g. hadoop reactor and http some of the classes in the .x package (namely gemfire splunk twitter) should go in dedicated (albeit small) projects. this would enable further modularization (see xd-915)" and similar to "Xd distributed tests are broken there are test failures running xd distributed tests. it looks like all the test failures are related to npe on deploymentproperties format: java.lang.nullpointerexception org.springframework.xd.rest.domain.support.deploymentpropertiesformat.formatdeploymentproperties(deploymentpropertiesformat.java:72) org.springframework.xd.rest.client.impl.jobtemplate.deploy(jobtemplate.java:71) org.springframework.xd.distributed.test.jobstatetests.testjobstatetransition(jobstatetests.java:83)" and similar to "Verify platform compatibility versions with the xd dependencies we need to make sure there is no conflicting/missing dependency with build.gradle using spring io platform dependencies. https://jira.spring.io/browse/xd-1929 is one such scenario where jolokia dependency went missing." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Jdbc property settings need to be made externally configurable we need to have a properties section (documented as well) so that users can setup their jdbc connections for the various components." is a not user story; because it is most similar to:\n"Ui: user should be able to filter the list of executions on the execution tab on clicking the “executions” tab user should see the list of all batch job executions. there should be options to filter job executions by few criteria such as by “job name” “execution time” etc." and similar to "Cleanup hsqldb data directory used by tests after each test completion currently the "data" directory created by the hsqldb process during the tests run is not cleaned up and may cause issues. we should delete the "data" directory after each test completion." and similar to "Add support to upload custom modules as an s-c-d user i\'d like to upload custom modules using shell/rest-api so i can contribute modules and create streaming/batch pipelines." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nHttp source module should copy content-type header to si messageheaders.content_type" is a user story, and is worth 8 story points; because it is most similar to:\nAs a s-c-d developer i\'d like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to "As a s-c-d developer i\'d like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences." and similar to "As a s-c-d user i\'d like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Hdfsjdbc acceptance test" is a not user story; because it is most similar to:\n"Test with java8 runtime" and similar to "Add email sink" and similar to "Documentation for deleting triggers" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"User wants ability to test sources examples: 1. be able to start the rabbitmq source just by pointing to modules/source/rabbit.xml pass in some property file for parameters to be replaced and outgoing message is placed in a in-memory queue backed channel for use with assertions to verify functionality. 2. test for as many source types as is \'reasonable\' e.g. mqtt/tcp testing might be harder than say rabbitmq. 3. test that sending json results in media-type header is set to json 4. test that sending pojo " pojo 5. test that sending tuple " tuple 6. test that sending raw bytes " raw bytes" is a not user story; because it is most similar to:\n"Make transport serialization configurable the refactoring done for m6 prevents overriding "codec" bean configured for messagebus. since mb is now in sharedservercontext that context can only be altered by a custom orderedcontextinitializer for example. there is currently no mechanism provided by the bootstrapcontext for dynamically loading a user\'s orderedcontextinitializer." and similar to "Create xd shell integration test parser since most of the xd.shell.itests will do more then one thing (deploy a stream start it add a tap add a job stop etc) we decided to decouple writing testcases with running it. test cases will be written in spring-shell scriptlets. scriptlets are json files with command and expectedresult as tokens. here\'s an example: {code} { "testscript": [ {"command" : "stream create --definition "http | file" --name http2file" "result" : "created new stream \'http2file\'"} {"command" : "stream list" "result" : "..."} ] } {code} a parser will parse scriptlets executes it and asserts on expected results." and similar to "Make deploy=false as the default when creating a new job the automatic deployment of the job makes it harder to understand the lifecycle of the job and also does not allow for the opportunity to define any additional deployment metadata for how that job runs e.g is it partitioned etc." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Admin leader election issue when using different management port when the admin is started with the different management port (default is the same as that of admin http port) then the leadership is requested when the management context is setup. the leadership election should happen only using the admin server application context. with this the following exception is thrown when deployment requests are handled: 2015-03-24 21:48:26340 1.2.0.snap error deploymentsupervisor-0 queue.distributedqueue - exception processing queue item: queue-0000000004 org.springframework.xd.dirt.server.admin.deployment.deploymentexception: teststream org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeployresource(abstractinstancepersistingdeployer.java:164) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeploy(abstractinstancepersistingdeployer.java:83) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeployall(abstractinstancepersistingdeployer.java:109) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.deleteall(abstractinstancepersistingdeployer.java:117) org.springframework.xd.dirt.server.admin.deployment.zk.deploymentmessageconsumer.processdeploymentmessage(deploymentmessageconsumer.java:115) org.springframework.xd.dirt.server.admin.deployment.zk.deploymentmessageconsumer.consumemessage(deploymentmessageconsumer.java:73) org.springframework.xd.dirt.server.admin.deployment.zk.deploymentmessageconsumer.consumemessage(deploymentmessageconsumer.java:43) org.apache.curator.framework.recipes.queue.distributedqueue.processmessagebytes(distributedqueue.java:678) org.apache.curator.framework.recipes.queue.distributedqueue.processnormally(distributedqueue.java:712) org.apache.curator.framework.recipes.queue.distributedqueue.access$300(distributedqueue.java:65) org.apache.curator.framework.recipes.queue.distributedqueue$5.run(distributedqueue.java:629) java.util.concurrent.executors$runnableadapter.call(executors.java:471) java.util.concurrent.futuretask.run(futuretask.java:262) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$201(scheduledthreadpoolexecutor.java:178) java.util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:292) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:745) caused by: java.lang.illegalargumentexception: module deployment request path cache shouldn\'t be null. org.springframework.util.assert.notnull(assert.java:112) org.springframework.xd.dirt.server.admin.deployment.zk.zkdeploymenthandler.undeploy(zkdeploymenthandler.java:81) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.undeployresource(abstractinstancepersistingdeployer.java:161) ... 17 more" and "Ensure that when batch jobs are created they are created with the job bean definition id equal to the ‘stream name’ unlike in spring-batch-admin in springxd all the jobs the /modules/jobs directory is not ‘visible’ to query when the server starts. jobs only become visible to xd’s ‘jobs list’ command once they have been ‘created’. creating a job in xd is an opportunity to specify additional values to any property placeholders in the job bean definition. this isn’t part of spring-batch-admin. we will not worry about the creation of job definition in this story. assume that they have been created already and that the get for /jobs works as it does now for spring xd. we should however make sure that there is always a replacement of the job name in the job bean definition to match the ‘--name’ specified in the command line. that is “job create --name myjob --description “thisfunkyjob�? will use ‘myjob to replace <job id="${xd.stream.name}" in the file thisfunkyjob.xml *implementation suggestions* this should hopefully just be a matter of changing job definition files to follow the naming pattern. <job id="${xd.stream.name}" … /> *how to verify it works* 1. create a junit integration style test that has ‘job create --name myjob --defintion “testjob�?’ and then deploy the job. the name ‘myjob’ should appear in the job execution table" does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Add polling twitter source i\'ve created a source module for polling a twitter timeline using the spring integration twitter inbound adapter. i\'ve placed my api keys in the modules.yml file and verified that they are picked up by the twitterstream and twitterseach modules that come with springxd. however they are not picked up by my custom module. i viewed the source for both the stream and and the search and i feel my project is near identical in configuration. am i missing something or are these properties somehow special for just the two twitter sources that come with springxd? i\'d like to get this working and commit it to the project." is a not user story; because it is most similar to:\n"Riemann - measure based alerts we would like to experiment with “riemann” a clojure library to aggregate events from servers and applications through stream processing. features: * tracking latency distribution * email for exceptions * memory and cpu statistics this will help understand the behavior of critical components to eventually orchestrate workflows to proactively monitor and notify important contacts/groups as needed. webiste -> http://riemann.io/ github -> https://github.com/aphyr/riemann" and similar to "Duplicate messages on tap if i fiddle with the testtappingwithlabels method i can reproduce the same issue: httpsource source = newhttpsource() filesink sink = newfilesink().binary(true) filesink tapsink1 = newfilesink().binary(true) stream().create("myhttp" "%s | flibble: transform --expression=payload.touppercase() | flibble2: transform --expression=payload.touppercase() | %s" source sink) stream().create("mytap4" "tap:stream:myhttp.flibble > transform --expression=payload.replaceall(\'a\'\'.\') | %s" tapsink1) source.ensureready().postdata("dracarys!") assertthat(sink eventually(hascontentsthat(equalto("dracarys!")))) assertthat(tapsink1 eventually(hascontentsthat(equalto("dr.c.rys!")))) java.lang.assertionerror: expected: "dr.c.rys!" trying at most 10 times but: failed after 10*100=1000ms: "dr.c.rys!dr.c.rys!"" and similar to "Stream definition completion rest layer + shell adapter provide the infrastructure for http get /completions?start=\'http | file --d" that would return a list of possible completions (in this case returning the file option names that start with "d") this story is about (and only about): - having that rest controller delegating to some "completionsengine" - implementing the spring shell converter that talks to that it\'s an empty shell useless (but easy to do) without the actual "completionsengine"" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Cannot destroy tap if tapped stream is already destroyed xd:>tap destroy mytap 16:44:41850 warn spring shell client.resttemplate:524 - delete request for "http://localhost:8080/taps/mytap" resulted in 400 (bad request) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: xd116e:(pos 4): unrecognized stream reference \'foo\' tap foo.http | log tap is then still listed when i do a "tap list"" is a not user story; because it is most similar to:\n"Create aggregator module that uses an embedded database stored in the local filesystem similar to xd-1100. si has the jdbc based message store. <int-jdbc:message-store id="messagestore" data-source="datasource" table-prefix="my_int_"/> the configuration of this aggregator would be configured so that it uses an embedded database hsqldb or h2 depending if there is any real perf benefit to one or the other and store the data on the local file system." and similar to "Add documentation for a \'stdin\' source module in order to support ingestion from stdin the suggested approach is to do the following. xd:>stream create --definition "tcp --decoder=lf | log" --name foo $ cat my.log | netcat localhost 1234 so while this is really a tcp based ingestion case once can use pipe or redirect of stdin/err in order to achieve the same goal. it should appear as a source module in the docs on par with other source modules in its own section." and similar to "Create documentation section for the shell create a new section in the docs regaring shell usage in particular how to represent single and double quotes. include some discussion of basic commands to manipulate streams jobs and list modules. how to pass in a file that can be executed when the shell starts up. also point to spring-shell ref docs for extensibility in terms of adding custom commands." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a user i\'d like to refer to documentation so that i can build the custom module based on recommended standards and patterns." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have the option of editing the deployed/undeployed stream so that i don\'t have to destroy to just change any deployment property. and similar to "As a developer i\'d like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics." and similar to "As a developer i\'d like to refactor stream/job definition repository so i can decouple from module deployment concerns." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Rabbitmq source is not ingested the data into jdbc sink i am using spring xd to ingest the data into pivotal hd.my source is log files which is coming from logstash through rabbitmq. i could able to ingest the log files in hdfs (by using rabbitmq source and hdfs sink) however when i try to ingest the data directly into hawq by using jdbc sinkit\'s not working. shall we directly load rabbitmq source into any databases like hawq? stream create --name pivotalqueue --definition "rabbit --host=<my host name> | jdbc --columns=\'colum list\'" ---not working i configured jdbc in jdbc.properties. there was no issue with jdbc configuration(because i tested this with simple tail source it\'s working and load the data into hawq. stream create --name pivotalqueue --definition "tail --name=/tmp/xd/output/test.out | jdbc --columns=\'columns list\'" )" and "Create a scriptprocessor module that allows the execution of a groovy (potentially jrubyjython) based si service activator this will enable arbitrary processing logic to be used in a processing step. see http://blog.springsource.org/2011/12/08/spring-integration-scripting-support-part-1/ <int:service-activator ...> <script:script lang="groovy" location="file:scripts/groovy/myscript.groovy"> </int:service-activator> would be the essence of the module. probably \'lang\' gets detected from the file extension." does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRemove usage of integrationevaluationcontextaware this deprecated in si 4.2. use {{this.evaluationcontext = expressionutils.createstandardevaluationcontext(getbeanfactory())}} in {{afterpropertiesset()}} instead. not that this can safely be done in 1.2.x - the preferred mechanism is available in si 4.1.x too." is a user story, and is worth 1 story points; because it is most similar to:\nAs a module developer i would like the jsonstringtotupleconverter in the spring cloud streams project to maintain the types provided in the json string and not convert everything to a string representation. and similar to "As a temporary work around to fix xd-1935 make producible media type to \'application/json\' for job executions get request endpoints." and similar to "As a user i\'d like to have a landing page with higher-order links for sources processors sinks and jobs so i can jump to right section from one place." (which are all user stories with a worth of 1 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRemove the s3 xd jar cache originally it was placed in the code to prevent overtasking our servers with downloads when people want to install xd. and to allow for faster downloads. however xd jars are already placed on s3 so this feature is no longer needed." is a user story, and is worth 8 story points; because it is most similar to:\nAs a developer i\'d like to host/read python script (file) from hdfs so i can use the shell processor in xd (on cf) to delegate data science functionality to py runtime and receive the feedback back in xd. and similar to "As a developer i\'d like to have a central place to manage external properties for applications across all the environments so i can provide server and client-side support for externalized configuration for xd-admin and xd-container servers." and similar to "As a follow up to xd-2877 experiment with the removal of the list of modules from basedefinition and reparse as needed. branch is here: https://github.com/pperalta/spring-xd/tree/deploy-refactor-2" (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a developer i\'d like to create separate repo for yarn spi so i don\'t have to bundle all spi variants under one admin project." is a user story, and is worth 3 story points; because it is most similar to:\nAs a user i\'d like to clean up message bus resources associated with the stream so that when the stream is destroyed so does the coupled queues/topics. and similar to "As a developer i\'d like to document the kryo optimization guidelines so the end-users can refer to it while tuning to improve performance." and similar to "As a xd developer i\'d like to upgrade to si 4.2 spring 4.2.1 and amqp 1.5 dependencies so i can take advantage of the latest improvements." (which are all user stories with a worth of 3 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Classpath issue with homebrew version on macosx 10.9.1 i\'ve installed spring xd for the first time today on my mac using the homebrew distribution. i tried to create the following stream : {{xd> stream create --definition "http --port=6666 | log" --name httptest}} this produced the following error : org.springframework.integration.messagehandlingexception: error occurred in message handler [moduledeployer] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:79) org.springframework.integration.config.serviceactivatorfactorybean$1.handlerequestmessage(serviceactivatorfactorybean.java:83) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:142) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:183) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:153) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:92) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendmessage(abstractreplyproducingmessagehandler.java:228) org.springframework.integration.handler.abstractreplyproducingmessagehandler.sendreplymessage(abstractreplyproducingmessagehandler.java:212) org.springframework.integration.handler.abstractreplyproducingmessagehandler.producereply(abstractreplyproducingmessagehandler.java:177) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handleresult(abstractreplyproducingmessagehandler.java:171) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:149) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:115) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:102) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:183) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:153) org.springframework.xd.dirt.stream.deploymentmessagesender.senddeploymentrequests(deploymentmessagesender.java:57) org.springframework.xd.dirt.stream.abstractdeployer.senddeploymentrequests(abstractdeployer.java:163) org.springframework.xd.dirt.stream.abstractdeployer.basicdeploy(abstractdeployer.java:204) org.springframework.xd.dirt.stream.abstractinstancepersistingdeployer.deploy(abstractinstancepersistingdeployer.java:78) org.springframework.xd.dirt.rest.xdcontroller.save(xdcontroller.java:229) sun.reflect.nativemethodaccessorimpl.invoke0(native method) sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:606) org.springframework.web.method.support.invocablehandlermethod.invoke(invocablehandlermethod.java:214) org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:132) org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:104) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:748) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:689) org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:83) org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:945) org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:876) org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:931) org.springframework.web.servlet.frameworkservlet.dopost(frameworkservlet.java:833) javax.servlet.http.httpservlet.service(httpservlet.java:647) org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:807) javax.servlet.http.httpservlet.service(httpservlet.java:728) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:305) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.boot.actuate.trace.webrequesttracefilter.dofilter(webrequesttracefilter.java:114) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.boot.actuate.autoconfigure.endpointwebmvcautoconfiguration$1.dofilterinternal(endpointwebmvcautoconfiguration.java:126) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.web.filter.hiddenhttpmethodfilter.dofilterinternal(hiddenhttpmethodfilter.java:77) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.web.filter.httpputformcontentfilter.dofilterinternal(httpputformcontentfilter.java:88) org.springframework.web.filter.onceperrequestfilter.dofilter(onceperrequestfilter.java:108) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.springframework.boot.actuate.autoconfigure.metricfilterautoconfiguration$metricsfilter.dofilter(metricfilterautoconfiguration.java:97) org.springframework.boot.actuate.autoconfigure.metricfilterautoconfiguration$metricsfilter.dofilter(metricfilterautoconfiguration.java:82) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java:243) org.apache.catalina.core.applicationfilterchain.dofilter(applicationfilterchain.java:210) org.apache.catalina.core.standardwrappervalve.invoke(standardwrappervalve.java:222) org.apache.catalina.core.standardcontextvalve.invoke(standardcontextvalve.java:123) org.apache.catalina.authenticator.authenticatorbase.invoke(authenticatorbase.java:472) org.apache.catalina.valves.remoteipvalve.invoke(remoteipvalve.java:680) org.apache.catalina.core.standardhostvalve.invoke(standardhostvalve.java:171) org.apache.catalina.valves.errorreportvalve.invoke(errorreportvalve.java:99) org.apache.catalina.core.standardenginevalve.invoke(standardenginevalve.java:118) org.apache.catalina.connector.coyoteadapter.service(coyoteadapter.java:407) org.apache.coyote.http11.abstracthttp11processor.process(abstracthttp11processor.java:1004) org.apache.coyote.abstractprotocol$abstractconnectionhandler.process(abstractprotocol.java:589) org.apache.tomcat.util.net.nioendpoint$socketprocessor.run(nioendpoint.java:1680) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java.lang.thread.run(thread.java:744) caused by: org.springframework.beans.factory.cannotloadbeanclassexception: cannot find class [org.springframework.integration.x.http.nettyhttpinboundchanneladapter] for bean with name \'org.springframework.integration.x.http.nettyhttpinboundchanneladapter#0\' defined in url [file:/users/philippe/springsource/spring-xd-1.0.0.m1/xd/modules/source/http.xml] nested exception is java.lang.classnotfoundexception: org.springframework.integration.x.http.nettyhttpinboundchanneladapter org.springframework.beans.factory.support.abstractbeanfactory.resolvebeanclass(abstractbeanfactory.java:1327) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.predictbeantype(abstractautowirecapablebeanfactory.java:594) org.springframework.beans.factory.support.abstractbeanfactory.isfactorybean(abstractbeanfactory.java:1396) org.springframework.beans.factory.support.abstractbeanfactory.isfactorybean(abstractbeanfactory.java:959) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:680) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.springapplication.refresh(springapplication.java:609) org.springframework.boot.springapplication.run(springapplication.java:321) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:181) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:264) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:254) org.springframework.xd.dirt.module.moduledeployer.handledeploy(moduledeployer.java:249) org.springframework.xd.dirt.module.moduledeployer.handlesinglemodulemessage(moduledeployer.java:227) org.springframework.xd.dirt.module.moduledeployer.handlemessageinternal(moduledeployer.java:154) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:73) ... 79 more caused by: java.lang.classnotfoundexception: org.springframework.integration.x.http.nettyhttpinboundchanneladapter org.springframework.boot.context.embedded.tomcat.tomcatembeddedwebappclassloader.loadclass(tomcatembeddedwebappclassloader.java:68) org.apache.catalina.loader.webappclassloader.loadclass(webappclassloader.java:1559) org.springframework.util.classutils.forname(classutils.java:238) org.springframework.beans.factory.support.abstractbeandefinition.resolvebeanclass(abstractbeandefinition.java:392) org.springframework.beans.factory.support.abstractbeanfactory.doresolvebeanclass(abstractbeanfactory.java:1348) org.springframework.beans.factory.support.abstractbeanfactory.resolvebeanclass(abstractbeanfactory.java:1319) ... 95 more i managed to create the exact same stream successfully after installing the release manually from the zip file and setting up xd_home and my path as documented so i guess it\'s a problem specific to the homebrew installation." and "Add functionality to provision ec2 instance and mount ebs * the application should ** create a spring application context. ** should take a command line parameter --config that will point to a property file with key/value pairs specified below. by default the file xd-ec2.properties will be looked for on the classpath ** associate ebs shared volume for each machine instance * packaging ** use gradle application plugin to generate a ‘bin’ directory with a script to start the application. seehttp://www.gradle.org/docs/current/userguide/application_plugin.html ** the config file xd-ec2.properties should be in a directory (ideally a \'config\' directory parallel to \'bin\' and will be loaded by the application by default - loading via the cp is probably the easiest way. ** create a pojo to easily reference these properties vs. using a raw java properties object. how to verify it works * integration testing ** create junit based tests. jclouds itself has extensive testing can look at those for structure. ** verify what you created has been installed. ** verify ports are open instance information ** ebs of 50gb base for each instance. * report successful and failed instances. key-value pairs in configuration file properties may include: * cluster-name= a name describing the cluster you are creating * aws-access-keys= the access key assigned to you by admin * aws-secret-key= the secret key assigned to you by admin * private-key-file= the private key file assigned to you by admin. used for ssh-ing into * multi-node=true/false if true then installer will run the number of nodes as enumerated in the number-nodes property value. if false the installer will start a single node server * number-nodes=the number of nodes(containers) to deploy for this cluster. value is an integer > 0 * machine-size=the size of machines to be assigned for admin and nodes. small medium large * redis-port=6379 * rabbit-port=5279 * xd-dist-url=the url to download the xd to install. for example: http://blahblahblah.zip * ami = the ami image to use for your cluster. for example: ami-dfadsfdadf" does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"As a developer i\'d like to have a simplified ux around parameters for gpdb so i don\'t have to escape each parameter. the scope is also to test the sqoop job with sqlserver and gpdb to identify the ux differences." is a not user story; because it is most similar to:\n"Remove xdcontainer and rename launcherapplication post-boot refactoring. xdcontainer lifecycle methods are not being used. refactor by merging relevant functionality into launcherapplication. rename launcherapplication to containerserverapplication (consistent with adminserverapplication)." and similar to "Spring xd supported active/standby mode? xd spring deployment capabilities are supported by the active/standby? example: module.log.criteria=groups.contains(\'group1\') above example is random selection?" and similar to "The new scsm twitterstream module should produce same json as old xd source the new scsm twitterstream module uses a different format than xd 1.x source module. it should match what twitter uses so existing processors etc. will continue to work." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Change http command to post data by putting \'http\' as the main command option the current http command is of the form http://localhost:8080:>post httpsource --target http://localhost:9090 --data 10 it isn\'t intuitive to think \'post\' rather the command can be http post --target http://localhost:9090 --data 10 which will allow us to have support for other http verbs and cleanly separate the namespace from \'hadoop\' etc. the restshell from which this came was only concerned with http actions so the leading command classification probably seemed superfluous." is a not user story; because it is most similar to:\n"Jdbc sink is broken - looks like some config options got booted the jdbc sink is broken. simple "time | jdbc" results in: org.springframework.jdbc.badsqlgrammarexception: preparedstatementcallback bad sql grammar [insert into test (payload) values(?)] nested exception is java.sql.sqlsyntaxerrorexception: user lacks privilege or object not found: test looks like some config options got clobbered during bootification." and similar to "Xd shell should be configurable for accessing secure cluster there doesn\'t seem to be a way to configure the xd shell for accessing a kerberos secured cluster. tried this: >hadoop config props set --property hadoop.security.authorization=true >hadoop config props set --property hadoop.http.authentication.type=kerberos still getting: >hadoop fs ls /xd hadoop configuration changed re-initializing shell... ls: simple authentication is not enabled. available:[token kerberos]" and similar to "Improve build file distribution tasks the current flow of gradle tasks is confusing. suggest the following changes to simplify the flow. 1. move the current task logic in zipxd to distzip 2. have distzip depend on dist 3. update the \'how to build docs\' on the wiki 4. make sure that the distzip task only shows up once in the list of gradle target." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Consider usage of jackson afterburner see https://github.com/fasterxml/jackson-module-afterburner" is a not user story; because it is most similar to:\n"Remove spring-xd-codec from spring xd source tree and build replace with spring-cloud-streams (or spring-cloud-streams-codec) dependency" and similar to "Shell - \'makeunique\' job parameter is true by default currently the shell assumes that the \'makeunique\'job parameter is by default *false*. that is not true. as a consequence the parameter has currently no impact/does not work." and similar to "Add junit @rule so tests fail fast with clear messaging if redis not available" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nSupport for uuid suffix for hdfs file names in acceptance tests" is a user story, and is worth 5 story points; because it is most similar to:\nAs a developer i\'d like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to "As a spring xd developer i\'d like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller" and similar to "As a user i\'d like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism." (which are all user stories with a worth of 5 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Trigger - add support for date-based one-time execution currently jobs can be either executed using cron expression or immediately at once. we should also support the one-time scheduling of jobs in the future. would this possibly require us to implement schedule-persistence? that could severely impact story-points." is a not user story; because it is most similar to:\n"Automate execution of gradle pushgenerateddocs should be part of the daily build. one "easy" way to do it would be to use the "hardcoded" authentication scheme as described here (bamboo should mask a property whose name contains password) we may want to create a dedicated github user though" and similar to "Retrieve information for a field value counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn\'t do much right now and logic would better live in the \'handler\' imo) * have rest controllers depend on xrepository in all cases" and similar to "Retrieve information for an aggregate counter todo as part of this (see xd-537): * get rid of so-called service layer in analytics project (doesn\'t do much right now and logic would better live in the \'handler\' imo) * have rest controllers depend on xrepository in all cases" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a developer i\'d like to bench test cases around {{tuplebuilder}} so i can identify the bottlenecks and tune for performance optimizations." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to "As a field engineer i\'d like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint." and similar to "As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nMake trigger options explicitly exclusive see problem reported at http://stackoverflow.com/questions/27368351/spring-xd-module-sourcetrigger-does-not-work-as-expected" is a user story, and is worth 8 story points; because it is most similar to:\nAs a developer i\'d like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_. and similar to "As a developer i\'d like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally." and similar to "As a pm i\'d like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it\'s easy for anyone to quickly get up and running on xd." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Investigate missing boot\'s actuator endpoints in xd currently few of the boot\'s actuator endpoints go missing in the endpointhandler mapping. they are: beansendpoint dumpendpoint traceendpoint healthendpoint infoendpoint. also the endpointhandler mapping doesn\'t even happen in case of launcherapplication. i think this is because the launcherapplication context starts with port \'0\' and the tomcatembeddedservletcontainer sets the local port for it later. with port \'0\' the endpointhandler mapping is disabled during the endpointhandler mapping bean creation." is a not user story; because it is most similar to:\n"Documentation for reactor-ip source has conflicting information according to the documentation at: http://docs.spring.io/spring-xd/docs/current/reference/html/#reactor-ip one of the options available for this source is {{transport}}. it\'s listed as having no default but the sample definition doesn\'t provide it yet appears to default to {{tcp}}. the two should match up. it might also be useful if the possible values for {{transport}} were listed (i assume {{tcp}} and {{udp}})" and similar to "The ability to route within streams a flow or a processor component may require routing semantics. currently the stream assumes a single input and output for each module. a flow may support multiple outputs - switch routing that is - recipient list is not currently supported (another subtask?). we need to support semantics like: a |[output.foo:coutput.bar:ddefault:e]" and similar to "Make the parser aware of message conversion configuration enhance the stream parser to take message conversion into account in order to validate or automatically configure converters. for example: {noformat:nopanel=true} source --outputtype=my.foo | sink --inputtype=some.other.bar is likely invalid since xd doesn\'t know how to convert foo->bar. {noformat}" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Improve job launch functionality with distributed nodes when sending a launch request the message is not targeted to the container node that hosts the deployed job. with rabbitmq the message is not ack\'d so it will get picked up eventually by the container that hosts the deployed job. this should change to a targeted message. ----- original description from thomas below tried deploying some batch jobs and they all seem to fail when running admin and one container using redis as transport xd:>job create mongojob --definition "hdfsmongodb --resources=/data/*.log --names=col1col2col3 --idfield=col1 --collectionname=test" fails with this: {quote} 18:19:01612 warn redisinboundadapter-redis:queue-inbound-channel-adapter6 boot.springapplication:635 - error handling failed (error creating bean with name \'integrationrequestmappinghandlermapping\': initialization of bean failed nested exception is java.lang.illegalstateexception: org.springframework.context.annotation.annotationconfigapplicationcontext@25e7506f has not been refreshed yet) 18:19:01614 error redisinboundadapter-redis:queue-inbound-channel-adapter6 handler.logginghandler:145 - org.springframework.messaging.messagehandlingexception: error occurred in message handler [moduledeployer] org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:84) org.springframework.integration.config.serviceactivatorfactorybean$1.handlerequestmessage(serviceactivatorfactorybean.java:83) org.springframework.integration.handler.abstractreplyproducingmessagehandler.handlemessageinternal(abstractreplyproducingmessagehandler.java:170) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) org.springframework.integration.dispatcher.abstractdispatcher.tryoptimizeddispatch(abstractdispatcher.java:128) org.springframework.integration.dispatcher.unicastingdispatcher.dodispatch(unicastingdispatcher.java:101) org.springframework.integration.dispatcher.unicastingdispatcher.dispatch(unicastingdispatcher.java:97) org.springframework.integration.channel.abstractsubscribablechannel.dosend(abstractsubscribablechannel.java:77) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:255) org.springframework.integration.channel.abstractmessagechannel.send(abstractmessagechannel.java:223) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:114) org.springframework.messaging.core.genericmessagingtemplate.dosend(genericmessagingtemplate.java:44) org.springframework.messaging.core.abstractmessagesendingtemplate.send(abstractmessagesendingtemplate.java:92) org.springframework.integration.endpoint.messageproducersupport.sendmessage(messageproducersupport.java:98) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.popmessageandsend(redisqueuemessagedrivenendpoint.java:211) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint.access$300(redisqueuemessagedrivenendpoint.java:50) org.springframework.integration.redis.inbound.redisqueuemessagedrivenendpoint$listenertask.run(redisqueuemessagedrivenendpoint.java:290) org.springframework.integration.util.errorhandlingtaskexecutor$1.run(errorhandlingtaskexecutor.java:52) java.lang.thread.run(thread.java:724) caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name \'readresourcesstep\': cannot create inner bean \'(inner bean)\' of type [org.springframework.batch.core.listener.steplistenerfactorybean] while setting bean property \'listeners\' with key [0] nested exception is org.springframework.beans.factory.beancreationexception: error creating bean with name \'(inner bean)#4\': factorybean threw exception on object creation nested exception is java.lang.illegalargumentexception: interface org.springframework.batch.core.steplistener is not visible from class loader org.springframework.beans.factory.support.beandefinitionvalueresolver.resolveinnerbean(beandefinitionvalueresolver.java:282) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:126) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvemanagedlist(beandefinitionvalueresolver.java:351) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolvevalueifnecessary(beandefinitionvalueresolver.java:154) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.applypropertyvalues(abstractautowirecapablebeanfactory.java:1456) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.populatebean(abstractautowirecapablebeanfactory.java:1197) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:537) org.springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:475) org.springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:304) org.springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:228) org.springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:300) org.springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:195) org.springframework.beans.factory.support.defaultlistablebeanfactory.preinstantiatesingletons(defaultlistablebeanfactory.java:681) org.springframework.context.support.abstractapplicationcontext.finishbeanfactoryinitialization(abstractapplicationcontext.java:760) org.springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:482) org.springframework.boot.springapplication.refresh(springapplication.java:616) org.springframework.boot.springapplication.run(springapplication.java:306) org.springframework.boot.builder.springapplicationbuilder.run(springapplicationbuilder.java:130) org.springframework.xd.module.core.simplemodule.initialize(simplemodule.java:225) org.springframework.xd.dirt.module.moduledeployer.deploy(moduledeployer.java:270) org.springframework.xd.dirt.module.moduledeployer.deployandstore(moduledeployer.java:260) org.springframework.xd.dirt.module.moduledeployer.handledeploy(moduledeployer.java:201) org.springframework.xd.dirt.module.moduledeployer.handlemessageinternal(moduledeployer.java:172) org.springframework.integration.handler.abstractmessagehandler.handlemessage(abstractmessagehandler.java:78) ... 18 more caused by: org.springframework.beans.factory.beancreationexception: error creating bean with name \'(inner bean)#4\': factorybean threw exception on object creation nested exception is java.lang.illegalargumentexception: interface org.springframework.batch.core.steplistener is not visible from class loader org.springframework.beans.factory.support.factorybeanregistrysupport.dogetobjectfromfactorybean(factorybeanregistrysupport.java:151) org.springframework.beans.factory.support.factorybeanregistrysupport.getobjectfromfactorybean(factorybeanregistrysupport.java:110) org.springframework.beans.factory.support.beandefinitionvalueresolver.resolveinnerbean(beandefinitionvalueresolver.java:272) ... 41 more caused by: java.lang.illegalargumentexception: interface org.springframework.batch.core.steplistener is not visible from class loader java.lang.reflect.proxy.getproxyclass0(proxy.java:487) java.lang.reflect.proxy.newproxyinstance(proxy.java:722) org.springframework.aop.framework.jdkdynamicaopproxy.getproxy(jdkdynamicaopproxy.java:121) org.springframework.aop.framework.jdkdynamicaopproxy.getproxy(jdkdynamicaopproxy.java:111) org.springframework.aop.framework.proxyfactory.getproxy(proxyfactory.java:98) org.springframework.batch.core.listener.abstractlistenerfactorybean.getobject(abstractlistenerfactorybean.java:163) org.springframework.beans.factory.support.factorybeanregistrysupport.dogetobjectfromfactorybean(factorybeanregistrysupport.java:144) ... 43 more {quote} i\'ll post more errors as i collect them" and "Xd does not reconnect to jobstore if connection is lost leaving jobs in inconsistent state. xd deployment description xd cluster (1 container) environment ec2 type of test shell command line test failed on hdfs (only test that was run) build used built may 7 10:29 pst [overall issue] xd admin and container lost connectivity to the the jobstore (mysql on rds) and did not reconnect. exception displayed in log. caused by: com.mysql.jdbc.exceptions.jdbc4.communicationsexception: the last packet successfully received from the server was 54321927 milliseconds ago. the last packet sent successfully to the server was 54321928 milliseconds ago. is longer than the server configured value of \'wait_timeout\'. you should consider either expiring and/or testing connection validity before use in your application increasing the server configured values for client timeouts or using the connector/j connection property \'autoreconnect=true\' to avoid this problem. sun.reflect.nativeconstructoraccessorimpl.newinstance0(native method) sun.reflect.nativeconstructoraccessorimpl.newinstance(nativeconstructoraccessorimpl.java:57) sun.reflect.delegatingconstructoraccessorimpl.newinstance(delegatingconstructoraccessorimpl.java:45) java.lang.reflect.constructor.newinstance(constructor.java:526) com.mysql.jdbc.util.handlenewinstance(util.java:411) com.mysql.jdbc.sqlerror.createcommunicationsexception(sqlerror.java:1117) com.mysql.jdbc.mysqlio.send(mysqlio.java:3871) com.mysql.jdbc.mysqlio.sendcommand(mysqlio.java:2484) com.mysql.jdbc.mysqlio.sqlquerydirect(mysqlio.java:2664) com.mysql.jdbc.connectionimpl.execsql(connectionimpl.java:2788) com.mysql.jdbc.connectionimpl.execsql(connectionimpl.java:2738) com.mysql.jdbc.statementimpl.executequery(statementimpl.java:1617) org.springframework.jdbc.core.jdbctemplate$1querystatementcallback.doinstatement(jdbctemplate.java:452) org.springframework.jdbc.core.jdbctemplate.execute(jdbctemplate.java:402) ... 57 more [side effects] [unable to create new job with same name] user executed a job list and then removed the jobs in the list. when the user tried to create new jobs using the same names the application reported: "command failed org.springframework.xd.rest.client.impl.springxdexception: statementcallback sql [select job_name from job_registry_names] no operations allowed after connection closed. nested exception is com.mysql.jdbc.exceptions.jdbc4.mysqlnontransientconnectionexception: no operations allowed after connection closed." the only way to resolve it completely was to: 1) shutdown the admin and the containers. 2) clear the jobs from the batch job tables by hand 3) restart xd admin and containers." does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a spring xd user i\'d like to use diego based receptor implementation of xd admin spi (based on modulelauncher) so i can run data pipeline use-cases running on cf lattice/diego." is a user story, and is worth 8 story points; because it is most similar to:\nAs a pm i\'d like to have a static _gh_pages_ to organize the collateral such as samples tutorials links perf. benchmarks and ref. architectures so that it\'s easy for anyone to quickly get up and running on xd. and similar to "As a developer i\'d like to build isolated boot-based {{modulerunner}} for use in container-managed environments so i can run xd without the hard requirement for running _xd-containers_." and similar to "As a developer i\'d like to develop a “singlenode�? (in a single jvm) implementation of xd admin spi (based on module launcher) so i can run data pipeline use-cases locally." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a developer i\'d like to create a example to demonstrate jdbc to hdfs data movement." is a user story, and is worth 5 story points; because it is most similar to:\nAs a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future. and similar to "As a developer i\'d like to revisit the existing design and identify known limitations and/or the gaps." and similar to "As a user i\'d like to parameterize codegen options so i can generate code on the fly as needed." (which are all user stories with a worth of 5 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Create a ‘throughput-sampler’ module for benchmarking a module that could be used in a stream definition such as reactor --bind tcp://0.0.0.0:3000/length?codec=bytes | do-stuff | throughput-sampler where throughput-sampler could start measurements once a key \'start\' is found in a message and stop when the key \'stop\' is found in a message listing the number of msgs/sec etc." is a not user story; because it is most similar to:\n"Add property maxmessagesperpoll to all polled sources polled message sources return only one message per poll by default. when polling say a file directory with many files files will be emitted once per {{fixeddelay}}. as a user i need to configure a limit for the number of messages that will be emitted per poll." and similar to "Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice" and similar to "Show stream / tap relationship in admin ui it would be nice if the admin ui would sort the streams in such a way that the taps that are created for a particular stream are somehow placed under the tapped stream... {code} stream a ... +-tap a.foo ... +-tap a.bar ... {code} same goes for the list command in the xd-shell" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Spark streaming integration with kafka message does not respect offsetstoretopic config option the property "xd.messagebus.kafka.offsetstoretopic" was added to kafka message bus which is not updated to spark streaming message bus properties that will be transferred to spark cluster for streaming module deployment. we also need a better approach to re-use the message bus properties so that we don\'t have to update the properties in connection property names." is a not user story; because it is most similar to:\n"Refactor tests with filesink|filesource to use eventually() matcher some tests (esp. moduleclasspathtests.testmodulewithclasspathafterserverstarted) seem to fail because of a race condition. add a hamcrest matcher that knows how to read the content of a filesink|source and refactor those to read like e.g. assertthat(filesink eventually(hascontent("foo)))" and similar to "Support for composed streams some recent changes caused this to be turned off. basically the change was to police whether a stream is well formed at create time rather than deploy time. by deferring that check we can create composed streams that are not deployable by themselves but that are when used as building blocks in proper streams." and similar to "Incorrect message bus is used at runtime for some reason the message bus is bound to incorrect transport (different from what is set as xd_transport) at runtime. this is from the container log: 2015-04-21 13:42:12331 1.2.0.snap info main util.xdconfiglogginginitializer - transport: rabbit ... 2015-04-21 13:42:35144 1.2.0.snap info redismessagelistenercontainer-4 sink.a2 - test" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nCreate rest api for stopping all job executions adopted functionality from spring batch admin should include springmvc test framework style tests. delete /batch/jobs/executions/ - stop all job executions" is a user story, and is worth 2 story points; because it is most similar to:\nAs a user i\'d like to have the flexibility to configure db creds so that i can use a db of choice for batch job repository (metadata persistence). the scope of this task is to have the configuration specifics documented in the wiki. and similar to "As a s-c-d developer i\'d like to add support for dependency resolution so when two or more modules use different version of jars (ex: direct binding of two modules that include different versions of spring data) i have the capability to resolve and include the right bits at runtime." and similar to "As a s-c-d developer i\'d like to make the deployer work asynchronously so i can use the shell to return quickly and also queue deploy operations within yarn as tasks." (which are all user stories with a worth of 2 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Intermittent tcpmodulestests.testtcpsink test failure {noformat} org.junit.comparisonfailure: org.junit.comparisonfailure: expected:<[hi there! ]> but was:<[]> org.junit.comparisonfailure: expected:<[hi there! ]> but was:<[]> org.junit.assert.assertequals(assert.java:115) org.junit.assert.assertequals(assert.java:144) org.springframework.xd.shell.command.tcpmodulestests.testtcpsink(tcpmodulestests.java:63) sun.reflect.nativemethodaccessorimpl.invoke0(native method) (60 more lines...) {noformat} https://build.spring.io/browse/xd-jdk8-job1-1162/test" and "The ability to route within streams a flow or a processor component may require routing semantics. currently the stream assumes a single input and output for each module. a flow may support multiple outputs - switch routing that is - recipient list is not currently supported (another subtask?). we need to support semantics like: a |[output.foo:coutput.bar:ddefault:e]" does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"File sink filename should default to having a \'.out\' suffix." is a not user story; because it is most similar to:\n"Command to show the xml of the job definition" and similar to "Provide dsl completion after a "some:channel >" prefix" and similar to "Message bus optimizations (kafka + redis)" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Document mongodb source" is a not user story; because it is most similar to:\n"Test with java8 runtime" and similar to "Add email sink" and similar to "Documentation for deleting triggers" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Support for @configuration based module definitions" is a not user story; because it is most similar to:\n"Command to show the xml of the job definition" and similar to "Provide dsl completion after a "some:channel >" prefix" and similar to "Message bus optimizations (kafka + redis)" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nSpark streaming plugin shouldn\'t need tap listener cache since spark streaming doesn\'t use zk to keep track taps being created we don\'t need the tap listener cache setup at the container startup." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to use spel expressions inline at the stream definition level so i can operate on the payload consistently while using any ootb including the custom modules. and similar to "As a s-c-d developer i\'d like to add support for having different binder types for module\'s channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively." and similar to "As a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"As a spring xd user i\'d like to make spi implementation profile aware so i can run {{java -jar admin}} or {{cf push}} admin or {{ltc create admin}} and the corresponding implementation gets wired-in automatically." is a not user story; because it is most similar to:\n"Pluralization of admin nodes leadership selector group path (/xd/admin) currently the admin nodes that participate in the leadership election are grouped under /xd/admin. since there are multiple lock nodes that correspond to all the admin servers that participate in leadership election we can pluralize this node name to /xd/admins." and similar to "Shell: http post - allow posting of local file contents e.g. allow for posting of json data stored in local files. * allow users to specify the *content-type*. * ensure that unicode data (utf) posts correctly." and similar to "Move [back] button to top right the [back] button is at lower left of the page which requires scrolling all the way to the bottom - could we move it to top right? would make clicking back and forth for job executions much easier." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Acceptance tests updated to be able to test xd yarn deployment in order to run acceptance tests in their current state there had to be * changes to the code ** set the location of the data node for the hdfs tests. (because the data nodes were no located with the master.) ** disable the copying of batch basic because we did not know the container location. * had to configure tests by hand so that we could identify the: ** admin port (with new features we should be able to write code to find it. should be able to set it but we had a problem. possible yarn bug) ** jmx port ( we could set it for the master but not the container this was a yarn deploybug ) ** where the build was deployed on the container node so we could copy the batch-basic test." is a not user story; because it is most similar to:\n"Redisaggregatecounterrepository doesn\'t give proper results back both luke\'s original code and my refactored pr[1] (which uses same code snippet) seem to behave strangely. stored values seem fine but the getcounts() method seems phony. to test: 1) stream create foo --definition "time|log" 2) tap create bar --definition "tap@foo | aggregatecounter" 3) curl -h "application/json" http://localhost:8080/metrics/aggregate-counters/bar this gives default bucketing (hourly) but chances are that they are empty." and similar to "Jmx shouldn\'t register taps or streams if the creation fails there\'s a lifecycle problem when a tap creation fails (e.g. because the dsl syntax is wrong). subsequent attempts to create the tap will fail with an error: [{"links":[]"logref":"messagehandlingexception""message":"org.springframework.context.applicationcontextexception: failed to start bean \'org.springframework.integration.monitor.integrationmbeanexporter#0#92e27d20-4c48-4131-866c-91b6cb642ca2\' nested exception is org.springframework.jmx.export.unabletoregistermbeanexception: unable to register mbean [messagechannelmonitor: [name=nullchannel sends=0 receives=0]] with key \'xd.tap1:type=messagechannelname=nullchannelindex=1module=log\' nested exception is javax.management.instancealreadyexistsexception: xd.tap1:type=messagechannelname=nullchannelindex=1module=log"}] disabling jmx solves the issue. reproduce create a bad stream definition name \'bad\' try to recreate with the same name but correct stream definitions. the system will report that the stream already exists." and similar to "Allow mixins of moduleoptionsmetadata a lot of modules have similar options. moreover job modules often have options that belong to at least two domains (eg jdbc + hdfs). i think that by using flattenedcompositemoduleoptionsmetadata we could come up with a way to combine several options pojos into one. something like: public class jdbchdfsoptionsmetadata { @optionsmixin private jdbcoptionsmetadata jdbc @optionsmixin private hdfsoptionsmetadata hdfs } this would expose eg "driverclass" as well as "rolloversize" as top level options. values could be actually injected into the fields so that eg custom validation could occur (default validation for the mixin class would occur by default)" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nSet bean name in consumerendpointfactorybean {{localmessagebus}} and {{compositemodule}}." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have a flexible rxjava module so that it can as a processor. and similar to "As a developer i\'d like to split up spring-xd dependencies to more fine-grained so i can get the ones "below the line" down to spring-bus-* instead of spring-xd-* bundle." and similar to "As a developer i\'d like to move \'serialization codec\' from spring xd repo into spring-bus so i can update spring xd to inherit the features/functionalities via maven dependency." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a user i would like the ability to undeploy or suspend a module without losing the deployment properties. currently when temporarily suspending a module an undeploy and redeploy is executed. during the redeploy the deployment properties need to be added again. instead it would be nice if the properties are persisted so they automatically included with the deployment." is a user story, and is worth 3 story points; because it is most similar to:\nAs a user i\'d like to have concurrency and compression support for kafka so that i can increase performance throughput and/or increase responsiveness *things to consider:* * make global configuration options be "defaults" and allow per-deployment overrides * add options for ** concurrency ** compression support and similar to "As a developer i\'d like to remove _id_ and _timestamp_ attributes from the {{tuple}} class so i can improve performance characteristics by not having them go through _serde_ instead we could leverage message headers to collect such information." and similar to "As a user i\'d like to have the option to extend compression support so that i can override the defaults and customize as needed. follow-up from this pr: https://github.com/spring-projects/spring-xd/pull/1346" (which are all user stories with a worth of 3 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nMake batch job restarts work using single node see also xd-1320." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have the option to write into _file roll_ sink so that i can store events on the local file system. and similar to "As a field engineer i\'d like to have a comparison of storm examples in spring xd so that it is easy to relate from implementation standpoint." and similar to "As a user i need a document covering our recommendations for deploying a xd cluster using mesos with the marathon framework." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Enabling security breaks job launching from admin ui after enabling security (see xd-3214) and granting user {{role_view role_create role_admin}} privileges it\'s not possible to launch jobs from admin ui. for {{bdl-sqoop-combo-lukasz-mongo-dev}} job 403 error is returned when admin ui attempts to access following url after "launch job" button is pressed: {code} http://ilabphd12.isus.emc.com:9393/jobs/executions?jobparameters=%7b%7d&jobname=bdl-sqoop-combo-lukasz-mongo-dev {code} please see attached screenshot." is a not user story; because it is most similar to:\n"Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics" and similar to "When there are no wiretap listeners don\'t publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be "serialized + transported + deserialized" to other members even if there is no one listening. this "serialized + transported + deserialized" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted." and similar to "Create design document for implementation strategy to support message conversion in channelregistry the conversion should be based on content-type headers similar to the way spring\'s httpmessageconverters work (with mime types). also the map of available converters should be extensible while including the most common defaults (for json xml etc). we most likely want to add a few of our own content types also (e.g. for tuples). most likely this logic and the configuration methods for extending the converter map belong in abstractchannelregistry since it should be common across all implementations (i.e. the logic should be the same regardless of the transport used after-serialization/before-deserialization)." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Filedeletionlistener resolves resources once in the {{filejdbc}} job there is the option to delete the imported files. this functionality is created using a listener called the {{filedeletionstepexecutionlistener}}. when you run the job the first time with the {{--deletefiles=true}} everything works as expected. the second time you run the job the files are not deleted. i believe the issue here is that since the {{filedeletionstepexecutionlistener}} is a singleton the resources are resolved only once (the first time the job runs) and so it works the first time but if the job is run again later and new files match the expression they are not picked up. i believe the fix is to make the {{filedeletionstepexecutionlistener}} used in this job step scoped." is a not user story; because it is most similar to:\n"Graphlab - enhance machine learning and computations we would like to experiment with “graphlab” a graph based high performance distributed computation framework written in c++. features: * hdfs integration * maching learning toolkits website -> http://graphlab.org/projects/index.html github -> https://github.com/graphlab-code/graphlab _note: could be part of unified offering of phd_" and similar to "Html doco has font issues for [source] it seems the html rendering of documentation is using a variable width font for some of the code (esp. [sourcesh] apparently) rendering. weird thing though is that when mouse hovering over some of them they went back to fixed width. see screenshot. http://static.springsource.org/spring-xd/docs/current-snapshot/reference/html/#_start_the_runtime_and_the_xd_shell" and similar to "Investigate missing stepexecutions in jobrepository.getlastjobexecution() when the job is run with its jobparameters by simplejoblauncher its lastjobexecution\'s stepexecutions are checked for unknown status to throw jobrestartexception. it looks like the stepexecutions for the lastjobexecution are never set and the collection \'stepexecutions\' is not fetched from job repository. hence not sure if the following condition in simplejoblauncher\'s run(final job job final jobparameters jobparameters) would ever get executed: for (stepexecution execution : lastexecution.getstepexecutions()) { if (execution.getstatus() == batchstatus.unknown) { //throw throw new jobrestartexception("step [" + execution.getstepname() + "] is of status unknown") }//end if }//end for" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Composing modules ignores output/input type specified in definition when composing two or more modules together if any output or input type is specified between modules it is ignored. i created a stream with definition: {code} mysourcemodule --outputtype=application/json | myprocessormodule {code} that worked fine as expected. when i composed this definition as a composed module i got errors stating that the processors message handler had no handler method for the object the source module emitted. the process was only configured to accept json as string. i simply had to create a second handler method but if i didnt own the module this could be an issue." is a not user story; because it is most similar to:\n"Add information that is updated in real-time for use in container matching information related to an xd-container process and/or machine that is not static such as \'group\' e.g. free memory number of deployed streams should be available for use as variables in the evaluation context of the criteria spel expression in the admin\'s container matcher. a good candidate for the source of this information are system mbeans. see http://docs.oracle.com/javase/7/docs/api/java/lang/management/package-summary.html" and similar to "Create ci for xd-ec2 project automated test will use directly use the deployer class * asserts on basic info of runninginstance ** check that ebs was mounted ** that application was unzipped ** redis and rabbit are running via port checks * http requests on admin port for ** root path ** list of modules * @afterclass that will look for the cluster name and terminate all instances look at ‘live’ tag in jclouds tests for some additional tactics" and similar to "When there are no wiretap listeners don\'t publish messages being able to listen to a stream at any point has a significant performance impact. the reason for the impact is the message needs to be "serialized + transported + deserialized" to other members even if there is no one listening. this "serialized + transported + deserialized" processes happens for each step in a flow - source | process | sink. recommend creating some kind of protocol for wiretaps that allows members to know if there is someone listening in the grid so they will emit the data. likewise we need to deregister the listener if the wiretap is deleted." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Upgrade to spring 4.0.2.release" is a not user story; because it is most similar to:\n"Test with java8 runtime" and similar to "Add email sink" and similar to "Documentation for deleting triggers" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRemove usage of <context:property-placeholder location=.../> in module defitions this doesn\'t follow the conventions we have with other modules and it also means it isn\'t easy to override via environment variables etc. this is in hdfs and some others." is a user story, and is worth 8 story points; because it is most similar to:\nAs a s-c-s developer i\'d like to investigate the right approach to include external library as dependency (ex: mysql) so i can decide better handling of libraries which needs loaded and available in root cp at the runtime. and similar to "As a user i\'d like to have a _generator_ source module so that i can create a number of messages of a specified size (similar to rabbit\'s perftest utility). example: generator --nummsgs 10000 --msgsize 1024 --numthreads 1" and similar to "As a developer i\'d like to have a central place to manage external properties for applications across all the environments so i can provide server and client-side support for externalized configuration for xd-admin and xd-container servers." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "Npe in containerredeploymenttests running the distributed tests ({{-drun_distributed_tests=true}}) against d109a3a and got the following: {noformat} java.lang.nullpointerexception org.springframework.xd.dirt.module.store.zookeepermodulemetadatarepository.updatedeploymentstatus(zookeepermodulemetadatarepository.java:209) org.springframework.xd.dirt.module.store.zookeepermodulemetadatarepository.findallbycontainerid(zookeepermodulemetadatarepository.java:313) org.springframework.xd.dirt.container.store.zookeepercontainerrepository.findallruntimecontainers(zookeepercontainerrepository.java:339) org.springframework.xd.dirt.rest.containerscontroller.list(containerscontroller.java:97) sun.reflect.generatedmethodaccessor100.invoke(unknown source) sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java.lang.reflect.method.invoke(method.java:483) org.springframework.web.method.support.invocablehandlermethod.invoke(invocablehandlermethod.java:215) org.springframework.web.method.support.invocablehandlermethod.invokeforrequest(invocablehandlermethod.java:132) org.springframework.web.servlet.mvc.method.annotation.servletinvocablehandlermethod.invokeandhandle(servletinvocablehandlermethod.java:104) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.invokehandlemethod(requestmappinghandleradapter.java:749) org.springframework.web.servlet.mvc.method.annotation.requestmappinghandleradapter.handleinternal(requestmappinghandleradapter.java:689) org.springframework.web.servlet.mvc.method.abstracthandlermethodadapter.handle(abstracthandlermethodadapter.java:83) org.springframework.web.servlet.dispatcherservlet.dodispatch(dispatcherservlet.java:938) org.springframework.web.servlet.dispatcherservlet.doservice(dispatcherservlet.java:870) org.springframework.web.servlet.frameworkservlet.processrequest(frameworkservlet.java:961) org.springframework.web.servlet.frameworkservlet.doget(frameworkservlet.java:852) javax.servlet.http.httpservlet.service(httpservlet.java:620) org.springframework.web.servlet.frameworkservlet.service(frameworkservlet.java:837) javax.servlet.http.httpservlet.service(httpservlet.java:727) org.apache.catalina.core.applicationfilterchain.internaldofilter(applicationfilterchain.java: {noformat}" and "Enforce consistent naming across cli options and command/template/operations method names e.g. see comment on pr #390: https://github.com/spring-projects/spring-xd/pull/390/files#r7563787 in that case it\'s "delete" in one place and "destroy" in another. there are other cases as well." does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Module delete command should only provide completions with composed modules there is no point in providing completion with something that will fail when the user tries it. the information about a module being a composed is now available at the rest layer so should be used" is a not user story; because it is most similar to:\n"Update sources section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#http" and similar to "Create pojo based filesink module metadata this is so that we can have an enum that can show the possible values and autocomplete. using just the xml the user has a greater chance to enter an invalid mode." and similar to "Avoid use of module name twice in location when using a custom modules see https://github.com/springsource/spring-xd/pull/240#discussion_r6045724" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Accessing xd-admin urls in the browser return xml and not json here is an example: the following request for streams: http://ec2-23-20-25-30.compute-1.amazonaws.com:9393/streams returns: this xml file does not appear to have any style information associated with it. the document tree is shown below. <errors xmlns:atom="http://www.w3.org/2005/atom"> <error logref="httpmessagenotwritableexception"> <message> could not marshal [pagedresource { content: [links: [<http://ec2-23-20-25-30.compute-1.amazonaws.com:9393/streams/ticktock>rel="self"]] metadata: metadata { number: 0 total pages: 1 total elements: 1 size: 20 } links: [] }]: null nested exception is javax.xml.bind.marshalexception - with linked exception: [com.sun.istack.saxexception2: unable to marshal type "org.springframework.xd.rest.client.domain.streamdefinitionresource" as an element because it is not known to this context.] </message> </error> </errors>" is a not user story; because it is most similar to:\n"Bind producer before consumer {quote} here is the full exception: org.springframework.messaging.messagedeliveryexception: dispatcher has no subscribers for channel \'resourceconfiguredmodule [name=filter type=processor group=request-rate index=0 @58b0f318]:use-expressiondefaultadminsinglenodehsqldbserver:9393.output\'. nested exception is org.springframework.integration.messagedispatchingexception: dispatcher has no subscribers and here is that stream: topic:httpstartstop > filter --expression=payload.gethttpstartstop().getpeertype().name().equals(\'client\') | requestrateaggregator | appmetricssplitter | router --expression=\'topic:app-request-rate-\'+#jsonpath(payload\'$.appid\') [2:59 pm] gary russell: @markfisher @ilayaperumalgopinathan @patrickperalta this looks like another (not fixed by the previous fix) timing problem with taps when using singlenode. the tap is started before the tap stream is deployed. but it\'s not clear to me how the filter module could be deployed/bound as a consumer before the requestrateaggregator [3:08 pm] gary russell: i see the problem: abstractmessagebusbinderplugin.bindconsumerandproducers() binds the consumer before the producer - this is the wrong order for a passive component such as the filter. /cc @davidturanski {quote}" and similar to "Installer needs to launch a single node xd instance * create a deployer class has methods ** runninginstance deploysinglenode *** takes into account machine size as specified in properties file ** void destroyallinstances() *** or whatever jclouds returns from the destroy call ** ctor gets passed in the root boostrapping credentials. * install script steps ** setup xd_home variable ** make sure privileges are set to ubuntu not root. ** start up redis and rabbit using ports as specified in xd-ec2.properties ** use port watch to make sure they started ** start singlenode after configuration. ** display hostname of singlenode server ** report successful and failed startup ** hit root of xd-admin to see if there is a response on 9393 * integration testing ** verify that config files have been setup ** verify xd has been started ** verify xd can process a basic http post" and similar to "Filejdbc job throws exception during acceptance tests currently the testfilejdbcjobmultipleinvocations fails on line 156 stating data is different in table that what is expected. currently this is failing on the single admin/container deployment using redis as a transport. also seeing the following exception in the attached log: {noformat} 2.0.0.snap error xdbus.job:ec2job3.0.requests-1 step.abstractstep - encountered an error executing step step1 in job ec2job3 org.springframework.batch.item.itemstreamexception: failed to initialize the reader ... caused by: java.lang.illegalstateexception: input resource must exist (reader is in \'strict\' mode): url [file:/tmp/xd/output/filejdbctest/filejdbctest1.out] {noformat} the file is should be present and data present for the test. at least according to the checker on ec2 and local deployments." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nCreate a shell command processor and sink create processor and sink modules that can execute a shell command using stdin and stdout to stream data." is a user story, and is worth 8 story points; because it is most similar to:\nAs a pm i\'d like to have the smart grid demo (from s1-2014) ported into spring xd samples repo. and similar to "As a developer i\'d like to build _spark_ batch job sample so that we can demonstrate some of the distributed data computation capabilities." and similar to "As a user i\'d like to have the option to write into _file roll_ sink so that i can store events on the local file system." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRename create to \'save\' in resourcedeployer to be consistent with spring data repository method names." is a user story, and is worth 8 story points; because it is most similar to:\nAs a s-c-d developer i\'d like to invoke rest apis via shell so i can validate {{streamcontroller}} operations. and similar to "As a s-c-d developer i\'d like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences." and similar to "As a s-c-d user i\'d like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\n XUSP could not provide an answer as the amount of similarity between "File source - provide option to pass on file object this story may need to be broken into several stories particularly for batch scenarios one may not want to run a "file-to-string-transformer" on the payload file in the file source but rather handle/pass the file reference itself (local san etc.) - e.g. in case somebody drops a 2gb or in scenarios where one wants to push those large files into hdfs and run hadoop jobs on the data. this is important for batch jobs as they need to access the file itself for the reader. we need to *keep in mind the various transports we support*. not sure how kryo handles file serialization. i would think we only need the file meta data to be persisted not the file-data itself (make that configurable??)." and "Nonodeexception after bouncing admin server steps to reproduce: h6. 1. clear out zk {code} [zk: localhost:2181(connected) 0] rmr /xd {code} h6. 2. start admin h6. 3. deploy stream {code} xd:>stream create --name tt --definition "time|log" --deploy {code} admin log: {code} 16:38:10537 info deployer server.streamdeploymentlistener - deploying stream stream{name=\'tt\'} 16:38:10545 warn deployer server.streamdeploymentlistener - no containers available for deployment of module \'log\' for stream \'tt\' 16:38:10547 warn deployer server.streamdeploymentlistener - no containers available for deployment of module \'time\' for stream \'tt\' 16:38:10547 info deployer server.streamdeploymentlistener - deployment status for stream \'tt\': deploymentstatus{state=failed} 16:38:10550 info deployer server.streamdeploymentlistener - stream stream{name=\'tt\'} deployment attempt complete {code} h6. 4. shut down and restart admin. the following is logged: {code} org.apache.zookeeper.keeperexception$nonodeexception: keepererrorcode = nonode for /xd/deployments/streams/tt/modules org.apache.zookeeper.keeperexception.create(keeperexception.java:111) org.apache.zookeeper.keeperexception.create(keeperexception.java:51) org.apache.zookeeper.zookeeper.getchildren(zookeeper.java:1590) org.apache.curator.framework.imps.getchildrenbuilderimpl$3.call(getchildrenbuilderimpl.java:214) org.apache.curator.framework.imps.getchildrenbuilderimpl$3.call(getchildrenbuilderimpl.java:203) org.apache.curator.retryloop.callwithretry(retryloop.java:107) org.apache.curator.framework.imps.getchildrenbuilderimpl.pathinforeground(getchildrenbuilderimpl.java:199) org.apache.curator.framework.imps.getchildrenbuilderimpl.forpath(getchildrenbuilderimpl.java:191) org.apache.curator.framework.imps.getchildrenbuilderimpl.forpath(getchildrenbuilderimpl.java:38) org.springframework.xd.dirt.server.streamdeploymentlistener.recalculatestreamstates(streamdeploymentlistener.java:207) org.springframework.xd.dirt.server.deploymentsupervisor$leaderlistener.takeleadership(deploymentsupervisor.java:352) org.apache.curator.framework.recipes.leader.leaderselector$wrappedlistener.takeleadership(leaderselector.java:536) org.apache.curator.framework.recipes.leader.leaderselector.dowork(leaderselector.java:398) org.apache.curator.framework.recipes.leader.leaderselector.doworkloop(leaderselector.java:443) org.apache.curator.framework.recipes.leader.leaderselector.access$100(leaderselector.java:63) org.apache.curator.framework.recipes.leader.leaderselector$2.call(leaderselector.java:244) org.apache.curator.framework.recipes.leader.leaderselector$2.call(leaderselector.java:238) java.util.concurrent.futuretask.run(futuretask.java:266) java.util.concurrent.executors$runnableadapter.call(executors.java:511) java.util.concurrent.futuretask.run(futuretask.java:266) java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java.lang.thread.run(thread.java:744) {code}" does not exceed the minimum threshold of 75%.', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAdd real modulerunner application the current modulerunner is test app used for validation. this should be replaced by a real app." is a user story, and is worth 8 story points; because it is most similar to:\nAs a s-c-d developer i\'d like to produce ref. documentation for s-c-d architecture so i could define 1.x and 2.x deployment differences. and similar to "As a s-c-d developer i\'d like to invoke rest apis via shell so i can validate {{streamcontroller}} operations." and similar to "As a s-c-d user i\'d like to have the option of {{gemfire}} spi so i can use {{gemfire}} and the infrastructure to orchestrate s-c-d data microservices." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a user i\'d like to refer to documentation in wiki so that i can setup and configure spark as a batch job as recommended." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have the option of editing the deployed/undeployed stream so that i don\'t have to destroy to just change any deployment property. and similar to "As a developer i\'d like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics." and similar to "As a developer i\'d like to refactor stream/job definition repository so i can decouple from module deployment concerns." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Kafka tests shouldn\'t assume offset 0 in `org.springframework.xd.dirt.stream.kafkasinglenodestreamdeploymentintegrationtests#verifyondemandqueues` when testing the queue partitions for content the read is assumed to start at offset 0. this is incorrect because the topics may exist already especially in a ci environment" is a not user story; because it is most similar to:\n"The use of labelled modules and taps needs more explanation https://github.com/spring-projects/spring-xd/wiki/taps mentions this but the explanation needs more elaboration and example e.g. mystream -> "http | flibble: transform --expression=payload.touppercase() | file" "tap:stream:mystream.flibble > transform --expression=payload.replaceall(\'a\'\'.\') | log")" and similar to "Add aliases concept to module options and use in composed modules following merge of https://github.com/spring-projects/spring-xd/pull/601 allow a module option to be known by several names and elect a short name in composed module options when there is no ambiguity" and similar to "Replace usage of \'raw\' curl with shell command to post http data in documentation e.g. http://localhost:8080:>post httpsource --target http://localhost:9090 --data 10 i believe this will also help to avoid ugly syntax to escaping quotes for json as in the gemfire example." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Http does not report failure to bind to port stumbled upon this while having hadoop daemons running but simple way to repoduce: {noformat} nc -lp 9000 stream create foo --definition "http | log" --deploy ==> all seems ok http post --data hello ==> error 500 rightfully so {noformat}" is a not user story; because it is most similar to:\n"Update twittersearchtest to handle the latest release of twittersearch the changes to twittersearch means that it will send multiple messages during the duration of the test. to support these changes: 1) remove assertreceived. since the number of messages is indeterminate 2) change file sink that captures the results to append mode. because each message will overwrite the previous messages result." and similar to "Investigate intermittent failure of redisstreamdefinitionrepositorytests the test for findall often fails for me when running inside gradle. (could not reproduce inside eclipse) i already tried fixing it by using a different redis key space but to no avail. one explanation would be if gradle runs tests concurrently but my understanding is that it does not." and similar to "Resolve classloading issues for custom hadoop based batch jobs there are several issues making it hard to impossible to create batch jobs that use pig hive hbase or other technologies supported by spring for apache hadoop project. we need to make the corresponding dependencies available on the hadoop classpath." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Ui: implement job deploy/undeploy from the job definitions page from xd-1023 the job status(deployed/undeployed) is available from jobinstance repository and a job can be deployed/undeployed correctly. implement job deploy/undeploy for a given job from jobdefinitions page and indicate status of the job definition (deployed/undeployed)." is a not user story; because it is most similar to:\n"Make deploy=false as the default when creating a new job the automatic deployment of the job makes it harder to understand the lifecycle of the job and also does not allow for the opportunity to define any additional deployment metadata for how that job runs e.g is it partitioned etc." and similar to "Add accepted type logic to module a module can declare one ore more payload types it will accept. this will inform the runtime re. automatic payload conversion. this can be done in the module xml configuration and processed by streamplugin" and similar to "Remove unavailable jobs if a job is deployed an the singlenode job is canceled the job name cannot neither be reused nor destroyed. see screenshots." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Update sink\'s hdfs section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#hdfs" is a not user story; because it is most similar to:\n"Create multi-container single host testing framework use external jvm launch support provided by the oracle tools framework (https://java.net/projects/oracletools)." and similar to "Update sink\'s gemfire section to use shell commands instead of curl see http://static.springsource.org/spring-xd/docs/1.0.0.m1/reference/html/#gemfire" and similar to "Make rabbitmessagebus rabbitmq config properties optional when the bus is used outside of the xd container (e.g. spring-bus) the inheritance from spring boot configuration is broken (no application.yml or servers.yml on the cp). make the bus properties optional (add ":")" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Add create() and deploy() methods to streamdeployer see https://docs.google.com/a/gopivotal.com/drawings/d/1kcnbvsprbjgc10itf9cskwst8wgcjgg3wgzfkqlcazu/edit refactor current defaultstreamdeployer" is a not user story; because it is most similar to:\n"Adapt springone 2012 ui code from keynote demo of election results to use xd existing code: https://github.com/ghillert/springone2012" and similar to "Add server runtime info to banner standalone admin currently has no shiny banner as container has. more importantly it does not say which port it\'s listening on the transport used etc." and similar to "Design and budget perf env for xd on rackspace provide design for how we are going to run xd and kafka on rackspace. this includes the base design for the kafka perf tests environment. this will be used to provide a budget for the cloud resources for the performance environment." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nJline 1 is brought up (and shows in ide) through zk/curator we don\'t want jline1 anymore. this shows in ide only (either run shell integration tests or run the shell as gunnar mentioned)" is a user story, and is worth 8 story points; because it is most similar to:\nAs a developer i\'d like to add support to _flush_ state intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer. and similar to "As a developer i\'d like to add support to _flush_ offsets intelligently so i can reliably process streams based on successful message acknowledgements from the module-producer." and similar to "As a developer i\'d like to study the state management requirements so i can brainstorm and identify the design to natively add _stateful_ stream processing support in xd." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Add list command for aggregatecounter" is a not user story; because it is most similar to:\n"Make xd-ec2 bootiful" and similar to "Remove timestamp task from scsm" and similar to "Update to spring batch 3.0.1 snapshots" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Introduce cache to zookeepercontainerrepository add cache implementation for zookeepercontainerrepository" is a not user story; because it is most similar to:\n"Gemfire sink to update a gemfire cache. update a gemfire region." and similar to "Add kafka-based implementation for abstractdistributedtransportsinglenodestreamdeploymentintegrationtests" and similar to "Add authentication support to the mongo sink" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Add counter module" is a not user story; because it is most similar to:\n"Test with java8 runtime" and similar to "Add email sink" and similar to "Documentation for deleting triggers" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nCreate integration test script for jms & mqtt create a script to sanity check jms and mqtt" is a user story, and is worth 5 story points; because it is most similar to:\nAs a developer i\'d like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to "As a user i\'d like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism." and similar to "As a developer i want to have a {{binderfactory}} abstraction so that i can support multiple binder types in the future." (which are all user stories with a worth of 5 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nForce and validate information on ootb modules in line with the checks we do for options documentation. currently made more complicated than it should because of rogue folders (such as scripts/ and analytics-pmml/ in the registry)" is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i want spring xd’s message bus to be able to pre-allocate partitions between nodes when a stream is deployed so that rebalancing doesn’t happen when a container crashes and/or it’s redeployed. and similar to "As a s-c-d developer i\'d like to add support for having different binder types for module\'s channels so i can plug {{rabbit}} {{redis}} or {{kafka}} as the source or sink to read and write respectively." and similar to "As a user i want spring xd to pre-allocate a set of partitions between the kafka source modules when a stream is deployed so that deployment is simpler and rebalancing doesn’t take place." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Spike: determine options for configuring shared module dependencies h2. narrative as a developer i\'d like to be able to configure common dependencies for the entire environment. an example could be that i use mysql for my databases. i want to be able to configure the mysql driver once and have all modules use it. h2. back story spring batch uses a database to store job state (the job repository). this is a shared resource across all jobs (both custom developed and ootb). in order to support ootb jobs we\'ll need to have a way for users to provide the db driver to each module. ideally this would be possible without requiring that each of our ootb modules be repackaged." is a not user story; because it is most similar to:\n"Partition jobs (jdbchdfs) are running in sequence the jdbchdfs jobs that are partitioned are running in sequence rather than in parallel. our expectation with partition jobs is that they run in parallel. job configuration is: jdbchdfs --driverclassname=\'oracle.jdbc.oracledriver\' --url=\'jdbc:oracle:thin:@=**********\' --username=\'=**********\' --password=********** --validationquery=\'select current_timestamp from dual\' --tablename=\'hz_organization_profiles\' --columns=\'organization_profile_id ... version_number\' --partitions=10 --partitioncolumn=\'organization_profile_id\' --directory=\'/ingest/source/oracle11i/ar/hz_organization_profiles\' --filename=hz_organization_profiles --fileextension=csv --delimiter=| --commitinterval=10000 --rollover=262144000 --dateformat=yyyy-mmm-dd --partitionresultstimeout=1800000 --testonborrow=false" and similar to "Allow easy integration with other types of message transports - remove enums for transport layers if a third party messaging solution wants to be the transport layer in springxd they must currently fork the springxd code base and change the enums. example: commondistributedoptions.controltransport currently limits to the following options (rabbit redis). so if a third party like messaging system like zeromq wanted to plug-in they would have to add to the enum. here is another example where gemfire was used as the messaging system: https://github.com/charliemblack/spring-xd/blob/master/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/server/options/commondistributedoptions.java#l38 all messaging enums should be removed for an extensible model." and similar to "Provide user friendly messages when dealing with invalid gemfire sink xd:>stream create --name testgemfire --definition "http --port=8887 | gemfire" 16:20:28503 warn spring shell client.resttemplate:524 - post request for "http://localhost:8080/streams" resulted in 500 (internal server error) invoking error handler command failed org.springframework.xd.rest.client.impl.springxdexception: org.springframework.beans.factory.beandefinitionstoreexception: invalid bean definition with name \'region\' defined in null: could not resolve placeholder \'regionname\' in string value "${regionname}"" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Add to acceptance test ec2 ci build plan a stage that stops any existing ci ec2 deployments add a stage to the plan that will stop any instances that the ci process may have started before and relaunch a 2 node install based on rabbit. https://build.springsource.org/browse/xd-atec2 was created as an empty shell. the running of across different transports will be handled in a separate story along with adding a stage to run a \'hello world\' acceptance test." is a not user story; because it is most similar to:\n"Duplicate messages on tap if i fiddle with the testtappingwithlabels method i can reproduce the same issue: httpsource source = newhttpsource() filesink sink = newfilesink().binary(true) filesink tapsink1 = newfilesink().binary(true) stream().create("myhttp" "%s | flibble: transform --expression=payload.touppercase() | flibble2: transform --expression=payload.touppercase() | %s" source sink) stream().create("mytap4" "tap:stream:myhttp.flibble > transform --expression=payload.replaceall(\'a\'\'.\') | %s" tapsink1) source.ensureready().postdata("dracarys!") assertthat(sink eventually(hascontentsthat(equalto("dracarys!")))) assertthat(tapsink1 eventually(hascontentsthat(equalto("dr.c.rys!")))) java.lang.assertionerror: expected: "dr.c.rys!" trying at most 10 times but: failed after 10*100=1000ms: "dr.c.rys!dr.c.rys!"" and similar to "Vary consumer size (ec-db-4) using a single producer message size of 1000 bytes pretch of 100. send 1m messages and increase or decrease so that a given test iteration takes about 2 minutes. vary the number of consumers. measure the msg/sec rate and calculate the data transfer rate in mb/sec. *number of consumers:* * 1 * 2 * 4 * 6 * 10 * 50 during the measurements look at the rabbitmq admin ui and see if the queue is backing up." and similar to "Riemann - measure based alerts we would like to experiment with “riemann” a clojure library to aggregate events from servers and applications through stream processing. features: * tracking latency distribution * email for exceptions * memory and cpu statistics this will help understand the behavior of critical components to eventually orchestrate workflows to proactively monitor and notify important contacts/groups as needed. webiste -> http://riemann.io/ github -> https://github.com/aphyr/riemann" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Update dependencies to latest spring io platform versions https://github.com/spring-projects/gradle-plugins/tree/master/spring-io-plugin is the starting point to introduce the appropriate plugin to check for the correct dependencies." is a not user story; because it is most similar to:\n"Remove "legacy" application code following spring bootification see the discussion in https://github.com/spring-projects/spring-xd/pull/370 there are now various superseded classes and tests which we no longer need." and similar to "Admin ui: deployment status tooltip should close when the controller scope is lost please refer to: https://github.com/spring-projects/spring-xd/issues/1119" and similar to "Profile support for modules to allow for groups of beans to be defined or not in the container that runs a module. when deploying a stream (e.g. via the rest api) it should be possible to also provide profile names. then those would apply to any modules within that particular stream deployment." (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Upgrade to 1.2.0 rc1 sik release" is a not user story; because it is most similar to:\n"Make xd-ec2 bootiful" and similar to "Remove timestamp task from scsm" and similar to "Update to spring batch 3.0.1 snapshots" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nUse alternativejdkidgenerator instead of 3rd party library spring 4.0 provides a uuid generator (used by default in si) that should be used instead of the com.eaoi.uuid library in the xd-tuple library" is a user story, and is worth 8 story points; because it is most similar to:\nAs a spring xd user i\'d like to use the latest releases of {{hdp}}/{{phd}} distros so i can leverage the latest features to create pipelines involving {{hdfs}}. and similar to "As a user i\'d like to have the option to configure default access control for endpoints so that i can grant access by _admin_ or _viewer_ roles." and similar to "As a user i\'d like to have the option of editing the deployed/undeployed stream so that i don\'t have to destroy to just change any deployment property." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nAs a developer i want to have to run kafka tests on an external broker so that i reduce the footprint of the build process." is a user story, and is worth 8 story points; because it is most similar to:\nAs a user i\'d like to have the option of editing the deployed/undeployed stream so that i don\'t have to destroy to just change any deployment property. and similar to "As a developer i\'d like to upgrade to kafka 0.8.2 so i can leverage the latest features in order to test the performance characteristics." and similar to "As a developer i\'d like to refactor stream/job definition repository so i can decouple from module deployment concerns." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nRemove support for the leading : on items that have a declared namespace when using jobs taps we no longer need to have the leading :. i.e. :tap:foo. we should only support tap:foo." is a user story, and is worth 8 story points; because it is most similar to:\nAs a field engineer i\'d like to have a comparison of spark streaming examples in spring xd so that it is easy to relate from implementation standpoint. and similar to "As a spring xd user i\'d like to have ipython notebook integration so i can perform interactive data computations in real-time." and similar to "As a user i\'d like to have a separate _yml_ file to list the deployment manifest properties so that i don\'t have to include as part of the stream definition." (which are all user stories with a worth of 8 story points).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\n"Interacting with xd on yarn 1. how we talk to the xd instance(s) on yarn 2. there is a rest interface which location can be exposed either via resource manager or appmaster 3. technically appmaster could also expose interface which could eihter be proxy for xd rest or dedicated interface implementation(i.e. thrift or spring int)" is a not user story; because it is most similar to:\n"Use mocks in shell tests instead of using real `moduledeployer` try using mocks so that the module deployer downloading the maven co-ordinates from repo can be avoided (for module deployment case). since module deployer and controllers are tested individually it would be good to focus on shell functionality only for the shell tests." and similar to "Hsql always started even when using other database i set the config/xd-config.yml properties to use mysql including this profiles: active: defaultmysql when xd admin starts i still see hsql server started and localhost:9393/env shows: "profiles": [ "adminserver" "hsqldb" "default" ]" and similar to "Moduleconfigurationexception should not report http 500 see discussion at https://github.com/spring-projects/spring-xd/pull/1537#issuecomment-99583179 this is likely a client error so should be in the 4xx family. this requires customization of restcontrolleradvice" (which are not user stories).', '"Introduction:\nXUSP is an algorithm that is designed to automatically determine the amount of story points for a given user story.\nA user story is a description of a feature that must be developed for a specific end-user ofa product, who wants the feature because it creates certain value.An example of a user story is: "As a new user, I would like to have a contact form, so that I can contact customer service for help with product setup."\nThe prediction of the story point value is made using a specific process called xDNN, which classifies items based on the similarity between it and already learned items.\nPrediction:\nSupport pagination in list() command for taps see xd-477" is a user story, and is worth 5 story points; because it is most similar to:\nAs a developer i\'d like to setup ui infrastructure so i can integrate admin_ui and flo. and similar to "As a spring xd developer i\'d like to refactor current controller with spi calls so i can invoke the respective admin spi implementation based on the deployment. *controllers to refactor* * containerscontroller * streamscontroller * modulescontroller * jobscontroller" and similar to "As a user i\'d like to access sqoop logs so that i can troubleshoot or evaluate the errors or current state respectively. we will have to identify how to capture the sqoop logs and stream them to our logging mechanism." (which are all user stories with a worth of 5 story points).'...






